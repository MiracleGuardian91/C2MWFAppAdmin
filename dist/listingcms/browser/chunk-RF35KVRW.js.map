{
  "version": 3,
  "sources": ["src/lib/models/wf.namespace.ts", "src/lib/models/bmo.model.ts", "src/app/admin/wf/wfd/models/bpmn/element.model.ts", "src/app/admin/wf/wfd/models/bpmn/event-bus.model.ts", "src/app/admin/wf/wfd/models/wf.model.ts", "src/app/admin/wf/wfd/util/bpmn.ts", "src/app/admin/wf/wfd/services/workflow-api.service.ts", "src/app/admin/wf/components/wfconditions/wf-condition-detail/wf-condition-detail.component.ts", "src/app/admin/wf/components/wfconditions/wf-condition-detail/wf-condition-detail.component.html", "src/app/admin/wf/components/wfconditions/baseGrid.ts", "src/app/admin/wf/components/wfconditions/wfconditions.component.ts", "src/app/admin/wf/components/wfconditions/wfconditions.component.html"],
  "sourcesContent": ["export namespace WF {\r\n  export interface ConditionDetail {\r\n    CondID: string;\r\n    Description: string;\r\n    Name: string;\r\n    Version: string;\r\n    BMID: string;\r\n    BMOGNAM: string;\r\n    WFID: string;\r\n    Status: Status;\r\n    Area: CondArea;\r\n    Enabled: ActionState;\r\n    Mandatory: ActionState;\r\n    Visible: ActionState;\r\n    CondLevel: CondLevel;\r\n    Filter: ConditionFilter[];\r\n  }\r\n\r\n  interface CondArea {\r\n    ConditionArea: ConditionArea;\r\n    BmObjectGuids: string;\r\n  }\r\n\r\n  export type ConditionArea =\r\n    | 'DataModelObject'\r\n    | 'DataModelGroup'\r\n    | 'BusinessModelObject'\r\n    | 'Trigger';\r\n\r\n  interface CondLevel {\r\n    ConditionLevel: ConditionLevel;\r\n    StageStateGuids: string;\r\n  }\r\n\r\n  export type ConditionLevel = 'Stage' | 'State';\r\n\r\n  export interface ConditionFilter {\r\n    DmoName: string;\r\n    DmoId: string;\r\n    Operator: string;\r\n    ComparisonValue: string;\r\n    ConditionExpression: string;\r\n  }\r\n\r\n  export interface BMInfo {\r\n    BMID: string;\r\n    BMNAME: string;\r\n    MOD: Mode;\r\n    STATUS: Status;\r\n  }\r\n\r\n  export interface BMOGInfo {\r\n    BMOGID: string;\r\n    BMOGNAME: string;\r\n    NameVer: string;\r\n  }\r\n\r\n  export interface StageInfo {\r\n    GUID: string;\r\n    WFOSNAM: string;\r\n  }\r\n\r\n  export interface StateInfo extends StageInfo {\r\n    States: string;\r\n  }\r\n\r\n  export interface BMOInfo {\r\n    GUID: string;\r\n    BMONAME: string;\r\n  }\r\n\r\n  export interface DMOGInfo extends BMOInfo {\r\n    DMOGNAME: string;\r\n  }\r\n\r\n  export interface DMOInfo extends DMOGInfo {\r\n    DMONAME: string;\r\n  }\r\n\r\n  export interface DMOItem {\r\n    /**GUID */\r\n    GlobalID: string;\r\n    NAME: string;\r\n    DispName: string;\r\n    GroupName: string;\r\n  }\r\n\r\n  export interface TriggerInfo {\r\n    GUID: string;\r\n    WFONAME: string;\r\n    WFOSNAME: string;\r\n    TriggerNAME: string;\r\n  }\r\n\r\n  export type Mode = 'Edit' | 'Published';\r\n\r\n  export enum Status {\r\n    Inactive = '0',\r\n    Active = '1',\r\n  }\r\n\r\n  export enum ActionState {\r\n    No = '0',\r\n    Yes = '1',\r\n    NA = '2',\r\n  }\r\n\r\n  export interface NotificationTriggerDetail {\r\n    EmailSubject: string;\r\n    ToEmailIds: string;\r\n    CcMailIds: string;\r\n    MailText: string;\r\n    Files: NTDFile[];\r\n  }\r\n\r\n  export interface NTDFile {\r\n    FileName: string;\r\n    FileSize: string;\r\n  }\r\n}\r\n", "export interface FormBMO extends BMO {\r\n  Type: BMOType.Form;\r\n}\r\n\r\nexport interface ContactBMO extends BMO {\r\n  Type: BMOType.Contact;\r\n}\r\n\r\nexport interface SubProcessBMO extends BMO {\r\n  Type: BMOType.SubProcess;\r\n}\r\n\r\nexport interface AttachmentBMO extends BMO {\r\n  Type: BMOType.Attachment;\r\n}\r\n\r\nexport interface DocumentBMO extends BMO {\r\n  Type: BMOType.Document;\r\n}\r\n\r\nexport interface SubProcessBMO extends BMO {\r\n  Type: BMOType.SubProcess;\r\n}\r\n\r\nexport interface ChildProcessBMO extends BMO {\r\n  Type: BMOType.ChildProcess;\r\n}\r\n\r\nexport interface SharedChildProcessBMO extends BMO {\r\n  Type: BMOType.SharedChildProcess;\r\n}\r\n\r\nexport interface BMO {\r\n  Type: BMOType;\r\n  DisplayName: string;\r\n  List: string[];\r\n  DataModelObjectGroups: {};\r\n  StageStateConditions: {};\r\n  ProcessName: string;\r\n  ParentProcessDmoName: string;\r\n  ChildProcessDmoName: string;\r\n  ChildProcessDmoGuid: string;\r\n  SubProcessChildDMO: any[];\r\n  Name: string;\r\n}\r\n\r\nexport enum BMOType {\r\n  Form = 'Forms',\r\n  Contact = 'Contacts',\r\n  Attachment = 'Attachments',\r\n  Document = 'Documents',\r\n  SubProcess = 'Subprocess',\r\n  ChildProcess = 'ChildProcess',\r\n  SharedChildProcess = 'SharedChildProcess',\r\n}\r\n", "import { Stage, State, Trigger, TriggerCondition, Workflow } from '../wf.model';\r\n\r\nexport type DiagramEl =\r\n  | WorkflowShape\r\n  | StageShape\r\n  | SubProcessShape\r\n  | StartStateShape\r\n  | StateShape\r\n  | EndStateShape\r\n  | TriggerExtensionShape\r\n  | GatewayShape\r\n  | LabelShape\r\n  | TriggerConnection\r\n  | TriggerConditionConnection\r\n  | AnnotationShape\r\n  | AssociationConnection\r\n  | API\r\n  | DataSchema\r\n  | HumanInLoop\r\n  | LLM\r\n  | PromptVariable\r\n  | Scheduler\r\n  | SqlQuery\r\n  | Vector\r\n  | DottedFlow;\r\n\r\nexport type DiagramParent = Shape | undefined;\r\nexport type DiagramLabel = Shape & { labelTarget?: DiagramEl };\r\n\r\n\r\n// Base interface for elements\r\nexport interface ElementLike {\r\n  id: string;\r\n  businessObject?: any;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\nexport interface Element extends ElementLike {\r\n  label?: Label;\r\n  labels: Label[];\r\n  parent?: Element;\r\n  incoming: ConnectionShape[];\r\n  outgoing: ConnectionShape[];\r\n}\r\n\r\n// Shape type for elements with positional attributes\r\nexport interface ShapeLike extends ElementLike {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  \r\n}\r\n\r\nexport interface Shape extends ShapeLike, Element {\r\n  isFrame?: boolean;\r\n  children: Element[];\r\n  host?: Shape;\r\n  attachers: Shape[];\r\n  waypoints?: Point[];\r\n}\r\n\r\n// Workflow related types\r\nexport type WorkflowShape = Shape & {\r\n  type: ElementType.Pool;\r\n  props: Workflow;\r\n  parent: Root | undefined;\r\n  children: StageShape[];\r\n};\r\n\r\nexport type StageShape = Shape & {\r\n  type: ElementType.Stage;\r\n  props: Stage;\r\n  parent: WorkflowShape;\r\n  children: StateShapeType[];\r\n};\r\n\r\nexport type GenericStateShape<T extends ElementType> = Shape & {\r\n  type: T;\r\n  props: State;\r\n  parent: StageShape;\r\n  children: null;\r\n};\r\n\r\nexport type SubProcessShape = GenericStateShape<ElementType.SubProcess>;\r\nexport type StartStateShape = GenericStateShape<ElementType.StartState>;\r\nexport type StateShape = GenericStateShape<ElementType.State>;\r\nexport type EndStateShape = GenericStateShape<ElementType.EndState>;\r\nexport type API = GenericStateShape<ElementType.API>;\r\nexport type DataSchema = GenericStateShape<ElementType.DataSchema>;\r\nexport type HumanInLoop = GenericStateShape<ElementType.HumanInLoop>;\r\nexport type LLM = GenericStateShape<ElementType.LLM>;\r\nexport type PromptVariable = GenericStateShape<ElementType.PromptVariable>;\r\nexport type Scheduler = GenericStateShape<ElementType.Scheduler>;\r\nexport type SqlQuery = GenericStateShape<ElementType.SqlQuery>;\r\nexport type Vector = GenericStateShape<ElementType.Vector>;\r\nexport type DottedFlow = GenericStateShape<ElementType.DottedFlow>;\r\n\r\nexport type StateShapeType =\r\n  | SubProcessShape\r\n  | StartStateShape\r\n  | StateShape\r\n  | EndStateShape\r\n  | API\r\n  | DataSchema\r\n  | HumanInLoop\r\n  | LLM\r\n  | PromptVariable\r\n  | Scheduler\r\n  | SqlQuery\r\n  | Vector;\r\n\r\nexport type TriggerExtensionShape = Shape & {\r\n  type: ElementType.TriggerExtension;\r\n  props: Trigger;\r\n  parent: StageShape;\r\n  children: any[];\r\n};\r\n\r\n// Type for shapes that do not have props, like Gateway, Label, Annotation\r\nexport interface ProplessShape<T extends ElementType, Parent extends Shape> extends Shape {\r\n  type: T;\r\n  parent: Parent;\r\n}\r\n\r\nexport type GatewayShape = ProplessShape<ElementType.Gateway, any>;\r\nexport type LabelShape = ProplessShape<ElementType.Label, any>;\r\nexport type AnnotationShape = ProplessShape<ElementType.Annotation, any>;\r\n\r\n// Connection related types\r\nexport interface ConnectionLike extends ElementLike {\r\n  waypoints: Point[];\r\n}\r\n\r\nexport interface Connection extends ConnectionLike, Element {\r\n  source?: Element;\r\n  target?: Element;\r\n}\r\n\r\nexport type ConnectionForm<T extends ElementType, Data, Parent> = Connection & {\r\n  type: T;\r\n  props: Data;\r\n  source: Parent;\r\n  target: Parent;\r\n};\r\n\r\nexport type TriggerConnection = ConnectionForm<\r\n  ElementType.Trigger,\r\n  Trigger,\r\n  StateShapeType | GatewayShape | TriggerExtensionShape\r\n>;\r\nexport type TriggerConditionConnection = ConnectionForm<\r\n  ElementType.Trigger,\r\n  TriggerCondition,\r\n  GatewayShape\r\n>;\r\nexport type AssociationConnection = ConnectionForm<\r\n  ElementType.Association,\r\n  undefined,\r\n  any\r\n>;\r\n\r\nexport type ConnectionShapeWithProps =\r\n  | TriggerConnection\r\n  | TriggerConditionConnection;\r\n\r\nexport type ConnectionShape = ConnectionShapeWithProps | AssociationConnection;\r\n\r\nexport type RootLike = ElementLike & {\r\n  isImplicit?: boolean;\r\n};\r\n\r\nexport interface Root extends RootLike, Element {}\r\n\r\nexport interface LabelLike extends ShapeLike {}\r\n\r\nexport interface Label extends LabelLike, Shape {\r\n  labelTarget?: Element;\r\n}\r\n\r\nexport type ParentLike = ShapeLike | RootLike;\r\nexport type Parent = Shape | Root;\r\n\r\nexport type Position = {\r\n  top: number;\r\n  bottom: number;\r\n  left: number;\r\n  right: number;\r\n};\r\n\r\nexport interface Waypoint extends Point {\r\n  original?: Point;\r\n}\r\n\r\nexport enum ElementType {\r\n  Process = 'bpmn:Process',\r\n  Root = 'bpmn:Collaboration',\r\n  Pool = 'bpmn:Participant',\r\n  Stage = 'bpmn:Lane',\r\n  StartState = 'bpmn:StartEvent',\r\n  EndState = 'bpmn:EndEvent',\r\n  State = 'bpmn:Task',\r\n  Gateway = 'bpmn:ExclusiveGateway',\r\n  Trigger = 'bpmn:SequenceFlow',\r\n  TriggerExtension = 'bpmn:IntermediateCatchEvent',\r\n  Association = 'bpmn:Association',\r\n  Annotation = 'bpmn:TextAnnotation',\r\n  SubProcess = 'bpmn:SubProcess',\r\n  Label = 'label',\r\n  TestElectric = 'bpmn:TestElectric',\r\n  DottedFlow = 'custom:DottedFlow',\r\n  API = 'custom:API',\r\n  DataSchema = 'custom:DataSchema',\r\n  HumanInLoop = 'custom:HumanInLoop',\r\n  LLM = 'custom:LLM',\r\n  PromptVariable = 'custom:PromptVariable',\r\n  Scheduler = 'custom:Scheduler',\r\n  SqlQuery = 'custom:SqlQuery',\r\n  Vector = 'custom:Vector',\r\n  AgenticFlow = 'bpmn:AgenticFlow',\r\n}\r\n\r\nexport enum EventDef {\r\n  Timer = 'bpmn:TimerEventDefinition',\r\n  Notify = 'bpmn:MessageEventDefinition',\r\n  System = 'bpmn:ConditionalEventDefinition',\r\n}\r\n\r\nexport type ElementStyle = {\r\n  fill: string;\r\n  stroke: string;\r\n  strokeWidth?: number;\r\n  strokeLinecap?: 'round' | 'square' | 'butt' | 'unset';\r\n  strokeDasharray?: string | 'none';\r\n  strokeLinejoin?: 'bevel' | 'miter' | 'round' | 'unset';\r\n  fillOpacity?: number;\r\n  transform?: string;\r\n  markerStart?: string;\r\n  markerEnd?: string;\r\n};\r\nexport type Dimension = {\r\n  width: number;\r\n  height: number;\r\n};\r\n\r\nexport type BusinessObject = {\r\n  $type: ElementType;\r\n  id: string;\r\n  name?: string;\r\n  text?: string;\r\n  di?: any;\r\n  eventDefinitions?: ModdleElement[];\r\n  isForCompensation?: boolean;\r\n  isInterrupting?: boolean;\r\n  associationDirection?: 'One' | 'Both';\r\n  participantMultiplicity?: any;\r\n};\r\n\r\ntype ModdleElement = {\r\n  $type: EventDef;\r\n  id: string;\r\n  $attrs: any;\r\n  $parent: ModdleElement;\r\n};\r\n", "export interface EventBus {\r\n  createEvent: (data: any) => any;\r\n  fire: {\r\n    (...args: any[]): any;\r\n    (type: string, data?: any): any;\r\n  };\r\n  handleError: (error: Error) => any;\r\n  off: (events: EventType | EventType[], callback: CallableFunction) => void;\r\n  on: {\r\n    (\r\n      events: string | string[],\r\n      callback: EventBusEventCallback<any>,\r\n      that?: any\r\n    ): void;\r\n    (\r\n      events: string | string[],\r\n      priority: number,\r\n      callback: EventBusEventCallback<any>,\r\n      that?: any\r\n    ): void;\r\n  };\r\n  once: {\r\n    (event: EventType, callback: CallableFunction): void;\r\n    (\r\n      events: string | string[],\r\n      callback: EventBusEventCallback<any>,\r\n      that?: any\r\n    ): void;\r\n    (\r\n      events: string | string[],\r\n      priority: number,\r\n      callback: EventBusEventCallback<any>,\r\n      that?: any\r\n    ): void;\r\n  };\r\n}\r\n\r\ntype EventBusEventCallback<T> = (event: T & Event, ...args: any[]) => any;\r\n\r\nexport enum EventType {\r\n  InitComplete = 'diagram.initComplete',\r\n  CreateConnection = 'commandStack.connection.create.postExecuted',\r\n  Connect = 'connect.end',\r\n  ReconnectConnection = 'commandStack.connection.reconnect.postExecute',\r\n  // HoverOnDrag = 'drag.hover',\r\n  CreateElement = 'commandStack.elements.create.postExecute',\r\n  HoverOnElement = 'element.hover',\r\n  /** The difference between this and @property CreateElement is\r\n   * that it fires events if when elements are created programmatically.\r\n   * In contrast, CreateElement fires only when elements are created from the pallette.\r\n   */\r\n  CreateShape = 'commandStack.shape.create.postExecuted',\r\n  MoveEnd = 'shape.move.end',\r\n  DiagramChanged = 'element.changed',\r\n  DoubleClick = 'element.dblclick',\r\n  AddLane = 'commandStack.lane.add.postExecuted',\r\n  DeleteShape = 'commandStack.shape.delete.postExecuted',\r\n  DeleteConnection = 'commandStack.connection.delete.executed',\r\n  MoveShape = 'commandStack.shape.move.postExecute',\r\n  InitializeEditorActions = 'editorActions.init',\r\n  ReadonlyMode = 'readOnly.changed',\r\n\r\n  CreateConnectionRevert = 'commandStack.connection.create.reverted',\r\n  DeleteConnectionRevert = 'commandStack.connection.delete.reverted',\r\n  ReconnectConnectionRevert = 'commandStack.connection.reconnect.reverted',\r\n  CreateShapeRevert = 'commandStack.shape.create.reverted',\r\n  DeleteShapeRevert = 'commandStack.shape.delete.reverted',\r\n  MoveShapeRevert = 'commandStack.shape.move.reverted',\r\n  LassoToolSameStage = 'drag.end',\r\n  DragStart = 'drag.start',\r\n  DragEnd = 'drag.end',\r\n}\r\n", "import { Dimension, Point, Waypoint } from './bpmn';\r\nimport { StateSpecificationType } from './state-data.model';\r\nimport { TriggerType } from './trigger-data.model';\r\n\r\nexport interface MetaData {\r\n  Workflow: Workflow;\r\n  Coordinates: Partial<Coordinates>;\r\n  FlowType: 'wfd' | 'ai';\r\n}\r\n\r\nexport interface Workflow {\r\n  WFID: string;\r\n  TypeID: string;\r\n  Name: string;\r\n  Ver: string;\r\n  FriendlyName: string;\r\n  Status: string;\r\n  WorkflowMode: string;\r\n  IsRedoAllowed?: Boolean;\r\n  IsUndoAllowed?: Boolean;\r\n  ProcessName: string;\r\n  StageList: string[];\r\n  Stages: { [key: string]: Stage };\r\n  BusinessModels: {};\r\n  WorkflowRoles: {};\r\n}\r\n\r\nexport interface Stage {\r\n  Name: string;\r\n  FriendlyName: string;\r\n  Guid: string;\r\n  subProcessName: string;\r\n  subProcessWFVersionNo: string;\r\n  Status: string;\r\n  WorkFlowId: string;\r\n  WfoId: string;\r\n  States: { [key: string]: State };\r\n  Conditions: {};\r\n}\r\n\r\nexport interface State {\r\n  Name: string;\r\n  FriendlyName: string;\r\n  Status: string;\r\n  Guid: string;\r\n  WfoId: string;\r\n  WfosId: string;\r\n  SpecID: StateSpecificationType;\r\n  SubProcessName: string;\r\n  SubProcessWFVersionNo: string;\r\n  SpecificationName: string;\r\n  StateType: 'SubProcess' | '';\r\n  StateRoles: {};\r\n  Triggers: { [key: string]: Trigger };\r\n  CheckList: {};\r\n  Conditions: {};\r\n}\r\n\r\nexport interface Trigger {\r\n  Name: string;\r\n  FriendlyName: string;\r\n  Type: keyof typeof TriggerType;\r\n  TypeID: TriggerType;\r\n  ActionName: string;\r\n  StartStageGUID: string;\r\n  StartStateGUID: string;\r\n  StartStageName: string;\r\n  StartStateName: string;\r\n  Status: string;\r\n  Guid: string;\r\n  WfosId: string;\r\n  TriggerId: string;\r\n  SpecID: string;\r\n  ActionRoles: {};\r\n  NotifyRoles: {};\r\n  NotifyCcRoles: {};\r\n  TrgConditions: { [key: string]: TriggerCondition };\r\n}\r\n\r\nexport interface TriggerCondition {\r\n  // EndWfoGUID:       string;\r\n  // EndWfosGUID:      string;\r\n  //EndStageGuid:     string;\r\n  EndStateGuid: string;\r\n  Name: string;\r\n  NotifyMsg: string;\r\n  NotifySubject: string;\r\n  ConditionId: string;\r\n  Description: string;\r\n  TriggerId: string;\r\n  CondNotifyRole: {};\r\n  CondFilter: {};\r\n  CondNotifyCcRole: {};\r\n}\r\n\r\nexport interface Coordinates {\r\n  [id: string]: ElementCoordinates | TriggerCoordinates; // Index signature for dynamic properties\r\n}\r\n\r\nexport interface CoordinatesUndoRedo {\r\n  [id: string]: ElementCoordinates | TriggerCoordinates | UndoRedoActionGroup; // Index signature for dynamic properties\r\n  // Optional property\r\n}\r\n\r\nexport class UndoRedoActionGroup {\r\n  EntityId: string | null = null;\r\n  EntityType: string | null = null;\r\n  ActionName: string | null = null;\r\n  ActionGroupId: string | null = null;\r\n  ActionDetails: string | null = null;\r\n  SequenceNumber: string | null = null;\r\n}\r\n\r\nexport interface ElementCoordinates extends Point, Dimension {\r\n  name?: string;\r\n  color?: string;\r\n}\r\nexport interface TriggerCoordinates extends Dimension {\r\n  wayPoints: Waypoint[];\r\n}\r\n", "import { Status } from '@app/admin/data-modeler/models';\r\nimport {\r\n  DiagramEl,\r\n  Dimension,\r\n  ElementStyle,\r\n  ElementType,\r\n  EventDef,\r\n  TriggerConditionConnection,\r\n} from '../models/bpmn';\r\n\r\nconst t = ElementType;\r\n\r\nexport const COLORS: Partial<Record<ElementType | EventDef, ElementStyle | ElementStyle[]>> = {};\r\nCOLORS[t.Pool] = {\r\n  stroke: 'black',\r\n  fill: 'none',\r\n  fillOpacity: 0.35,\r\n  strokeWidth: 1,\r\n};\r\nCOLORS[t.Stage] = {\r\n  stroke: 'black',\r\n  fill: 'none',\r\n  fillOpacity: 0.35,\r\n  strokeWidth: 1,\r\n};\r\nCOLORS[t.StartState] = { stroke: 'black', fill: ' black' };\r\nCOLORS[t.State] = { stroke: 'black', fill: ' white', strokeWidth: 2 };\r\nCOLORS[t.EndState] = { stroke: 'black', fill: ' white', strokeWidth: 4 };\r\nCOLORS[t.SubProcess] = { stroke: 'black', fill: ' white' };\r\nCOLORS[t.TriggerExtension] = { stroke: 'black', fill: ' white' };\r\nCOLORS[EventDef.Timer] = { stroke: 'black', fill: ' white' }; \r\nCOLORS[EventDef.Notify] = { stroke: 'black', fill: ' white' }; \r\nCOLORS[EventDef.System] = { stroke: 'black', fill: ' white' };\r\nCOLORS[t.Gateway] = { stroke: 'black', fill: ' white', strokeWidth: 2 };\r\nCOLORS[t.Association] = {\r\n  stroke: '#006266',\r\n  fill: '#006266',\r\n  strokeDasharray: '0.5, 5',\r\n  strokeLinecap: 'round',\r\n  strokeLinejoin: 'round',\r\n};\r\nCOLORS[t.Annotation] = { stroke: 'black', fill: ' white' };\r\nCOLORS[t.Trigger] = [\r\n  { stroke: 'black', fill: 'black' },\r\n  { stroke: 'black', fill: 'black' },\r\n];\r\n\r\nCOLORS[t.DottedFlow] = [\r\n  { stroke: 'black', fill: 'black' },\r\n  { stroke: 'black', fill: 'black' },\r\n];\r\n\r\nconst INACTIVE_STROKE_COLOR = '#b4b4b4';\r\nconst INACTIVE_FILL_COLOR = '#c6c6c6';\r\n\r\nexport const isStateType = (el: DiagramEl) => {\r\n  return (\r\n    el?.type &&\r\n    (el.type === t.StartState ||\r\n      el.type === t.State ||\r\n      el.type === t.EndState ||\r\n      el.type === t.SubProcess ||\r\n      el.type === t.API ||\r\n      el.type === t.DataSchema ||\r\n      el.type === t.HumanInLoop ||\r\n      el.type === t.LLM ||\r\n      el.type === t.PromptVariable ||\r\n      el.type === t.Scheduler ||\r\n      el.type === t.SqlQuery ||\r\n      el.type === t.Vector) \r\n  );\r\n};\r\n\r\nexport const getShapeSize = (type: ElementType): Dimension => {\r\n  switch (type) {\r\n    case t.Pool:\r\n      return { width: 600, height: 250 };\r\n    case t.Stage:\r\n      return { width: 400, height: 100 };\r\n    case t.StartState:\r\n      return { width: 36, height: 36 };\r\n    case t.EndState:\r\n      return { width: 36, height: 36 };\r\n    case t.SubProcess:\r\n      return { width: 100, height: 80 };\r\n    case t.TriggerExtension:\r\n      return { width: 36, height: 36 };\r\n    case t.State:\r\n        return {width: 100, height: 80}\r\n    case t.Gateway:\r\n      return { width: 50, height: 50 };\r\n    case t.Annotation:\r\n      return { width: 100, height: 30 };\r\n    default:\r\n      return { width: 100, height: 80 };\r\n  }\r\n};\r\n\r\nexport const isConditionType = (el: TriggerConditionConnection) => {\r\n  return el.type === t.Trigger && el.source.type === t.Gateway;\r\n};\r\n\r\nexport const isConnection = (el: DiagramEl) =>\r\n  el.type === t.Trigger || el.type === t.Association || el.type === t.DottedFlow;\r\n\r\nexport const isCustomConnection = (el: DiagramEl) =>\r\n  el.type === t.DottedFlow;\r\n\r\nexport const getElementStyle = (el: any): ElementStyle => {\r\n  let style: ElementStyle = null;\r\n  const elementType = el.type;\r\n  const def = el.def;\r\n  if (el.type === t.Label) {\r\n    const parentType = el.businessObject.$type;\r\n    style = COLORS[parentType] as ElementStyle;\r\n  } else if (el.type === t.Trigger || el.type === t.DottedFlow) {\r\n    const index = el.source?.outgoing?.length;\r\n    const colors = COLORS[el.type] as ElementStyle[];\r\n    const len = colors.length;\r\n    const triggerColors = colors[index % len || 0];\r\n    style = { ...triggerColors };\r\n  } else if (el?.def === EventDef.Timer && !el.color){\r\n     style = style = { stroke: 'black', fill: 'white' };\r\n  }\r\n  else if (el?.def === EventDef.Notify && !el.color){\r\n      style = { stroke: 'black', fill: 'white' };\r\n  }\r\n  else if (el?.def === EventDef.System && !el.color){\r\n    style ={ stroke: 'black', fill: 'white' };\r\n  }\r\n   else {\r\n    if (elementType === t.Pool && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'none', strokeWidth: 2, fillOpacity: 0.35 };\r\n    } \r\n    else if (elementType === t.Stage && el.color) { // Stage has default black stroke color\r\n      style = { stroke: 'black', fill: el.color, strokeWidth: 2, fillOpacity: 0.35 };\r\n    } \r\n    else if (elementType === t.Stage && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white', strokeWidth: 2, fillOpacity: 0.35 };\r\n    } \r\n    else if (elementType === t.State && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white', strokeWidth: 2.5 };\r\n    } \r\n    else if (elementType === t.StartState && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'black', strokeWidth: 3};\r\n    } \r\n    else if (elementType === t.EndState && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white', strokeWidth: 4 };\r\n    } \r\n    else if ([t.API, t.DataSchema, t.HumanInLoop, t.LLM, t.PromptVariable, t.Scheduler, t.SqlQuery, t.Vector].includes(elementType) && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white', strokeWidth: 4 };\r\n    } \r\n    else if (elementType === t.SubProcess && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white', strokeWidth: 2 };\r\n    } \r\n    else if (elementType === t.Gateway && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white', strokeWidth: 2 };\r\n    } \r\n    else if (elementType === t.Association && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'none',  strokeDasharray: '0.5, 5', strokeLinecap: 'round', strokeLinejoin: 'round', };\r\n    } \r\n    else if (def === EventDef.Timer && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white' };\r\n    } \r\n    else if (def === EventDef.Notify && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white' };\r\n    } \r\n    else if (def === EventDef.System && (!el.color || el.color==='none')) {\r\n      style = { stroke: 'black', fill: 'white' };\r\n    } \r\n    else {\r\n      style = COLORS[elementType] as ElementStyle;\r\n    }\r\n  }\r\n  if (el.props?.Name === 'Trigger_Condtion') {\r\n    console.log(el.props);\r\n  }\r\n  if (el.props?.Status === Status.Inactive) {\r\n    style = { ...style };\r\n    if (style.fill) {\r\n      style.fill = INACTIVE_FILL_COLOR;\r\n    }\r\n    style.stroke = INACTIVE_STROKE_COLOR;\r\n  }\r\n  \r\n  if (el.color && el.color !== 'none') {\r\n  const style = getElementTypeStyle(elementType, el.color);\r\n  COLORS[def || elementType] = style;\r\n}\r\n\r\n// ...\r\n\r\nfunction getElementTypeStyle(elementType, color) {\r\n  switch (elementType) {\r\n    case 'bpmn:EndEvent':\r\n      return {\r\n        stroke: color,\r\n        fill: color,\r\n        fillOpacity: 1,\r\n        strokeWidth: 4,\r\n      };\r\n      case 'bpmn:Lane':\r\n          return {\r\n            stroke: color,\r\n           fill: color,\r\n           fillOpacity: 0.35,\r\n           strokeWidth: 2,\r\n          };\r\n    default:\r\n      return {\r\n        stroke: color,\r\n        fill: color,\r\n        fillOpacity: 1,\r\n        strokeWidth: 2,\r\n      };\r\n  }\r\n}\r\n \r\n\r\n  return style;\r\n\r\n\r\n};\r\nexport const getEventDef = (el: DiagramEl) => {\r\n  const defs = el.businessObject?.eventDefinitions;\r\n  return defs && defs[0]?.$type;\r\n};\r\n", "import { HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BaseHttpService } from '@app/core/services/base-http.service';\r\nimport { environment } from '@env/environment';\r\nimport { WF } from '@lib/models';\r\nimport { EMPTY, forkJoin, from, Observable, of, throwError } from 'rxjs';\r\nimport { catchError, concatAll, map, switchMap } from 'rxjs/operators';\r\nimport {\r\n  SaveStagePayload,\r\n  SaveStatePayload,\r\n  SaveTriggerConditionPayload,\r\n  SaveTriggerPayload,\r\n  SaveWorkflowPayload,\r\n  WFDetail,\r\n  WFStageDetail,\r\n  WFStateDetail,\r\n  WFTriggerConditionDetail,\r\n  WFTriggerDetail,\r\n} from '../models';\r\nimport {\r\n  DiagramEl,\r\n  ElementType,\r\n  EventDef,\r\n  TriggerConditionConnection,\r\n  TriggerConnection,\r\n} from '../models/bpmn';\r\nimport { ElementsIds } from '../models/elements-ids.model';\r\nimport {\r\n  Coordinates,\r\n  CoordinatesUndoRedo,\r\n  MetaData,\r\n  State,\r\n  TriggerCondition,\r\n  UndoRedoActionGroup,\r\n} from '../models/wf.model';\r\nimport { getEventDef, isConditionType, isStateType } from '../util/bpmn';\r\n\r\nconst t = ElementType;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class WorkflowApiService extends BaseHttpService {\r\n  readonly #baseurl = `${environment.Setting.GatewayAPIUrl}/wfapiwf/wf`;\r\n  stateIds: string;\r\n  stageIds: string;\r\n  ActionId: string;\r\n  previousId: string;\r\n  wfid: string;\r\n  wfjson: Coordinates;\r\n\r\n  getBMList(wfId: string) {\r\n    const url = `${this.#baseurl}/getWFBM`;\r\n    return this.get<{ Data: WF.BMInfo[] }>(url, { wfId }).pipe(\r\n      map((res) => res?.Data || [])\r\n    );\r\n  }\r\n\r\n  getWFConditionDetail(conditionId: string) {\r\n    const url = `${this.#baseurl}/getWFConditionDetail`;\r\n    return this.get<WF.ConditionDetail>(url, { conditionId });\r\n  }\r\n\r\n  callApiOnMoveLane(\r\n    stateID: string,\r\n    stageID: string,\r\n    ActionGroupId: string,\r\n    PreviousStage: string\r\n  ) {\r\n    // Validate input parameters\r\n    if (!stateID || !stageID || !ActionGroupId) {\r\n      console.error('Invalid parameters for stage change API call:', {\r\n        stateID,\r\n        stageID,\r\n        ActionGroupId,\r\n        PreviousStage,\r\n      });\r\n      return throwError(\r\n        () => new Error('Invalid parameters for stage change API call')\r\n      );\r\n    }\r\n\r\n    this.previousId = PreviousStage;\r\n    this.stateIds = stateID;\r\n    this.stageIds = stageID;\r\n    this.ActionId = ActionGroupId;\r\n    const url = `${this.#baseurl}/stagechange`;\r\n    return this.post(url, { stateID, stageID, ActionGroupId });\r\n  }\r\n\r\n  getBMOGsByBMId(bmId: string) {\r\n    const url = `${this.#baseurl}/getBMOGListBasedOnBM`;\r\n    return this.get<{ Data: WF.BMOGInfo[] }>(url, { bmId }).pipe(\r\n      map((res) => res?.Data || [])\r\n    );\r\n  }\r\n\r\n  getStateList(wfId: string) {\r\n    return this._getStageState<WF.StateInfo>(wfId, 'State');\r\n  }\r\n\r\n  getStageList(wfId: string) {\r\n    return this._getStageState<WF.StageInfo>(wfId, 'Stage');\r\n  }\r\n\r\n  getBmoList(bmId: string, bmogName: string) {\r\n    return this._getConditionAreaControls<WF.BMOInfo>(\r\n      bmId,\r\n      bmogName,\r\n      'BusinessModelObject'\r\n    );\r\n  }\r\n\r\n  getDmogList(bmId: string, bmogName: string) {\r\n    return this._getConditionAreaControls<WF.DMOGInfo>(\r\n      bmId,\r\n      bmogName,\r\n      'DataModelGroup'\r\n    );\r\n  }\r\n\r\n  getDmoList(bmId: string, bmogName: string) {\r\n    return this._getConditionAreaControls<WF.DMOInfo>(\r\n      bmId,\r\n      bmogName,\r\n      'DataModelObject'\r\n    );\r\n  }\r\n\r\n  getTriggerList(bmId: string, bmogName: string) {\r\n    return this._getConditionAreaControls<WF.TriggerInfo>(\r\n      bmId,\r\n      bmogName,\r\n      'Trigger'\r\n    );\r\n  }\r\n\r\n  getDmosByBM(bmId: string) {\r\n    const url = `${this.#baseurl}/getDmoBasedOnBM`;\r\n    return this.get<{ Data: WF.DMOItem[] }>(url, { bmId }).pipe(\r\n      map((res) => res?.Data || [])\r\n    );\r\n  }\r\n\r\n  upsertCondition(payload: WF.ConditionDetail) {\r\n    const url = `${this.#baseurl}/wfConditionUpsert`;\r\n    return this.post<string>(url, payload);\r\n  }\r\n\r\n  CheckValidationWF(\r\n    processName: string,\r\n    type: string,\r\n    wfId: string,\r\n    name: string,\r\n    version: string\r\n  ) {\r\n    const encodedName = btoa(name);\r\n    const url = `${this.#baseurl}/checkName/wf/${wfId}/${encodedName}`;\r\n    const params = {\r\n      wfObjType: type,\r\n    };\r\n\r\n    return this.get(url, params);\r\n  }\r\n\r\n  changeMode(wfId: string, mode: 'Edit' | 'Published') {\r\n    const url = `${this.#baseurl}/changewfMode`;\r\n    return this.post<boolean>(url, { Mode: mode, wfID: wfId });\r\n  }\r\n\r\n  downloadBulkUploadTemplate(processName: string) {\r\n    const url = `${this.#baseurl}/downloadTemplate/wf`;\r\n    return this.post<Blob>(url, null, { processName }, null, 'Blob');\r\n  }\r\n\r\n  getWorkflowDiagram(processName: string, versionNumber?: string) {\r\n    return this.get<{ MetaData: MetaData }>(`${this.#baseurl}/getwfdetails`, {\r\n      processName,\r\n      versionNumber,\r\n    }).pipe(map(({ MetaData }) => MetaData));\r\n  }\r\n\r\n  saveDiagramCoordinates(\r\n    wfId: string,\r\n    coordinates: Coordinates,\r\n    undoRedoActionGroup: UndoRedoActionGroup | null\r\n  ) {\r\n    const url = `${this.#baseurl}/saveWFDCoordinate`;\r\n\r\n    if (this.stateIds === undefined) {\r\n      this.wfid = wfId;\r\n      this.wfjson = coordinates;\r\n    }\r\n\r\n    // If undoRedoActionGroup is null or undefined, initialize it\r\n    if (!undoRedoActionGroup) {\r\n      undoRedoActionGroup = new UndoRedoActionGroup();\r\n    }\r\n\r\n    // Assign state-related data if stateIds is present\r\n    if (this.stateIds !== undefined) {\r\n      wfId = this.wfid;\r\n      coordinates = this.wfjson;\r\n      undoRedoActionGroup.EntityId = this.stateIds;\r\n      undoRedoActionGroup.EntityType = 'State';\r\n      undoRedoActionGroup.ActionName = 'StageChange';\r\n      undoRedoActionGroup.ActionGroupId = this.ActionId ?? '';\r\n      this.stateIds = undefined;\r\n      undoRedoActionGroup.SequenceNumber = this.incrementWorkflowValue(\r\n        this.wfid\r\n      ).toString();\r\n    }\r\n\r\n    // Assign stage-related data and build ActionDetails\r\n    if (this.stageIds !== undefined) {\r\n      const deletedIds = {\r\n        workflowIds: [wfId],\r\n        stageIds: [this.stageIds],\r\n        stateIds: [undoRedoActionGroup.EntityId ?? ''],\r\n        triggerIds: [],\r\n        conditionIds: [],\r\n        prevstageIds: [this.previousId ?? ''],\r\n      };\r\n      undoRedoActionGroup.ActionDetails = JSON.stringify(deletedIds);\r\n      this.stageIds = undefined;\r\n    }\r\n\r\n    // Build query parameters\r\n    const params = new HttpParams()\r\n      .set('wfId', wfId)\r\n      .set('EntityId', undoRedoActionGroup.EntityId ?? '')\r\n      .set('EntityType', undoRedoActionGroup.EntityType ?? '')\r\n      .set('ActionName', undoRedoActionGroup.ActionName ?? '')\r\n      .set('ActionGroupId', undoRedoActionGroup.ActionGroupId ?? '')\r\n      .set('ActionDetails', undoRedoActionGroup.ActionDetails ?? '')\r\n      .set('SequenceNumber', undoRedoActionGroup.SequenceNumber ?? '0');\r\n\r\n    // Request body\r\n    const body = { coordinates };\r\n\r\n    return this.postparm(url, body, params);\r\n  }\r\n\r\n  incrementWorkflowValue(wfid: string): number {\r\n    const storageKey = 'workflowDataArray';\r\n    const stored = sessionStorage.getItem(storageKey);\r\n    const array: [string, number][] = stored ? JSON.parse(stored) : [];\r\n\r\n    const index = array.findIndex(([key]) => key === wfid);\r\n\r\n    if (index !== -1) {\r\n      array[index][1]++; // Increment existing\r\n    } else {\r\n      array.push([wfid, 1]); // Add new with count 1\r\n    }\r\n\r\n    // Save updated array\r\n    sessionStorage.setItem(storageKey, JSON.stringify(array));\r\n\r\n    // Optional: update class property\r\n    //this.workflowDataArray = array;\r\n\r\n    // Return updated value\r\n    return index !== -1 ? array[index][1] : 1;\r\n  }\r\n\r\n  UndoWfdWorkflow(wfId: string) {\r\n    // debugger\r\n    const url = `${this.#baseurl}/UndoWfdWorkflow`;\r\n    const params = { wfId: wfId };\r\n    return this.post(url, null, params);\r\n  }\r\n\r\n  RedoWfdWorkflow(wfId: string) {\r\n    const url = `${this.#baseurl}/RedoWfdWorkflow`;\r\n    const params = { wfId: wfId };\r\n    return this.post(url, null, params);\r\n  }\r\n\r\n  getWorkflowDetails(workflowId: string) {\r\n    const url = `${this.#baseurl}/getWFDetailByWfId`;\r\n    return this.get<WFDetail[]>(url, { wfId: workflowId });\r\n  }\r\n\r\n  GetWfdDetailUsingProcessName(\r\n    guid: string,\r\n    displayName: string\r\n  ): Observable<any> {\r\n    const url = `${this.#baseurl}/GetWfdDetailUsingProcessName`;\r\n    return this.get<any>(url, { Guid: guid, DisplayName: displayName });\r\n  }\r\n\r\n  getStageDetails(stageId: string, workflowId: string) {\r\n    const url = `${this.#baseurl}/getWFStage`;\r\n    return this.get<WFStageDetail[]>(url, { WfoId: stageId, wfId: workflowId });\r\n  }\r\n\r\n  getStateDetails(stateId: string, stageId: string, workflowId: string) {\r\n    if (stateId) {\r\n      const url = `${this.#baseurl}/getWFState`;\r\n      return this.get<WFStateDetail>(url, {\r\n        WfoId: stageId,\r\n        wfosId: stateId,\r\n        wfId: workflowId,\r\n      });\r\n    } else {\r\n      return this._onCreatingNewState(stageId, workflowId);\r\n    }\r\n  }\r\n\r\n  getTriggerDetails(\r\n    triggerId: string,\r\n    stateId: string,\r\n    stageId: string,\r\n    workflowId: string\r\n  ) {\r\n    if (triggerId) {\r\n      const url = `${this.#baseurl}/getWFTrigger`;\r\n      return this.get<WFTriggerDetail>(url, {\r\n        triggerId,\r\n        wfosId: stateId,\r\n        WfoId: stageId,\r\n        wfId: workflowId,\r\n      });\r\n    } else {\r\n      return this._onCreatingNewTrigger(stateId, stageId);\r\n    }\r\n  }\r\n\r\n  getTriggerConditionDetails(\r\n    conditionId: string,\r\n    triggerId: string,\r\n    workflowId: string\r\n  ) {\r\n    const url = `${this.#baseurl}/getWFTriggerCondition`;\r\n    return this.get<WFTriggerConditionDetail>(url, {\r\n      conditionId,\r\n      triggerId,\r\n      wfId: workflowId,\r\n    });\r\n  }\r\n\r\n  updateElement(\r\n    element: DiagramEl,\r\n    payload: any,\r\n    processName?: string,\r\n    workflowId?: string\r\n  ): Observable<WFSaveResponse | null> {\r\n    let call$: Observable<WFSaveResponse> = of(null);\r\n    switch (element.type) {\r\n      case t.Pool:\r\n        call$ = this._saveWorkflowDetails(payload as SaveWorkflowPayload);\r\n        break;\r\n      case t.Stage:\r\n        call$ = this._saveStageDetails(payload as SaveStagePayload);\r\n        break;\r\n      case t.StartState:\r\n      case t.State:\r\n      case t.EndState:\r\n      case t.SubProcess:\r\n        call$ = this._saveStateDetails(payload as SaveStatePayload);\r\n        break;\r\n      case t.Trigger:\r\n        if (\r\n          element.source.type === t.Gateway ||\r\n          (element.source.type === t.TriggerExtension &&\r\n            [EventDef.System, EventDef.Timer].includes(\r\n              getEventDef(element.source)\r\n            ))\r\n        ) {\r\n          // Trigger condition\r\n          call$ = this._saveTriggerConditionDetails(\r\n            payload as SaveTriggerConditionPayload,\r\n            processName,\r\n            workflowId\r\n          );\r\n        } else {\r\n          const pl = payload as SaveTriggerPayload;\r\n          call$ = this._saveTriggerDetails(pl).pipe(\r\n            switchMap((res) => {\r\n              if (!pl.triggerId && isStateType(element.target)) {\r\n                const condPayload: SaveTriggerConditionPayload = {\r\n                  conditionId: '',\r\n                  conditionDescription: pl.friendlyName + '_Cond',\r\n                  conditionName: pl.name.substring(0, 20) + '_Cond',\r\n                  endWfoId: element.target.parent.props.WfoId,\r\n                  endWfosId: element.target.props.WfosId,\r\n                  triggerId: res.result?.TriggerId,\r\n                  status: 1,\r\n                  wfId: workflowId,\r\n                  ccMAilRoleGuids: [],\r\n                  deletedUploadedFiles: '',\r\n                  emailSubject: '',\r\n                  fileNames: '',\r\n                  fileUploadLoc: '',\r\n                  filter: [],\r\n                  notify: '',\r\n                  roleGuid: [],\r\n                };\r\n                return this._saveTriggerConditionDetails(\r\n                  condPayload,\r\n                  processName,\r\n                  workflowId\r\n                ).pipe(\r\n                  catchError((err) => throwError(err)),\r\n                  map((condRes) => {\r\n                    const conditions = {};\r\n                    conditions[condRes.result.ConditionId] = {\r\n                      ...condRes.result,\r\n                      TriggerId: res.result.TriggerId,\r\n                    };\r\n                    return {\r\n                      ...res,\r\n                      result: {\r\n                        ...res.result,\r\n                        TrgConditions: conditions,\r\n                      },\r\n                    };\r\n                  })\r\n                );\r\n              } else return of(res);\r\n            })\r\n          );\r\n        }\r\n        break;\r\n      case t.TriggerExtension:\r\n        call$ = this._saveTriggerDetails(payload);\r\n        break;\r\n      default:\r\n        return of(null);\r\n    }\r\n    return call$.pipe(\r\n      catchError((error: HttpErrorResponse) => of(error.error))\r\n    );\r\n  }\r\n\r\n  deleteElements(ids: ElementsIds, workflowId: string) {\r\n    let conditionCall$ = of('');\r\n    let triggerCall$ = of('');\r\n    let stateCall$ = of('');\r\n    let stageCall$ = of('');\r\n    let workflowCall$ = of('');\r\n    if (ids.conditionIds.length > 0) {\r\n      conditionCall$ = this._deleteTriggerCondition(\r\n        ids.conditionIds,\r\n        workflowId\r\n      );\r\n    }\r\n    if (ids.triggerIds.length > 0) {\r\n      triggerCall$ = this._deleteTrigger(ids.triggerIds, workflowId);\r\n    }\r\n    if (ids.stateIds.length > 0) {\r\n      const storedDatastr = sessionStorage.getItem('StateJson');\r\n      let storedData: Record<string, string> = {};\r\n      storedData = JSON.parse(storedDatastr);\r\n      const anyMissing = ids.stateIds.some((id) => !(id in storedData));\r\n\r\n      if (anyMissing || ids.stageIds.length == 0) {\r\n        stateCall$ = this._deleteState(ids.stateIds, workflowId);\r\n      }\r\n    }\r\n    if (ids.stageIds.length > 0) {\r\n      stageCall$ = this._deleteStage(ids.stageIds, workflowId);\r\n    }\r\n    if (ids.workflowIds.length > 0) {\r\n      workflowCall$ = this._deleteWorkflow(ids.workflowIds);\r\n    }\r\n    return from([\r\n      conditionCall$,\r\n      triggerCall$,\r\n      stateCall$,\r\n      stageCall$,\r\n      workflowCall$,\r\n    ]).pipe(concatAll());\r\n  }\r\n\r\n  restoreElement(workflowId: string, el: DiagramEl) {\r\n    let conditionCall$: Observable<string[] | null> = of(null);\r\n    let objectType: string;\r\n    let id: string;\r\n    if (el.type === t.Pool) {\r\n      objectType = 'workflow';\r\n      id = workflowId;\r\n    } else if (el.type === t.Stage) {\r\n      objectType = 'stage';\r\n      id = el.props.WfoId;\r\n    } else if (isStateType(el)) {\r\n      objectType = 'state';\r\n      id = (el.props as State).WfosId;\r\n    } else if (el.type === t.Trigger && el.source.type !== t.Gateway) {\r\n      objectType = 'trigger';\r\n      el = el as TriggerConnection;\r\n      id = el.props.TriggerId;\r\n      const conditions = new Set<string>();\r\n      // In case of triggers we need to make sure\r\n      // to restore all conditions as well\r\n      if (el.target.type !== t.Gateway) {\r\n        // if conditions are not visible in the ui\r\n        Object.keys(el.props.TrgConditions || {}).forEach((id) =>\r\n          conditions.add(id)\r\n        );\r\n      } else if (el.target.type === t.Gateway) {\r\n        (el.target.outgoing as TriggerConditionConnection[])\r\n          .filter((el) => el.props)\r\n          .forEach(({ props }) => conditions.add(props.ConditionId));\r\n      }\r\n      const calls$ = Array.from(conditions).map((id) =>\r\n        this.undeleteObject(workflowId, id, 'triggercondition')\r\n      );\r\n      conditionCall$ = forkJoin(calls$);\r\n    } else if (isConditionType(el as TriggerConditionConnection))\r\n      objectType = 'triggercondition';\r\n    id = (el as TriggerConditionConnection).props.ConditionId;\r\n\r\n    if (!objectType) return EMPTY;\r\n\r\n    return from([\r\n      conditionCall$,\r\n      this.undeleteObject(workflowId, id, objectType),\r\n    ]).pipe(concatAll());\r\n  }\r\n\r\n  private undeleteObject(\r\n    workflowId: string,\r\n    objectId: string,\r\n    objectType: string\r\n  ) {\r\n    const url = `${this.#baseurl}/undoDeletedObject`;\r\n    return this.post<string>(url, null, {\r\n      wfId: workflowId,\r\n      objectId,\r\n      objectType,\r\n    });\r\n  }\r\n\r\n  private _saveWorkflowDetails(payload: SaveWorkflowPayload) {\r\n    const url = `${this.#baseurl}/addUpdateWorkflow`;\r\n    return this.post<WFSaveResponse>(url, payload, null);\r\n  }\r\n\r\n  private _saveStageDetails(payload: SaveStagePayload) {\r\n    const url = `${this.#baseurl}/saveWFStage`;\r\n    return this.post<WFSaveResponse>(url, payload, null);\r\n  }\r\n\r\n  private _saveStateDetails(payload: SaveStatePayload) {\r\n    const url = `${this.#baseurl}/saveWFState`;\r\n    return this.post<WFSaveResponse>(url, payload, null);\r\n  }\r\n\r\n  private _saveTriggerDetails(payload: SaveTriggerPayload) {\r\n    const url = `${this.#baseurl}/saveWFTrigger`;\r\n    return this.post<WFSaveResponse>(url, payload, null);\r\n  }\r\n\r\n  private _saveTriggerConditionDetails(\r\n    payload: SaveTriggerConditionPayload,\r\n    processName: string,\r\n    workflowId: string\r\n  ) {\r\n    const url = `${this.#baseurl}/saveWFTriggerCondition`;\r\n    return this.post<WFSaveResponse>(url, payload, {\r\n      processName,\r\n      workflowid: workflowId,\r\n    });\r\n  }\r\n\r\n  private _deleteWorkflow(workflowIds: string[]) {\r\n    const url = `${this.#baseurl}/deleteWF`;\r\n    return this.delete<string>(url, { wfIDs: workflowIds.toString() });\r\n  }\r\n\r\n  private _deleteStage(stageIds: string[], workflowId: string) {\r\n    const url = `${this.#baseurl}/deleteWFStage`;\r\n    return this.delete<string>(url, {\r\n      wfoIds: stageIds.toString(),\r\n      wfId: workflowId,\r\n    });\r\n  }\r\n\r\n  private _deleteState(stateIds: string[], workflowId: string) {\r\n    const url = `${this.#baseurl}/deleteWFState`;\r\n    return this.delete<string>(url, {\r\n      wfosIds: stateIds.toString(),\r\n      wfId: workflowId,\r\n    });\r\n  }\r\n\r\n  private _deleteTrigger(triggerIds: string[], workflowId: string) {\r\n    const url = `${this.#baseurl}/deleteWFTrigger`;\r\n    return this.delete<string>(url, {\r\n      triggerIds: triggerIds.toString(),\r\n      wfId: workflowId,\r\n    });\r\n  }\r\n\r\n  private _deleteTriggerCondition(conditionIds: string[], workflowId: string) {\r\n    const url = `${this.#baseurl}/deleteWFTriggerCondition`;\r\n    return this.delete<string>(url, {\r\n      wfId: workflowId,\r\n      conditionIds: conditionIds.toString(),\r\n    });\r\n  }\r\n\r\n  private _onCreatingNewState(stageId: string, workflowId: string) {\r\n    const url = `${this.#baseurl}/getWFProcessListAndAvailableRoles`;\r\n    return this.get<Partial<WFStateDetail>>(url, {\r\n      wfoId: stageId,\r\n      wfId: workflowId,\r\n    });\r\n  }\r\n\r\n  private _onCreatingNewTrigger(stateId: string, stageId: string) {\r\n    const url = `${this.#baseurl}/getWFTriggerTypeAndAvailableRoles`;\r\n    return this.get<Partial<WFTriggerDetail>>(url, {\r\n      wfosId: stateId,\r\n      wfoId: stageId,\r\n    });\r\n  }\r\n\r\n  private _getStageState<T>(wfId: string, condLevel: WF.ConditionLevel) {\r\n    const url = `${this.#baseurl}/getStageStateByWFID`;\r\n    return this.get<{ Data: T[] }>(url, { wfId, condLevel }).pipe(\r\n      map((res) => res?.Data || [])\r\n    );\r\n  }\r\n\r\n  private _getConditionAreaControls<T>(\r\n    bmId: string,\r\n    bmogName: string,\r\n    conditionArea: WF.ConditionArea\r\n  ) {\r\n    const url = `${this.#baseurl}/getWFConditionAreaControls`;\r\n    return this.get<{ data: T[] }>(url, { bmId, bmogName, conditionArea }).pipe(\r\n      map((res) => res.data || [])\r\n    );\r\n  }\r\n\r\n  getDmoByProcessName(procNM: string): Observable<any> {\r\n    return this.get<any>(`${this.#baseurl}/getdmobyprocessname`, { procNM });\r\n  }\r\n\r\n  getTriggersByProcessName(procNM: string): Observable<any> {\r\n    return this.get<any>(`${this.#baseurl}/gettrgbyprocessname`, { procNM });\r\n  }\r\n\r\n  GetWFAppList() {\r\n    return this.get<any>(`${this.#baseurl}/GetWFProcessList`);\r\n  }\r\n\r\n  insertlegaldmotrgmapping(payload: any, procID: string, trgID: string) {\r\n    const url = `${this.#baseurl}/insertlegaldmotrgmapping`;\r\n    return this.post<WFSaveResponse>(url, payload, { procID, trgID });\r\n  }\r\n\r\n  getlegalmappeddmo(typeid: any, legalprocessNM: string, trgID: string) {\r\n    const url = `${this.#baseurl}/getlegalmappeddmo`;\r\n    return this.get<any>(url, { typeid, legalprocessNM, trgID });\r\n  }\r\n\r\n  getlegalmappedtrigger(\r\n    typeid: any,\r\n    wfID: string,\r\n    legalprocessNM: string,\r\n    trgID: string\r\n  ) {\r\n    const url = `${this.#baseurl}/getlegalmappedtrigger`;\r\n    return this.get<any>(url, { typeid, wfID, legalprocessNM, trgID });\r\n  }\r\n\r\n  getLegalTemplate(DocumentId: string) {\r\n    return this.get(`${this.#baseurl}/getlegaltemplate`, { DocumentId });\r\n  }\r\n}\r\n\r\nexport interface WFSaveResponse {\r\n  code: number;\r\n  message: string;\r\n  result: WFSaveResponseResult;\r\n  statuscode: number;\r\n}\r\n\r\ntype ResultId = 'WfoId' | 'WfosId' | 'TriggerId' | 'ConditionId';\r\ntype WFSaveResponseResult = {\r\n  Guid?: string;\r\n  SubProcessName?: string;\r\n  SubProcessWFVersionNo?: string;\r\n} & {\r\n  [key in ResultId]?: string;\r\n} & {\r\n  TrgConditions?: { [key: string]: Partial<TriggerCondition> };\r\n};\r\n", "import { KeyValue, NgIf, NgFor, AsyncPipe, SlicePipe } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { AbstractControl, UntypedFormBuilder, UntypedFormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { ObjectControl } from '@app/admin/data-modeler/classes';\r\nimport { ListColumnType, ListConfig } from '@app/admin/lib/list/list-config.model';\r\nimport { WorkflowApiService } from '@app/admin/wf/wfd/services/workflow-api.service';\r\nimport { arrayToList, enumToList, primitiveArrayToList, toFormArray } from '@app/admin/wf/wfd/util/helpers';\r\nimport { WF } from '@lib/models';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { combineLatest, Observable, of, timer } from 'rxjs';\r\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\r\nimport { ObjectControlComponent } from '../../../../lib/object-control/object-control.component';\r\nimport { AssociationComponent } from '../../../../lib/association/association.component';\r\n\r\n@Component({\r\n    selector: 'app-wf-condition-detail',\r\n    templateUrl: './wf-condition-detail.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    standalone: true,\r\n    imports: [\r\n        NgIf,\r\n        ReactiveFormsModule,\r\n        NgFor,\r\n        ObjectControlComponent,\r\n        AssociationComponent,\r\n        AsyncPipe,\r\n        SlicePipe,\r\n    ],\r\n})\r\nexport class WfConditionDetailComponent implements OnInit {\r\n  @Input() wfId: string;\r\n  @Input() version: string;\r\n  @Input() data: WF.ConditionDetail | null;\r\n\r\n  @Input() set bmList(list: WF.BMInfo[]) {\r\n    this.#list = arrayToList(list, 'BMID', 'BMNAME');\r\n  }\r\n\r\n  formSubmitted = false;\r\n\r\n  #list: KeyValue<string, string>[] = [];\r\n  readonly #status = enumToList(WF.Status);\r\n  readonly #areas: KeyValue<WF.ConditionArea, string>[] = [\r\n    { key: 'BusinessModelObject', value: 'Section' },\r\n    { key: 'DataModelGroup', value: 'Card' },\r\n    { key: 'DataModelObject', value: 'Data Model Object' },\r\n    { key: 'Trigger', value: 'Trigger' },\r\n  ];\r\n\r\n  readonly form = this.fb.group({\r\n    Name: [null, [Validators.required]],\r\n    Version: [null, Validators.required],\r\n    Description: [null],\r\n    Status: [this.#status[1], [Validators.required]],\r\n    BMID: [null, [Validators.required]],\r\n    BMOGNAM: [null, [Validators.required]],\r\n    CondLevel: this.fb.group(\r\n      {\r\n        ConditionLevel: [null, [Validators.required]],\r\n        StageStateGuids: [[]],\r\n      },\r\n      { validators: [selectedGuidValidator('ConditionLevel', 'StageStateGuids')] }\r\n    ),\r\n    Filter: this.fb.array([]),\r\n    Area: this.fb.group(\r\n      {\r\n        ConditionArea: [null, Validators.required],\r\n        BmObjectGuids: [null],\r\n      },\r\n      { validators: [selectedGuidValidator('ConditionArea', 'BmObjectGuids')] }\r\n    ),\r\n    Visible: [WF.ActionState.NA],\r\n    Mandatory: [WF.ActionState.No],\r\n    Enabled: [WF.ActionState.Yes],\r\n    WFID: [null],\r\n  });\r\n\r\n  readonly f = this.form.controls;\r\n  readonly #bmControl = this.f.BMID;\r\n  readonly #bmogControl = this.f.BMOGNAM;\r\n  readonly #levelControl = this.f.CondLevel.get('ConditionLevel');\r\n  readonly #areaControl = this.f.Area.get('ConditionArea');\r\n\r\n  controls: ObjectControl<WF.ConditionDetail>[] = [];\r\n\r\n  readonly checkByKey = 'selected';\r\n\r\n  #selectedStates: WF.StateInfo[] = [];\r\n  #selectedStages: WF.StageInfo[] = [];\r\n  #selectedBmos: WF.BMOInfo[] = [];\r\n  #selectedDmogs: WF.DMOGInfo[] = [];\r\n  #selectedDmos: WF.DMOInfo[] = [];\r\n  #selectedTriggers: WF.TriggerInfo[] = [];\r\n\r\n  #selectedAreas = [];\r\n  #selectedLevels = [];\r\n\r\n  levelAssociations$: Observable<WF.StageInfo[][]>;\r\n  areaAssociations$: Observable<WF.BMOInfo[][]>;\r\n\r\n  readonly #filterConfig: ListConfig<WF.ConditionFilter> = {\r\n    columns: [\r\n      { key: 'DmoName', displayValue: 'Data Model Object Name', type: ListColumnType.Dropdown, validators: [Validators.required] },\r\n      { key: 'ConditionExpression', displayValue: 'Expression', type: ListColumnType.Dropdown, validators: [Validators.required] },\r\n      { key: 'ComparisonValue', displayValue: 'Comparison Value', validators: [Validators.required] },\r\n      { key: 'Operator', displayValue: 'Logical Operator', type: ListColumnType.Dropdown, validators: [Validators.required] },\r\n    ],\r\n    checkbox: true,\r\n    actions: {\r\n      add: true,\r\n      delete: true,\r\n      edit: true,\r\n    },\r\n    defaultValues: {\r\n      ConditionExpression: primitiveArrayToList(['equal', 'not equal']),\r\n      Operator: primitiveArrayToList(['OR', 'AND']),\r\n      DmoName: this.controlChange(this.#bmControl).pipe(\r\n        map((_) => this.#bmControl.value),\r\n        switchMap((v) => (v ? this.wfApi.getDmosByBM(v?.key || v) : of([]))),\r\n        map(list => list.map(dmo => ({\r\n          key: dmo.GlobalID,\r\n          value: dmo.DispName,\r\n          parent: dmo.GroupName,\r\n        })))\r\n      ),\r\n    },\r\n  };\r\n\r\n  constructor(private readonly wfApi: WorkflowApiService, private readonly fb: UntypedFormBuilder, public readonly ref: NgbActiveModal) {}\r\n\r\n  uniqueWithGUID = (item: WF.StateInfo) => item.GUID;\r\n  displayLevelWith = (item: WF.StateInfo | WF.StageInfo) => item['States'] || item['WFOSNAM'];\r\n  displayAreaWith = (item: WF.BMOInfo | WF.TriggerInfo) => item['BMONAME'] || item['WFONAME'];\r\n\r\n  onSelectedLevelGuids = (items: (WF.StateInfo | WF.StageInfo)[]) => {\r\n    this.#levelControl.value === 'State' ? (this.#selectedStates = items as WF.StateInfo[]) : (this.#selectedStages = items);\r\n    this.#selectedLevels = items;\r\n    this.f.CondLevel.get('StageStateGuids').patchValue(this.#selectedLevels);\r\n  };\r\n\r\n  onSelectedAreaGuids = (items: WF.BMOInfo[] | WF.TriggerInfo[]) => {\r\n    const area: WF.ConditionArea = this.#areaControl.value;\r\n    if (area === 'BusinessModelObject') {\r\n      this.#selectedBmos = items as WF.BMOInfo[];\r\n    } else if (area === 'DataModelGroup') {\r\n      this.#selectedDmogs = items as WF.DMOGInfo[];\r\n    } else if (area === 'DataModelObject') {\r\n      this.#selectedDmos = items as WF.DMOInfo[];\r\n    } else if (area === 'Trigger') {\r\n      this.#selectedTriggers = items as WF.TriggerInfo[];\r\n    }\r\n    this.#selectedAreas = items;\r\n    this.f.Area.get('BmObjectGuids').patchValue(this.#selectedAreas);\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    this.initSelectedLevels();\r\n    this.initSelectedAreas();\r\n    this.initForm();\r\n    this.initControls();\r\n    this.levelAssociations$ = this.#getLevelAssociations$();\r\n    this.areaAssociations$ = this.#getAreaAssociations$();\r\n  }\r\n\r\n  private async initForm() {\r\n    const toPatch = {\r\n      Name: this.data?.Name,\r\n      Version: this.data?.Version || this.version,\r\n      Description: this.data?.Description,\r\n      Status: this.#status.find((s) => s.key === this.data?.Status) || this.#status[1],\r\n      BMID: this.#list.find((bm) => bm.key === this.data?.BMID) || null,\r\n      BMOGNAM: this.data?.BMOGNAM,\r\n      CondLevel: {\r\n        ConditionLevel: this.data?.CondLevel?.ConditionLevel,\r\n        StageStateGuids: this.#selectedLevels,\r\n      },\r\n      Area: {\r\n        ConditionArea: this.data?.Area?.ConditionArea,\r\n        BmObjectGuids: this.#selectedAreas,\r\n      },\r\n      Visible: this.data?.Visible || WF.ActionState.NA,\r\n      Mandatory: this.data?.Mandatory || WF.ActionState.No,\r\n      Enabled: this.data?.Enabled || WF.ActionState.Yes,\r\n      WFID: this.wfId,\r\n    };\r\n    this.form.patchValue(toPatch);\r\n    this.f.Filter = toFormArray(this.data?.Filter, { addCheckbox: this.#filterConfig.checkbox, required: true });\r\n  }\r\n\r\n  private initControls() {\r\n    this.controls = [\r\n      new ObjectControl({ label: 'Condition Name', name: 'Name', required: true, readonly: !!this.data }),\r\n      new ObjectControl({ name: 'Version', readonly: true }),\r\n      new ObjectControl({ name: 'Status', type: 'dropdown', required: true, options: of(this.#status) }),\r\n      new ObjectControl({\r\n        name: 'BMID',\r\n        label: 'Business Model',\r\n        required: true,\r\n        readonly: !!this.data,\r\n        type: 'dropdown',\r\n        options: of(this.#list),\r\n      }),\r\n      new ObjectControl({\r\n        name: 'BMOGNAM',\r\n        label: 'View',\r\n        required: true,\r\n        type: 'dropdown',\r\n        options: this.#getBmogs(),\r\n        show: this.controlChange(this.#bmControl),\r\n      }),\r\n      new ObjectControl({ name: 'Description', label: 'Long Description', type: 'textarea' }),\r\n      new ObjectControl({\r\n        name: 'ConditionLevel' as any,\r\n        label: 'Condition Level',\r\n        class: 'span-12',\r\n        type: 'radio',\r\n        required: true,\r\n        group: this.form.get('CondLevel'),\r\n        options: of(['Stage', 'State']),\r\n      }),\r\n      new ObjectControl({ name: 'Filter', label: 'Filters', type: 'list', config: this.#filterConfig, class: 'span-12' }),\r\n      new ObjectControl({\r\n        name: 'ConditionArea' as any,\r\n        label: 'Condition Area',\r\n        required: true,\r\n        type: 'radio',\r\n        options: of(this.#areas),\r\n        class: 'span-12',\r\n        group: this.form.get('Area'),\r\n        show: this.controlChange(this.#bmogControl),\r\n      }),\r\n      new ObjectControl({ name: 'Enabled', type: 'radio', options: of(enumToList(WF.ActionState)), class: 'span-4' }),\r\n      new ObjectControl({ name: 'Mandatory', type: 'radio', options: of(enumToList(WF.ActionState)), class: 'span-4' }),\r\n      new ObjectControl({ name: 'Visible', type: 'radio', options: of(enumToList(WF.ActionState)), class: 'span-4' }),\r\n    ];\r\n  }\r\n\r\n  private initSelectedLevels() {\r\n    const guids = this.data?.CondLevel?.StageStateGuids?.split(',') || [];\r\n    this.#selectedLevels = guids.map((guid) => ({ GUID: guid }));\r\n    if (this.data?.CondLevel?.ConditionLevel === 'Stage') {\r\n      this.#selectedStages = this.#selectedLevels;\r\n    } else {\r\n      this.#selectedStates = this.#selectedLevels;\r\n    }\r\n  }\r\n\r\n  private initSelectedAreas() {\r\n    const guids = this.data?.Area?.BmObjectGuids?.split(',') || [];\r\n    const area = this.data?.Area?.ConditionArea;\r\n    this.#selectedAreas = guids.map((guid) => ({ GUID: guid }));\r\n    this.#selectedBmos = [];\r\n    this.#selectedDmogs = [];\r\n    this.#selectedDmos = [];\r\n    this.#selectedTriggers = [];\r\n    if (area === 'BusinessModelObject') {\r\n      this.#selectedBmos = this.#selectedAreas;\r\n    } else if (area === 'DataModelGroup') {\r\n      this.#selectedDmogs = this.#selectedAreas;\r\n    } else if (area === 'DataModelObject') {\r\n      this.#selectedDmos = this.#selectedAreas;\r\n    } else if (area === 'Trigger') {\r\n      this.#selectedTriggers = this.#selectedAreas;\r\n    }\r\n  }\r\n\r\n  #getBmogs = () =>\r\n    timer(1).pipe(\r\n      switchMap((_) => this.controlChange(this.#bmControl)),\r\n      tap((v) => !v && this.#bmogControl.setValue(null)),\r\n      switchMap((v) => (v ? this.wfApi.getBMOGsByBMId(v?.key || v) : of([]))),\r\n      map((list) => arrayToList(list, 'BMOGID', 'BMOGNAME'))\r\n    );\r\n\r\n  #getLevelAssociations$ = () => {\r\n    const stages$ = this.wfApi.getStageList(this.wfId).pipe(map((res) => this.#configureAssociations(res, this.#selectedStages)));\r\n    const states$ = this.wfApi.getStateList(this.wfId).pipe(map((res) => this.#configureAssociations(res, this.#selectedStates)));\r\n\r\n    return this.controlChange(this.#levelControl).pipe(\r\n      filter((v) => !!v),\r\n      switchMap((level: WF.ConditionLevel) => (level === 'Stage' ? stages$ : states$)),\r\n      tap((_) => {\r\n        if (this.#levelControl.value === 'Stage') {\r\n          this.#selectedLevels = this.#selectedStages;\r\n        } else {\r\n          this.#selectedLevels = this.#selectedStates;\r\n        }\r\n        this.#levelControl.parent.get('StageStateGuids').patchValue(this.#selectedLevels);\r\n      })\r\n    );\r\n  };\r\n\r\n  #getAreaAssociations$ = () => {\r\n    const updateAreaGuids = <T extends { GUID: string }>(selectedAreas: T[]) => {\r\n      this.#selectedAreas = selectedAreas;\r\n      this.#areaControl.parent.get('BmObjectGuids').patchValue(this.#selectedAreas);\r\n    };\r\n    const handleArea = (bmId: string, bmogName: string, area: WF.ConditionArea) => {\r\n      switch (area) {\r\n        case 'BusinessModelObject':\r\n          return this.wfApi.getBmoList(bmId, bmogName).pipe(\r\n            map((res) => this.#configureAssociations(res, this.#selectedBmos)),\r\n            tap((_) => updateAreaGuids(this.#selectedBmos))\r\n          );\r\n        case 'DataModelGroup':\r\n          return this.wfApi.getDmogList(bmId, bmogName).pipe(\r\n            map((res) => this.#configureAssociations(res, this.#selectedDmogs)),\r\n            tap((_) => updateAreaGuids(this.#selectedDmogs))\r\n          );\r\n        case 'DataModelObject':\r\n          return this.wfApi.getDmoList(bmId, bmogName).pipe(\r\n            map((res) => this.#configureAssociations(res, this.#selectedDmos)),\r\n            tap((_) => updateAreaGuids(this.#selectedDmos))\r\n          );\r\n        case 'Trigger':\r\n          return this.wfApi.getTriggerList(bmId, bmogName).pipe(\r\n            map((res) => this.#configureAssociations(res, this.#selectedTriggers)),\r\n            tap((_) => updateAreaGuids(this.#selectedTriggers))\r\n          );\r\n        default:\r\n          return of([]);\r\n      }\r\n    };\r\n    const stream$ = combineLatest([\r\n      this.controlChange(this.#bmControl).pipe(map((v) => v?.key || v)),\r\n      this.controlChange(this.#bmogControl).pipe(map((v) => v?.value || v)),\r\n      this.controlChange(this.#areaControl),\r\n    ]);\r\n    return stream$.pipe(\r\n      switchMap(([bmId, bmogName, area]) => {\r\n        if (bmId && bmogName && area) {\r\n          return handleArea(bmId, bmogName, area);\r\n        }\r\n        this.initSelectedAreas();\r\n        this.f.Area.get('BmObjectGuids').reset();\r\n        return of(null);\r\n      })\r\n    );\r\n  };\r\n\r\n  #configureAssociations = <T extends { GUID: string }>(all: T[], selected: T[]) => {\r\n    const updatedAll = all.map((item) => {\r\n      const selectedIndex = selected.findIndex((s) => s.GUID === item.GUID);\r\n      if (selectedIndex > -1) {\r\n        item[this.checkByKey] = true;\r\n        selected[selectedIndex] = item;\r\n      }\r\n      return item;\r\n    });\r\n    return [updatedAll, selected];\r\n  };\r\n\r\n  private controlChange(control: AbstractControl) {\r\n    return control.valueChanges.pipe(startWith(control.value));\r\n  }\r\n\r\n  onSubmit() {\r\n    this.formSubmitted = true;\r\n    if (!this.form.valid) {\r\n      return;\r\n    }\r\n    const v = this.form.value;\r\n    const payload: WF.ConditionDetail = {\r\n      ...v,\r\n      Area: {\r\n        ...v.Area,\r\n        BmObjectGuids: this.#selectedAreas.map((a) => a.GUID).toString(),\r\n      },\r\n      BMID: v.BMID?.key || v.BMID,\r\n      BMOGNAM: v.BMOGNAM?.value || v.BMOGNAM,\r\n      CondID: this.data?.CondID || '',\r\n      CondLevel: {\r\n        ...v.CondLevel,\r\n        StageStateGuids: this.#selectedLevels.map((l) => l.GUID).toString(),\r\n      },\r\n      Filter: this.f.Filter.value.map(f => ({\r\n        ...f,\r\n        ConditionExpression: f.ConditionExpression?.key || f.ConditionExpression,\r\n        DmoName: f.DmoName?.value || f.DmoName,\r\n        DmoId: f.DmoName?.key || f.DmoId,\r\n        Operator: f.Operator?.key || f.Operator,\r\n      })),\r\n      Status: v.Status?.key || v.Status,\r\n    };\r\n    this.ref.close(payload);\r\n  }\r\n}\r\n\r\nconst selectedGuidValidator = (radio: string, guids: string) => {\r\n  return (group: UntypedFormGroup) => {\r\n    const radioControl = group.get(radio);\r\n    const guidControl = group.get(guids);\r\n    const val = guidControl.value;\r\n    if (val && Array.isArray(val) && val.length) {\r\n      radioControl.setErrors(null);\r\n      return null;\r\n    }\r\n    radioControl.setErrors({ required: 'This is a required field' });\r\n  };\r\n};\r\n", "<div class=\"popup\">\r\n  <div class=\"popup__header\">\r\n    <h2 *ngIf=\"!data\">New Condition</h2>\r\n    <h2 *ngIf=\"data\">Condition Details</h2>\r\n    <span class=\"popup__close\"><i class=\"fas fa-times-circle fa-fw\" (click)=\"ref.close()\"></i></span>\r\n  </div>\r\n    \r\n  <form [formGroup]=\"form\" *ngIf=\"form\">\r\n    <div class=\"double-column mt-3\">\r\n      <ng-container *ngFor=\"let control of controls | slice: 0 : 7\">\r\n        <app-object-control [parentForm]=\"form\" [submitted]=\"formSubmitted\" [config]=\"control\" *ngIf=\"control.show | async\"></app-object-control>\r\n      </ng-container>\r\n  \r\n      <ng-container *ngIf=\"levelAssociations$ | async as associations\">\r\n        <app-association\r\n          class=\"span-12\"\r\n          [checkBy]=\"checkByKey\"\r\n          [uniqueWith]=\"uniqueWithGUID\"\r\n          [displayWith]=\"displayLevelWith\"\r\n          [items]=\"associations[0]\"\r\n          [associatedItems]=\"associations[1]\"\r\n          (select)=\"onSelectedLevelGuids($event)\">\r\n        </app-association>\r\n      </ng-container>\r\n      \r\n      <ng-container *ngFor=\"let control of controls | slice: 7 : 9\">\r\n        <app-object-control [parentForm]=\"form\" [submitted]=\"formSubmitted\" [config]=\"control\" *ngIf=\"control.show | async\"></app-object-control>\r\n      </ng-container>\r\n  \r\n      <ng-container *ngIf=\"areaAssociations$ | async as associations\">\r\n        <app-association\r\n          class=\"span-12\"\r\n          [checkBy]=\"checkByKey\"\r\n          [uniqueWith]=\"uniqueWithGUID\"\r\n          [displayWith]=\"displayAreaWith\"\r\n          [items]=\"associations[0]\"\r\n          [associatedItems]=\"associations[1]\"\r\n          (select)=\"onSelectedAreaGuids($event)\">\r\n        </app-association>\r\n      </ng-container>\r\n  \r\n      <ng-container *ngFor=\"let control of controls | slice: 9 : controls.length\">\r\n        <app-object-control [parentForm]=\"form\" [submitted]=\"formSubmitted\" [config]=\"control\" *ngIf=\"control.show | async\"></app-object-control>\r\n      </ng-container>\r\n      \r\n    </div>\r\n    \r\n    \r\n    <div class=\"popup__actions\">\r\n      <button class=\"btn btn-light btn-sm\" type=\"button\" (click)=\"ref.close()\">Cancel</button>\r\n      <button class=\"btn btn-primary btn-sm\" type=\"submit\" (click)=\"onSubmit()\">\r\n        <ng-container *ngIf=\"!data\">Create</ng-container>\r\n        <ng-container *ngIf=\"data\">Update</ng-container>\r\n      </button>\r\n    </div>\r\n  </form>\r\n  \r\n</div>", "import { OnInit, ElementRef, Directive } from '@angular/core';\r\nimport { Condition, FilterType, GridFilter, IGridData, IGridFilter } from '@app/core';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { formatDate } from '@angular/common';\r\nimport { environment } from '@env/environment';\r\nimport { unionBy } from 'lodash';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs';\r\n//import { BaseGrid } from '@app/shared';\r\n\r\n@Directive()\r\nexport abstract class BaseGrid implements OnInit, IGridData {\r\n    public recordsCountLoading = false;\r\n    public recordsCount = -1;\r\n    private readonly dateTimeTypes: ReadonlyArray<string> = ['DateEditBox', 'DateWithCalendar', 'CreatedDate', 'LastUpdatedDate', 'StaticDateBox', 'CreatedDateTime', 'LastUpdatedDateTime', 'DateTimeZone', 'CRTDON', 'MODFON','DateTimeBox'];\r\n    private readonly specialConditions: ReadonlyArray<Condition> = ['NULL', 'NOT_NULL'];\r\n    SelectedRecordIds: Array<string> = [];\r\n    ProcessName: string;\r\n    GridGuid: string;\r\n    ViewName: string;\r\n    PageSize: string;\r\n    TimeZone: string;\r\n    ShowSelectAll: any;\r\n    PageCount: any;\r\n    SortColumn = '-1';\r\n    SortOrder = '-1';\r\n    PageNumber: string;\r\n    ColumnList: string;\r\n    LstGridFilter: IGridFilter[];\r\n    showActionCol = false;\r\n    gridConfigData: any;\r\n    columns: any = [];\r\n    dataAdapter: any;\r\n    filters: any = {};\r\n    _bodyData: any = {};\r\n    hideFooter = false;\r\n    FilterCondition: {};\r\n    showItemLoading = false;\r\n    selectedAll = false;\r\n    selectedAll$ = new BehaviorSubject<boolean>(false);\r\n    keyColumn = 'TRNSCTNID';\r\n    gridConfig = {};\r\n    TableInfo: any = {\r\n        PageNumber: -1,\r\n        PageSize: -1,\r\n        Recordes: -1,\r\n        PageCount: -1\r\n    };\r\n    sortColumnName = '-1';\r\n    isDefaultView = false;\r\n    activeStateFilter = [];\r\n    StateFilter: any[];\r\n    StageFilter: any[];\r\n    selectedDmoFilter = { All: 'All' };\r\n    selectedCustomFilter = 'Custom Filter(s)';\r\n    selectedAllMyRecordFilter = 'All Record';\r\n    colSpan = 0;\r\n    viewList = [];\r\n    public DMOField: any[] = [];\r\n    public DMOData: any = {};\r\n    public CustomFilter = {};\r\n    transactionId: string;\r\n    public ColumnData: any = {};\r\n    public ColumnDataSource: any = {};\r\n    submitted = false;\r\n    model: any = {};\r\n    // Column dragable\r\n    pageX: any;\r\n    curCol: any;\r\n    nxtCol: any;\r\n    curColWidth: any;\r\n    nxtColWidth: any;\r\n    HasGlobalSearch = true;\r\n    IsSubProcess = false;\r\n    ParentTransactionId: string;\r\n    HideDeleteActionIcon = false;\r\n    HideDisplayName = false;\r\n    ShowBulkUpdateButton = false;\r\n    ChildCustomfilters: any = {};\r\n    ParentDmoValue: string;\r\n    ChildDmoGuid: {};\r\n    readonly dateFormat = environment.Setting.dateFormat;\r\n    readonly dateTimeFormat = environment.Setting.dateTimeFormat;\r\n    readonly dateTimeFormat2 = environment.Setting.dateTimeFormat2;\r\n    calender = ['DateEditBox', 'DateWithCalendar', 'StaticDateBox'];\r\n    readonly systemDateTime = ['CRTDON', 'MODFON']\r\n    currencyDmos = [\r\n       \r\n    ];\r\n    percentDmos = [\r\n       \r\n    ];\r\n    colorCode = ['ColorCodeStatus'];\r\n    textBox = ['TextBox', 'UrlTextBox', 'PhoneTextBox', 'EmailEditBox'];\r\n    dropDown = ['DropDownList', 'CountryList', 'USAStateList'];\r\n    dropDownWithCheckbox = ['CheckBoxList', 'RadioButtonList', 'MultiSelectDropDownList', 'ListBox'];\r\n    roleType = ['RoleType'];\r\n    newRow: any = {};\r\n    dmoMapping: any = {};\r\n    CanAddNewRow = false;\r\n    TriggerName = '';\r\n    // canInlineEdit = false;\r\n    UrlProcessName: string;\r\n    // Metrics for Lot summary data grid\r\n    metricsData = {};\r\n    IsViewAllow = false;\r\n    IsActivityLogAllow: false\r\n    IsBulkTriggerAllow = false;\r\n    IsBulkUpdateAllow = false;\r\n    IsBulkUploadAllow = false;\r\n    IsChangeLogAllow = false;\r\n    IsCopyAllow = false;\r\n    IsDeletionAllow = false;\r\n    IsExcelAllow = false;\r\n    IsNewEntryAllow = false;\r\n    IsInLnEditAllow = false;\r\n    IsNotesAllow = false;\r\n    IsNotificationAllow = false;\r\n    IsPDFAllow = false;\r\n    // for link column\r\n    DmoColumnName: string;\r\n    IsOtherAPICall = false;\r\n    tableDataOther: any = [];\r\n    datemodel;\r\n    isFinilised = false;\r\n    elRef: ElementRef;\r\n    IsDrillDown = false;\r\n    IsBulkRevertAllow=false;\r\n    IsAssociateProgramAllowed=false;\r\n    IsAssignMarkupAllowed=false;\r\n    IsBulkAssociateProducts=false;\r\n    IsBulkAssociateProgram=false;\r\n    IsUpdateProductPriceAllowed=false;\r\n\r\n    \r\n    constructor(elRef: ElementRef,) {\r\n        this.elRef = elRef;\r\n\r\n    \r\n    }\r\n    protected currentResponse = null;\r\n    tableData: any = [];\r\n    cachedData: any = [];\r\n\r\n    arrayOne(n: number = 0): any[] {\r\n        if (n > 0) {\r\n            return Array(n);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    dropdownList = [];\r\n    selectedItems = [];\r\n    // dropdownSettings: IDropdownSettings = {\r\n    //     singleSelection: false,\r\n    //     // selectAllText: 'Select All',\r\n    //     // unSelectAllText: 'UnSelect All',\r\n    //     itemsShowLimit: 3,\r\n    //     allowSearchFilter: true,\r\n    //     enableCheckAll: false,\r\n    // };\r\n\r\n    editForm: FormGroup;\r\n    dmos: any;\r\n    IsResizing: boolean = false;\r\n\r\n    filterForms: any = {};\r\n\r\n    ngOnInit() {\r\n        this.callOnInit();\r\n        \r\n        this._bodyData = {\r\n            ProcessName: this.ProcessName,\r\n            PageSize: this.PageSize,\r\n            PageNumber: +this.PageNumber,\r\n            SortColumn: this.SortColumn,\r\n            SortOrder: this.SortOrder,\r\n            TimeZone: this.TimeZone,\r\n            ColumnList: this.ColumnList,\r\n            GridFilters: this.LstGridFilter\r\n        };\r\n        if (this.IsSubProcess) {\r\n            this._bodyData.ParentTransactionId = decodeURIComponent(this.ParentTransactionId);\r\n        }\r\n        if (this.ProcessName === '' || this.ProcessName === 'commissionadjustment') {\r\n            this.openLinkFromUrl();\r\n        } else {\r\n            this.getGridConfigData();\r\n        }\r\n        const el = this.elRef.nativeElement.querySelector('#tableHeadRow');\r\n\r\n        window.addEventListener('mouseup', (event: any) => { this.mouseUp(event); });\r\n        el.addEventListener('mousemove', (event: any) => { this.mouseMove(event); });\r\n        el.addEventListener('mousedown', (event: any) => { this.mouseDown(event); });\r\n    }\r\n\r\n\r\n    public setPagination(data: any) {\r\n        this.TableInfo.PageSize = this._bodyData.PageSize;\r\n        this.TableInfo.Recordes = this.recordsCount > -1 ? this.recordsCount : +data.RecordsCount;\r\n        this.TableInfo.PageNumber = parseInt(data.PageNumber, 10) + 1;\r\n        this.TableInfo.PageCount = Math.ceil(parseInt(this.TableInfo.Recordes, 10) / parseInt(this._bodyData.PageSize, 10));\r\n        this.TableInfo.Start = ((parseInt(data.PageNumber, 10) <= 0 ? 0 : (parseInt(data.PageNumber, 10))) * this._bodyData.PageSize) + 1;\r\n        this.TableInfo.End = ((this.TableInfo.PageNumber) * this._bodyData.PageSize) > this.TableInfo.Recordes \r\n            ? this.TableInfo.Recordes \r\n            : ((this.TableInfo.PageNumber) * this._bodyData.PageSize);\r\n    }\r\n\r\n    onPageChange(action) {\r\n        if (action === 'prev') {\r\n            this._bodyData.PageNumber = (+this._bodyData.PageNumber - 1) > -1 ? (+this._bodyData.PageNumber - 1) :\r\n                this.TableInfo.PageCount - 1;\r\n        } else if (action === 'next') {\r\n            this._bodyData.PageNumber = (+this._bodyData.PageNumber + 1) < this.TableInfo.PageCount ?\r\n                (+this._bodyData.PageNumber + 1) : 0;\r\n        }\r\n        this.getGridData();\r\n\r\n    }\r\n    sortDefault() {\r\n        this.onSort(this.SortColumn, this.SortOrder);\r\n    }\r\n    sortColumn(columnName: string) {\r\n        let sortOrder = 'asc';\r\n        if (this._bodyData.SortColumn === columnName && this._bodyData.SortOrder === 'asc') {\r\n            sortOrder = 'desc';\r\n        }\r\n        this.onSort(columnName, sortOrder);\r\n    }\r\n    isEmptyObject(obj: any): boolean {\r\n        return Object.keys(obj).length > 0 ? false : true;\r\n    }\r\n    onSort(columnName, order) {\r\n        const htmlObj = this.elRef.nativeElement.querySelector('.grid-filter-wrap .show');\r\n        if (htmlObj) { htmlObj.classList.toggle('show'); }\r\n        if (columnName && order) {\r\n            this._bodyData.SortColumn = columnName;\r\n            this.sortColumnName = this.gridConfigData.Columns[columnName].DisplayName;\r\n            this._bodyData.SortOrder = order;\r\n        } else {\r\n            this._bodyData.SortColumn = this.SortColumn;\r\n            this._bodyData.SortOrder = this.SortOrder;\r\n        }\r\n        this.getGridData();\r\n        sessionStorage.setItem(this.ProcessName + 'gridsort', JSON.stringify({\r\n            column: this._bodyData.SortColumn,\r\n            displayName: this.sortColumnName,\r\n            order: this._bodyData.SortOrder\r\n        }));\r\n    }\r\n\r\n    onFilter(form, columnName, filterType, value, dataType = undefined) { \r\n        this.submitted = true;\r\n        let filter: any = {};\r\n        this._bodyData.PageNumber = 0;\r\n        if (filterType === 'Global_Search') {\r\n            if (form.globalSearch.value === '') {\r\n                delete this.filters[filterType + '~$~' + columnName];\r\n            } else {\r\n                filter = {\r\n                    GridConditions: [{\r\n                        Condition: 'CONTAINS',\r\n                        ConditionValue: form.globalSearch.value\r\n                    }\r\n                    ],\r\n                    DataField: columnName,\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: filterType\r\n                };\r\n            }\r\n            // columnName = filterType;\r\n        } else if (filterType === 'DMO_Filter') {\r\n            if(dataType === 'MultiSelectDropDownList'){\r\n                filter = {\r\n                    DataField: `${columnName}_val`,\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: 'DMO_Filter',\r\n                    //DataType: dataType,\r\n                    GridConditions: [\r\n                        {Condition: 'CONTAINS', ConditionValue: value}\r\n                    ]\r\n                }\r\n            } \r\n            else if(dataType === 'KeyValueSearchBox'){\r\n                filter = {\r\n                    GridConditions: [{\r\n                        Condition: 'CONTAINS',\r\n                        ConditionValue: value.indexOf('(') > -1 ? value.split('(')[0].replace(')', '').trim() : value\r\n                    }\r\n                    ],\r\n                    DataField: columnName+'_val',\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: 'DMO_Filter',\r\n                    DataType: 'KeyValueSearchBox'\r\n                },\r\n                this.selectedDmoFilter[columnName] = value;\r\n            } \r\n            else {\r\n                if (value === 'All') {\r\n                    delete this.filters[filterType + '~$~' + columnName.GUID];\r\n                    this.selectedDmoFilter = { All: 'All' };\r\n                } else {\r\n                    filter = {\r\n                        GridConditions: [{\r\n                            Condition: 'CONTAINS',\r\n                            ConditionValue: value\r\n                        }\r\n                        ],\r\n                        DataField: columnName,\r\n                        LogicalOperator: 'Or',\r\n                        FilterType: 'DMO_Filter'\r\n                    };\r\n                    this.selectedDmoFilter[columnName] = value;\r\n                }\r\n            }\r\n        } else if (filterType === 'State_Filter') {\r\n            if (columnName === 'All') {\r\n                for (const item of form) {\r\n                    delete this.filters[filterType + '~$~' + item];\r\n                }\r\n                this.activeStateFilter = [];\r\n            } else if (this.activeStateFilter.indexOf(columnName) > -1) {\r\n                this.activeStateFilter.splice(this.activeStateFilter.indexOf(columnName), 1);\r\n                delete this.filters[filterType + '~$~' + columnName];\r\n            } else {\r\n                filter = {\r\n                    GridConditions: [{\r\n                        Condition: 'EQUAL',\r\n                        ConditionValue: columnName\r\n                    }\r\n                    ],\r\n                    DataField: columnName,\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: 'State_Filter'\r\n                };\r\n                this.activeStateFilter.push(columnName);\r\n            }\r\n        } else if (filterType === 'Stage_Filter') {\r\n            if (columnName === 'All') {\r\n                for (const item of form) {\r\n                    if (filterType === 'Stage_Filter') {\r\n                        delete this.filters[filterType + '~$~' + item.GUID];\r\n                    } else {\r\n                        delete this.filters[filterType + '~$~' + item];\r\n                    }\r\n                }\r\n                this.activeStateFilter = [];\r\n            // } else if (this.activeStateFilter.length === this.StageFilter.length) {\r\n            //     for (const item of form) {\r\n            //         delete this.filters[filterType + '~$~' + item];\r\n            //     }\r\n            } else if (this.activeStateFilter.indexOf(columnName.DisplayName) > -1) {\r\n                this.activeStateFilter.splice(this.activeStateFilter.indexOf(columnName.DisplayName), 1);\r\n                const conditions = this.filters[filterType + '~$~' + columnName.GUID].GridConditions;\r\n                this.filters[filterType + '~$~' + columnName.GUID].GridConditions = conditions.filter(c => c.ConditionValue !== columnName.DisplayName);\r\n                if (this.filters[filterType + '~$~' + columnName.GUID].GridConditions.length === 0) {\r\n                    delete this.filters[filterType + '~$~' + columnName.GUID];\r\n                }\r\n            } else {\r\n                filter = {\r\n                    GridConditions: [{\r\n                        Condition: 'EQUAL',\r\n                        ConditionValue: columnName.DisplayName,\r\n                    }\r\n                    ],\r\n                    DataField: columnName.GUID,\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: 'Stage_Filter'\r\n                };\r\n                this.activeStateFilter.push(columnName.DisplayName);\r\n            }\r\n        } else if (filterType === 'Custom_Filter') {\r\n            if (value === 'Custom Filter(s)') {\r\n                delete this.filters[filterType + '~$~' + columnName];\r\n            } else {\r\n                filter = {\r\n                    GridConditions: [{\r\n                        ConditionValue: value\r\n                    }\r\n                    ],\r\n                    DataField: value,\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: 'Custom_Filter'\r\n                };\r\n            }\r\n            this.selectedCustomFilter = value;\r\n        } else if (filterType === 'Column_Filter') {\r\n            if (!this.validate(form, columnName)) {\r\n                return;\r\n            }\r\n\r\n\r\n            value = {};\r\n            value.submitted = true;\r\n            this.elRef.nativeElement.querySelector('.grid-filter-wrap .show').classList.toggle('show');            \r\n            if (dataType === 'CheckBoxList' || dataType === 'RadioButtonList' || dataType === 'DropDownList' || dataType === 'ColorCodeStatus') {\r\n                filter = {\r\n                    GridConditions: [\r\n                    ],\r\n                    DataField: columnName,\r\n                    FilterType: 'Column_Filter'\r\n                };\r\n            } else if (dataType === 'MultiSelectDropDownList') {\r\n                filter = {\r\n                    GridConditions: [\r\n                    ],\r\n                    DataField: `${columnName}_val`,\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: 'Column_Filter',\r\n                    DataType: dataType\r\n                };                \r\n            } else {\r\n                filter = {\r\n                    GridConditions: [\r\n                    ],\r\n                    DataField: columnName,\r\n                    LogicalOperator: form.logicalOpt.value,\r\n                    FilterType: 'Column_Filter'\r\n                };\r\n            }\r\n            const allInput = form.getElementsByTagName('input');\r\n            let hasCheck: boolean = false;\r\n\r\n            for (const input of allInput) {\r\n                if (input.type === 'checkbox' && input.checked === true) {\r\n                    if(input.value === 'EMPTY'){\r\n                        filter.GridConditions.push({\r\n                            Condition: 'NULL',\r\n                            ConditionValue: 'NULL'\r\n                        });\r\n                        filter.GridConditions.push({\r\n                            Condition: 'EMPTY',\r\n                            ConditionValue: 'EMPTY'\r\n                        });\r\n                    }else if(input.value === 'NOT_EMPTY'){\r\n                        filter.GridConditions.push({\r\n                            Condition: 'NOT_NULL',\r\n                            ConditionValue: 'NOT_NULL'\r\n                        });\r\n                        filter.GridConditions.push({\r\n                            Condition: 'NOT_EMPTY',\r\n                            ConditionValue: 'NOT_EMPTY'\r\n                        });\r\n                    }\r\n                    else{\r\n                        filter.GridConditions.push({\r\n                            Condition: 'CONTAINS',\r\n                            ConditionValue: input.value\r\n                        });\r\n                    }\r\n                    hasCheck = true;                  \r\n                }\r\n            }\r\n\r\n            if (!hasCheck) {\r\n                if (form.filterListValue && form.filterListValue.value !== '') {\r\n                    filter.GridConditions.push({\r\n                        Condition: 'CONTAINS',\r\n                        ConditionValue: form.filterListValue.value\r\n                    });\r\n                }\r\n            }\r\n        } else if (filterType === 'All_Filter') {\r\n            if (value === 'MyRecord') {\r\n                filter = {\r\n                    GridConditions: [{\r\n                        ConditionValue: 'My Record'\r\n                    }\r\n                    ],\r\n                    FilterType: value\r\n                };\r\n                this.selectedAllMyRecordFilter = 'My Record';\r\n            } else {\r\n                this.selectedAllMyRecordFilter = 'All Record';\r\n                delete this.filters[filterType + '~$~' + columnName];\r\n            }\r\n\r\n        } else if (filterType === 'CustomListFilter') {\r\n            if (this.selectedItems.length > 0) {\r\n                filter = {\r\n                    DataField: columnName,\r\n                    FilterType: 'Column_Filter',\r\n                    LogicalOperator: 'Or',\r\n                    GridConditions: [],\r\n                };\r\n                this.selectedItems.forEach(item => {\r\n                    filter.GridConditions.push({Condition: 'CONTAINS', ConditionValue: item.text})\r\n                });\r\n            } else {\r\n                this.onFilterClear(columnName, filterType);\r\n            }\r\n        }\r\n\r\n        const [cond1, val1]: [Condition, string] = [form?.ConditionOpt1?.value, form?.filterValue1?.value];\r\n        const [cond2, val2]: [Condition, string] = [form?.ConditionOpt2?.value, form?.filterValue2?.value];\r\n        const conditions1 = this.handleFilterConditions(cond1, val1, filterType, dataType);\r\n        const conditions2 = this.handleFilterConditions(cond2, val2, filterType, dataType);\r\n        filter?.GridConditions?.push(...conditions1, ...conditions2);\r\n        if (filterType === 'Column_Filter' && dataType === 'KeyValueSearchBox') {\r\n            const specialConditions: Condition[] = ['NULL', 'NOT_NULL'];\r\n            if (specialConditions.some(cond => [cond1, cond2].includes(cond))) {\r\n                filter.LogicalOperator = 'And';\r\n            }\r\n        }\r\n\r\n        if (filter && Object.keys(filter).length !== 0) {\r\n            if (filterType === 'Stage_Filter') {\r\n                // if (filter.GridConditions.find(c => c.ConditionValue === 'Open')) {\r\n                //     filter.GridConditions.push({Condition: 'Contains', ConditionValue: 'New'});\r\n                // }\r\n                if (this.filters[filterType + '~$~' + columnName.GUID]) {\r\n                    this.filters[filterType + '~$~' + columnName.GUID].GridConditions.push(...filter.GridConditions)\r\n                } else {\r\n                    this.filters[filterType + '~$~' + columnName.GUID] = filter;\r\n                }\r\n            } else if (filterType === 'DMO_Filter') {\r\n                if (dataType === 'MultiSelectDropDownList') {\r\n                    this.filters[`${filterType}~$~${columnName}_val`] = filter;\r\n                } else {\r\n                    this.filters[filterType + '~$~' + columnName] = filter;\r\n                }\r\n            } else if (filterType === 'Column_Filter' && dataType === 'KeyValueSearchBox') {\r\n                // const keyGuid = columnName + '_KEY';\r\n                // const keyFilter = {...filter};\r\n                // keyFilter.DataField = keyGuid;\r\n                const valGuid = columnName + '_VAL';\r\n                const valFilter = {...filter};\r\n                valFilter.DataField = valGuid;\r\n                this.filters[`${filterType}~$~${columnName}`] = filter;\r\n                // this.filters[`${filterType}~$~${keyGuid}`] = keyFilter;\r\n                this.filters[`${filterType}~$~${valGuid}`] = valFilter;\r\n            } else {\r\n                if (filter.GridConditions.length > 0)\r\n                    this.filters[filterType + '~$~' + columnName] = filter;\r\n            }\r\n        }\r\n        this.getGridData({recordsCountLoading: true});\r\n        sessionStorage.setItem(sessionStorage.getItem('processName') + 'gridFlters', JSON.stringify(this.filters));\r\n    }\r\n\r\n    private handleFilterConditions(cond: Condition, val: string, filterType: FilterType, dataType: string) {\r\n        const gridConditions = [];\r\n        if (this.specialConditions.includes(cond)) {\r\n            const emptyCondition = cond === 'NULL' ? 'EMPTY' : 'NOT_EMPTY';\r\n            if (filterType === 'Column_Filter' && dataType === 'KeyValueSearchBox') {\r\n                gridConditions.push(this.generateCondition(emptyCondition, emptyCondition, dataType));\r\n            } else {\r\n                gridConditions.push(this.generateCondition(cond, cond, dataType));\r\n                if (dataType && this.dateTimeTypes.indexOf(dataType) == -1) {\r\n                    gridConditions.push(this.generateCondition(emptyCondition, emptyCondition, dataType));\r\n                }\r\n            }\r\n        } else {\r\n            if (val) {\r\n                if (dataType && this.dateTimeTypes.indexOf(dataType) > -1) {\r\n                    const format = this.dateTimeTypes.includes(dataType) ? 'MM/dd/yyyy HH:mm:ss' : 'MM/dd/yyyy HH:mm:ss';\r\n                    val = this.convertToSystemDataAndTime(val, format, 0, cond, this.ProcessName !== 'NAG_Margin');\r\n                }\r\n                gridConditions.push(this.generateCondition(cond, val, dataType));\r\n\r\n            }\r\n        }\r\n        return gridConditions;\r\n    }\r\n\r\n    private generateCondition(condition: Condition, val: string, dataType: string) {\r\n        return {\r\n            Condition: condition,\r\n            ConditionValue: val,\r\n            dataType: dataType,\r\n            RowValue: val,\r\n        }\r\n    }\r\n\r\n    public showSelectedFilter(dmoGuid: string) {\r\n        return !dmoGuid.endsWith('_KEY') && !dmoGuid.endsWith('_VAL');\r\n    }\r\n\r\n\r\n    FilterList(itemValue): string {\r\n        const item = itemValue.GridConditions;\r\n        let dataType = item.map(e => e.dataType).join(',');\r\n        let displayText: string = '';\r\n        \r\n        if (dataType && (['Global_Search', 'CreatedDateTime', 'LastUpdatedDateTime', 'DateTimeZone', 'CRTDON', 'MODFON', 'DateTimeBox', 'DateEditBox', 'DateWithCalendar', 'CreatedDate', 'LastUpdatedDate', 'StaticDateBox'].indexOf(dataType) > -1)){\r\n          const conditions = item.map(e => e.RowValue).join(',');\r\n    \r\n          if (conditions === 'NOT_NULL') {\r\n            displayText = 'Not Null';\r\n          } else if(conditions === 'NULL') {\r\n            displayText = 'Null';\r\n          } else {\r\n            displayText = conditions;\r\n          }\r\n        } else {\r\n          const conditions = item.map(e => e.ConditionValue).join(',');\r\n    \r\n          if (conditions === 'NOT_NULL,NOT_EMPTY') {        \r\n            displayText = 'Not Empty';\r\n          } else if (conditions === 'NULL,EMPTY') {\r\n            displayText = 'Empty';\r\n          } else {\r\n            const x = item.map(e => e.ConditionValue);\r\n            x.forEach((el,idx) => {\r\n              if (el === 'NULL' || el === 'EMPTY') {\r\n                x[idx] = 'Empty';\r\n              } else if (el === 'NOT_NULL' || el === 'NOT_EMPTY') {\r\n                x[idx] = 'Not Empty';\r\n              }          \r\n            });\r\n    \r\n            displayText = [...new Set(x)].join(',');\r\n            //displayText = conditions;\r\n          }\r\n        }\r\n    \r\n        return displayText;\r\n      }\r\n    public selectedDmoFilterValue(item: any) {\r\n        let guid = item.GUID;\r\n        if (item.Type === 'MultiSelectDropDownList') {\r\n            guid =`${item.GUID}_val`;\r\n        }\r\n        return !this.selectedDmoFilter[guid] ? item.DisplayName : this.selectedDmoFilter[guid];\r\n    }\r\n\r\n    public validate(form, guid: string): boolean {\r\n        const colForm = this.filterForms[guid];\r\n        const [cond1, val1, checklist]: [Condition, string, any] = [colForm.ConditionOpt1, colForm.filterValue1, form?.checklist];\r\n        return !!val1 || this.specialConditions.includes(cond1) || !!checklist;\r\n    }\r\n\r\n    onFilterClear(columnName, filterType, item = undefined, dataType?: string) {\r\n        const recordsCountLoading = filterType !== 'sort';\r\n       \r\n        this._bodyData.PageNumber = 0;\r\n        if (filterType === 'sort') {\r\n            this._bodyData.SortColumn = '-1';\r\n            sessionStorage.removeItem(this.ProcessName + 'gridsort');\r\n        }\r\n        if (filterType === 'Global_Search') {\r\n            this.filters={};\r\n            if(this._bodyData.GridFilters)\r\n            this._bodyData.GridFilters[0].GridConditions[0].ConditionValue=\"\";\r\n            const globalSearch = this.elRef.nativeElement.querySelector('#globalSearch');\r\n            globalSearch.value = '';\r\n            delete this.filters[filterType + '~$~' + columnName];\r\n            delete this.filters[filterType + '~$~' + columnName + '_VAL'];\r\n        } else if (filterType === 'DMO_Filter') {\r\n            if (item && item.value['DataType'] === 'KeyValueSearchBox') {\r\n                delete this.filters[filterType + '~$~' + columnName.replace('_val', '')];\r\n            } else {\r\n                delete this.filters[filterType + '~$~' + columnName];\r\n            }\r\n            this.selectedDmoFilter = { All: 'All' };\r\n        } else if (filterType === 'State_Filter') {\r\n            if (columnName === 'All') {\r\n                this.activeStateFilter = [];\r\n            } else if (this.activeStateFilter.indexOf(columnName) > -1) {\r\n                this.activeStateFilter.splice(this.activeStateFilter.indexOf(columnName), 1);\r\n                delete this.filters[filterType + '~$~' + columnName];\r\n            }\r\n        } else if (filterType === 'Stage_Filter') {\r\n            const foundFilter = this.StageFilter.find(filter => filter.DisplayName === columnName);\r\n            if (columnName === 'All') {\r\n                this.activeStateFilter = [];\r\n            } else if (foundFilter) {\r\n                this.activeStateFilter.splice(this.activeStateFilter.indexOf(foundFilter.DisplayName), 1);\r\n                delete this.filters[filterType + '~$~' + foundFilter.GUID];\r\n            }\r\n        } else if (filterType === 'Custom_Filter') {\r\n            delete this.filters[filterType + '~$~Custom Filter(s)'];\r\n            this.selectedCustomFilter = 'Custom Filter(s)';\r\n        } else if (filterType === 'Column_Filter') {\r\n          dataType = item?.value?.DataType || item?.value?.GridConditions[0]?.dataType || dataType;\r\n          let guid = columnName;\r\n          if (dataType === 'KeyValueSearchBox') {\r\n            guid = columnName.split('-')[0];\r\n          } else if (dataType === 'MultiSelectDropDownList') {\r\n            guid = columnName.split('_')[0];\r\n          }\r\n          this.ColumnData[guid] && this.removeColumnDataFilters(guid);\r\n          this.resetFilterForm(dataType, guid);\r\n            const query = this.elRef.nativeElement.querySelector('.grid-filter-wrap .show');\r\n            if (query) {\r\n                query.classList.toggle('show');\r\n            }\r\n            const form = this.elRef.nativeElement.querySelector('#frm_' + columnName);\r\n            if(form && form.logicalOpt!=undefined){\r\n                if (form.logicalOpt.type === 'hidden') {\r\n                    const allInput = form.getElementsByTagName('input');\r\n                    for (let i = 0; i < allInput.length; i++) {\r\n                        if (allInput[i].type === 'checkbox' && allInput[i].checked === true) {\r\n                            allInput[i].checked = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.submitted = true;\r\n                    \r\n                }\r\n            }\r\n            delete this.filters[filterType + '~$~' + columnName];\r\n            // delete this.filters[filterType + '~$~' + columnName + '_KEY'];\r\n            delete this.filters[filterType + '~$~' + columnName + '_VAL'];\r\n            if (item && item.value['DataType'] === 'MultiSelectDropDownList') {\r\n                delete this.filters[filterType + '~$~' + columnName.replace('_val', '')];\r\n            }\r\n\r\n            if (columnName === 'naginavdtdtr') {\r\n                if (this.filters[`CustomListFilter~$~naginavdtdtr`]) {\r\n                    delete this.filters[`CustomListFilter~$~naginavdtdtr`];\r\n                    this.selectedItems = [];\r\n                }\r\n            }\r\n\r\n            if (columnName === 'nagpravdeptid') {\r\n                if (this.filters && item && item.key) {\r\n                    delete this.filters[item.key];\r\n                    this.selectedItems = [];\r\n                }\r\n            }\r\n        } else if (filterType === 'MyRecord') {\r\n            delete this.filters['All_Filter~$~'];\r\n        }\r\n        delete this.filters[filterType + '~$~' + columnName];\r\n    //    sessionStorage.setItem(sessionStorage.getItem('processName').toString() + 'gridFlters', JSON.stringify(this.filters));\r\n        this._bodyData.PageNumber = 0;\r\n        if (this.ColumnDataSource[columnName]) this.ColumnData[columnName] = this.ColumnDataSource[columnName].filter(() => true);\r\n        this.getGridData({recordsCountLoading});\r\n    }\r\n    goToPage(pageNumberControl) {\r\n        if (pageNumberControl.value <= this.TableInfo.PageCount) {\r\n            this._bodyData.PageNumber = pageNumberControl.value - 1;\r\n            this.getGridData();\r\n        }\r\n    }\r\n    changePageSize(pageSizeControl) {\r\n        this._bodyData.PageNumber = 0;\r\n        this._bodyData.PageSize = pageSizeControl;\r\n        this.getGridData();\r\n    }\r\n\r\n    checkIfAllSelected(event, item) {\r\n        item.selected = event.currentTarget.checked;\r\n        const recordID = item[this.keyColumn].toString();\r\n        if (item.selected) {\r\n            this.SelectedRecordIds.push(recordID);\r\n            // this.selectedAll = this.tableData.every(chkItem => {\r\n            //     return chkItem.selected === true;\r\n            // });\r\n        } else {\r\n            // this.selectedAll = false;\r\n            const ItemIndex = this.SelectedRecordIds.indexOf(recordID);\r\n            this.SelectedRecordIds.splice(ItemIndex, 1);\r\n        }\r\n        this.selectedAll = this.SelectedRecordIds.length === this.TableInfo.Recordes;\r\n        this.selectedAll$.next(this.selectedAll)\r\n        // this.gridView.updateSelectedIds(this.SelectedRecordIds);\r\n    }\r\n\r\n    async SelectAllCheckBox(that) {\r\n        const checked = that.currentTarget.checked;\r\n        this.selectedAll$.next(checked);\r\n        if (checked) {\r\n            const ids = this.tableData.map(record => record[this.keyColumn]);\r\n            const allIds = Array.from(new Set(this.SelectedRecordIds.concat(ids)))\r\n            this.updateSelectedIds(allIds);\r\n        } else {\r\n            this.updateSelectedIds();\r\n        }\r\n    }\r\n\r\n    public updateSelectedIds(ids: string[] = []) {\r\n        this.SelectedRecordIds = ids;\r\n        // this.gridView.updateSelectedIds(this.SelectedRecordIds);\r\n        this.selectedAll = ids.length > 0;\r\n        this.toggleAllVisibleRecords(this.selectedAll);\r\n      }\r\n\r\n\r\n    public columnFilterApplied(item: any) {\r\n        //const guid = item.dataType === 'MultiSelectDropDownList' ? `${item.datafield}_val` : item.datafield;\r\n        return !!(this.filters[`Column_Filter~$~${item.datafield}`] || this.filters[`Column_Filter~$~${item.datafield}_val`]);\r\n    }\r\n\r\n    BindData(data) {\r\n        this.currentResponse = data;\r\n        this.tableData = data.Data;\r\n        if (!this.selectedAll) {\r\n            this.cachedData = unionBy(this.cachedData, this.tableData, this.keyColumn);\r\n            // this.gridView.updateCachedTable(this.cachedData);\r\n        }\r\n        this.tableData.forEach((item: any) => {\r\n            if (this.SelectedRecordIds.includes(item[this.keyColumn].toString())) {\r\n                item.selected = true;\r\n            }\r\n        });\r\n        if (this.selectedAll) {\r\n            this.toggleAllVisibleRecords(true);\r\n        }\r\n        this.setPagination(data);\r\n        this.setTooltips(this.elRef.nativeElement.querySelector('#gridView'));\r\n        this.hideFooter = true;\r\n        sessionStorage.setItem('gridPage', JSON.stringify({ pageSize: this._bodyData.PageSize, pageNumber: this.TableInfo.PageNumber }));\r\n    }\r\n    drop(event: CdkDragDrop<string[]>) {\r\n        if (event.previousIndex !== event.currentIndex) {\r\n            const columnList = this.gridConfigData.ColumnList.split(',');\r\n            moveItemInArray(columnList, event.previousIndex, event.currentIndex);\r\n            this.gridConfigData.ColumnList = columnList.join(',');\r\n            this.setConfigData(this.gridConfigData);\r\n            this.saveGridConfig();\r\n        }\r\n    }\r\n\r\n    public toggleAllVisibleRecords(check: boolean) {\r\n        this.selectedAll = check;\r\n        this.tableData.forEach(record => record.selected = check);\r\n    }\r\n\r\n    // Column Resize\r\n    // @HostListener('#ProcessName:mousemove', ['$event'])\r\n    mouseMove(e) {\r\n        if (this.IsResizing && e.buttons == 1) {\r\n            if (this.curCol) {\r\n                const diffX = e.pageX - this.pageX;\r\n    \r\n                if (this.nxtCol) {\r\n                    this.nxtCol.style.width = (this.nxtColWidth - (diffX)) + 'px';\r\n                }\r\n                this.curCol.style.width = (this.curColWidth + diffX) + 'px';\r\n            }    \r\n        }\r\n    }\r\n    mouseDown(e) {\r\n        if (e.currentTarget.classList.contains('fa-grip-lines-vertical')) {\r\n            this.IsResizing = true;\r\n            this.curCol = e.target.parentElement.parentElement;\r\n            this.nxtCol = this.curCol.nextElementSibling;\r\n            this.pageX = e.pageX;\r\n            this.curColWidth = this.curCol.offsetWidth;\r\n            if (this.nxtCol) {\r\n                this.nxtColWidth = this.nxtCol.offsetWidth;\r\n            }\r\n        }\r\n    }\r\n\r\n    mouseUp(_: MouseEvent) {\r\n        if (this.IsResizing) {\r\n            let flg = false;\r\n\r\n            this.IsResizing = false;\r\n            this.setTooltips(document.activeElement);\r\n            const colElements = document.querySelectorAll('th.ColResize');\r\n            const totalWidth = document.querySelector('table#gridView').clientWidth;\r\n            colElements.forEach(el => {\r\n                if (el.id && el.id in this.gridConfigData.Columns) {\r\n                    const width = `${el['offsetWidth'] * 100 / totalWidth}%`;\r\n                    if (this.gridConfigData.Columns[el.id].Width && width !== this.gridConfigData.Columns[el.id].Width) {\r\n                        flg = true;\r\n                    }\r\n                    if (el.id in this.gridConfigData.Columns) this.gridConfigData.Columns[el.id].Width = width;\r\n                }\r\n            });\r\n            if (flg && this.ProcessName === this.UrlProcessName) {\r\n               this.saveGridConfig();\r\n            }\r\n            this.curCol = undefined;\r\n            this.nxtCol = undefined;\r\n            this.pageX = undefined;\r\n            this.nxtColWidth = undefined;\r\n            this.curColWidth = undefined;    \r\n        }\r\n    }\r\n\r\n    setTooltips(event) {\r\n        setTimeout(() => {\r\n            const arr = event.querySelectorAll('.content-text');\r\n            arr.forEach(elem => {\r\n                if (elem.offsetWidth < elem.scrollWidth) {\r\n                    elem.setAttribute('title', elem.textContent);\r\n                } else {\r\n                    elem.removeAttribute('title');\r\n                }\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    /* Since adding this type of filters is done by directly manipulating the dom in onFilter\r\n        I'm doing here the same to remove them.\r\n        NOTE: This solution is fragile and will break as soon as someone changes id on the forms\r\n        NOTE: This is a UI fix. It does not affect actual filters sent through the api.\r\n    */\r\n    private removeColumnDataFilters(guid: string) {\r\n        const form = document.getElementById(`frm_${guid}`);\r\n        const checkboxes = form?.querySelectorAll('input[type=\"checkbox\"]');\r\n        checkboxes?.forEach((input: HTMLInputElement) => input.checked = false);\r\n    }\r\n\r\n    ClearFilters() {\r\n        this.columns.forEach(col =>this.resetFilterForm(col.dataType, col.datafield));\r\n      // Iterate only over column filter forms user interacted with\r\n       Object.keys(this.ColumnData).forEach(guid => this.removeColumnDataFilters(guid));\r\n        this.selectedItems = [];\r\n        this.sortColumnName = this._bodyData.SortColumn = this.SortColumn;\r\n        this._bodyData.SortOrder = this.SortOrder;\r\n\r\n        const globalSearch = this.elRef.nativeElement.querySelector('#globalSearch');\r\n        if (globalSearch) {\r\n            globalSearch.value = '';\r\n        }       \r\n        this.filters = {};\r\n      //this.selectedDmoFilter.All = 'All';\r\n       this.selectedDmoFilter = { All: 'All' };     \r\n        this.activeStateFilter = [];\r\n        this.selectedCustomFilter = 'All';\r\n        this.selectedAllMyRecordFilter = 'All Record';\r\n      \r\n        this._bodyData.PageNumber = 0;\r\n        this._bodyData.GridFilters=undefined;\r\n     \r\n       \r\n        this.getGridData({recordsCountLoading: true});\r\n    }\r\n       getDateForCalender(value) {\r\n        const d = value ? new Date(value) : new Date();\r\n        return { year: d.getFullYear(), month: d.getMonth() + 1, day: d.getDate() };\r\n       }\r\n\r\n    convertToSystemDataAndTime(value, format, zone, ConditionOption, toUTC: boolean = true) {\r\n        if (value == null || value === '') {\r\n          return null;\r\n        }\r\n        try \r\n        {\r\n            let modifiedDateValue;\r\n            let dateArray = value.split(\"/\");\r\n            if (environment.Setting.dateFormat === \"dd/MM/yyyy\") {\r\n              modifiedDateValue = dateArray[1].toString() + '/' + dateArray[0].toString() + '/' + dateArray[2].toString();\r\n            } else {\r\n               modifiedDateValue = dateArray[0].toString() + '/' + dateArray[1].toString() + '/' + dateArray[2].toString();\r\n            }\r\n            let timeZone;\r\n            if (!zone) {\r\n              timeZone = this.TimeZone;\r\n            } else {\r\n              timeZone = zone;\r\n            }\r\n            const d = new Date(modifiedDateValue);\r\n            const localOffset = timeZone * 60000;         \r\n\r\n            if(['GREATER_THAN', 'LESS_THAN_OR_EQUAL'].indexOf(ConditionOption) > -1){\r\n                d.setHours(23,59,59,999);\r\n            }\r\n            else{\r\n                d.setHours(0,0,0,0);\r\n            }             \r\n            \r\n            //covert to UTC fotmate\r\n            let localTime: number;\r\n            if (toUTC) {\r\n                localTime = d.getTime()+ localOffset;                \r\n            } else {\r\n                if (this.ProcessName === 'NAG_Margin') {\r\n                    d.setSeconds(d.getSeconds() + 1);\r\n                }\r\n                localTime = d.getTime();\r\n            }\r\n            d.setTime(localTime);\r\n            return formatDate(d, format, 'en-US');      \r\n        } \r\n        catch (error) {\r\n          console.log('Datevalue-' + value + 'error' + error);\r\n          return '';\r\n        }\r\n    }\r\n    \r\n    convertToLocalDataAndTime(value, format, zone) {\r\n        if (value == null || value === '') {\r\n            return null;\r\n        }\r\n        try {\r\n            const d = new Date(value); // val is in UTC\r\n            let timeZone;\r\n            if (!zone) {\r\n                timeZone = this.TimeZone;\r\n            } else {\r\n                timeZone = zone;\r\n            }\r\n            const localOffset = timeZone * -60000;\r\n            const localTime = d.getTime();// - localOffset;\r\n            d.setTime(localTime);\r\n            return formatDate(d, format, 'en-US');\r\n        } catch (error) {\r\n            // console.log('Datevalue-' + value + 'error' + error);\r\n            return '';\r\n        }\r\n    }\r\n\r\n    abstract setConfigData(gridConfig: any): void;\r\n    abstract getGridData(opts?: GridDataOptions): void;\r\n    abstract BindDMODropDown(dmoGuid): void;\r\n    abstract getGridConfigData(gridviewName?): void;\r\n    abstract getDMOsMapping(): void;\r\n    abstract saveGridConfig(): void;\r\n    abstract openLinkFromUrl(): void;\r\n    \r\n    callOnInit(): void {};\r\n\r\n    hideBulkUpdateButton() {\r\n        if (this.SelectedRecordIds.length === 0) {\r\n            return true;\r\n        } else {\r\n            if (this.ShowBulkUpdateButton) {\r\n                return false;\r\n            } else {\r\n                return !this.IsBulkUpdateAllow;\r\n            }\r\n        }\r\n    }\r\n\r\n    mask(rawValue) {\r\n        if (rawValue && rawValue.replace(/\\D+/g, '').length > 10) {\r\n            return ['+', /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/];\r\n        } else {\r\n            return ['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\r\n        }\r\n    }\r\n\r\n    getDropDownData(dmoGuid, isKeyValuePair = false) {\r\n        this.BindDMODropDown(dmoGuid);\r\n        if (isKeyValuePair) {\r\n            for (const key in this.DMOData[dmoGuid]) {\r\n                if (this.DMOData[dmoGuid].hasOwnProperty(key) && typeof (this.DMOData[dmoGuid][key].DataValue) !== 'object') {\r\n                    const DataValue = {\r\n                        key: '',\r\n                        value: ''\r\n                    };\r\n                    const element = this.DMOData[dmoGuid][key].DataValue;\r\n                    const splitObj = element.split('~');\r\n                    DataValue.key = splitObj[0];\r\n                    DataValue.value = splitObj[1];\r\n                    delete this.DMOData[dmoGuid][key].DataValue;\r\n                    this.DMOData[dmoGuid][key].DataValue = (DataValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    CheckedSelected(savedValue, newValue) {\r\n        let val = '';\r\n        if (savedValue.indexOf('!') > 0) {\r\n            val = savedValue.split('!');\r\n        } else {\r\n            val = savedValue.split('|');\r\n        }\r\n        return val.indexOf(newValue) > -1;\r\n    }\r\n\r\n    // Check contract id exists or not\r\n    isExists(item) {\r\n        if (item.ContractId) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected resetFilterForm(type: string, guid: string) {\r\n        const isDate = this.dateTimeTypes.includes(type);\r\n        if (!this.filterForms[guid]) {\r\n            this.filterForms[guid] = {};\r\n        }\r\n        const form = this.filterForms[guid];\r\n        form.filterValue1 =  null;\r\n        form.filterValue2 =  null;\r\n        form.ConditionOpt1 =  isDate ? 'GREATER_THAN' : 'CONTAINS';\r\n        form.ConditionOpt2 =  isDate ? 'GREATER_THAN' : 'CONTAINS';\r\n        form.logicalOpt =  'OR';\r\n    }\r\n}\r\n\r\nexport interface GridDataOptions {\r\n    recordsCountLoading: boolean,\r\n}\r\n", "import { Component, ElementRef, Input, NgModule, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ColumnFilterService } from '@app/admin/core/services/column-filter.service';\r\nimport { MessageService } from '@app/core';\r\nimport { UserDetail } from '@app/core/models/user-detail';\r\nimport { environment } from '@env/environment';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { WFService } from '../../../core/services/wfservice.service';\r\nimport { IHeaderMap } from '../../wfd/models/wfGridInterface';\r\nimport { WorkflowApiService } from '../../wfd/services/workflow-api.service';\r\nimport { SaveStagestateConditionComponent } from '../pages/save-stagestate-condition/save-stagestate-condition.component';\r\nimport { WfConditionDetailComponent } from './wf-condition-detail/wf-condition-detail.component';\r\nimport {BaseGrid, GridDataOptions} from './baseGrid'\r\nimport { HighlightSpanKind } from 'typescript';\r\nimport { Stage } from '../../wfd/models/wf.model';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgIf, NgFor, KeyValuePipe } from '@angular/common';\r\nimport { GenericGridComponent } from '../../../Shared/generic-grid/generic-grid.component';\r\nimport { UtilService } from '@app/shared/services/util.service';\r\n@Component({\r\n    selector: 'app-wfconditions',\r\n    templateUrl: './wfconditions.component.html',\r\n    styleUrls: ['./wfconditions.component.scss'],\r\n    standalone: true,\r\n    imports: [NgIf, NgFor, ReactiveFormsModule, FormsModule, GenericGridComponent, KeyValuePipe]\r\n})\r\n\r\nexport class WfconditionsComponent extends BaseGrid implements OnInit {\r\n  \r\n  setConfigData(gridConfig: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  getGridData(opts?: GridDataOptions): void {\r\n    this.LoadData(this.WFId);\r\n  }\r\n  BindDMODropDown(dmoGuid: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  getGridConfigData(gridviewName?: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  getDMOsMapping(): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  saveGridConfig(): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  openLinkFromUrl(): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  public showSelectedFilters = true;\r\n  conditionStatus='1';\r\n  dataSource: any;\r\n  itemsCount: number;\r\n  filters: any = {}; \r\n  backsImageUrl = UtilService.getUrlForImage('/assets/styles/images/back-icon-black.png');\r\n  _bodyData = {\r\n    ProcessName: this.ProcessName,\r\n    PageSize: this.PageSize,\r\n    PageNumber: +this.PageNumber,\r\n    SortColumn: this.SortColumn,\r\n    SortOrder: this.SortOrder,\r\n    TimeZone: this.TimeZone,\r\n    ColumnList: this.ColumnList,\r\n    GridFilters: this.LstGridFilter\r\n  };\r\n  pageNum = -1;\r\n  filterValue1: string = \"\";\r\n  filterValue2: string = \"\";\r\n  ConditionOpt1: string = \"\";\r\n  ConditionOpt2: string = \"\";\r\n  logicalOpt: string = \"OR\";\r\n  HeaderMap: IHeaderMap = {\r\n    config: {\r\n      header: {\r\n        columns: [\r\n          {\r\n            objectKey: 'Condition_Name',\r\n            displayName: 'Condition Name',\r\n            width: '15%'\r\n          },\r\n          {\r\n            objectKey: 'Version',\r\n            displayName: 'Version',\r\n            width: '15%'\r\n          },{\r\n            objectKey: 'Status',\r\n            displayName: 'Status',\r\n            width: '15%'\r\n          },\r\n          {\r\n            objectKey: 'Description',\r\n            displayName: 'Description',\r\n            width: '15%'\r\n          },{\r\n            objectKey: 'Date_Created',\r\n            displayName: 'Date Added',\r\n            dataType: 'Date',\r\n            format: environment.Setting.dateTimeFormatNoSeconds,\r\n            timeZone: this.userDetail.TimeZone.toString(),\r\n            width: '20%'\r\n          },{\r\n            objectKey: 'Date_Modifed',\r\n            displayName: 'Date Modified',\r\n            dataType: 'Date',\r\n            format: environment.Setting.dateTimeFormatNoSeconds,\r\n            timeZone: this.userDetail.TimeZone.toString(),\r\n            width: '20%'\r\n          }\r\n        ],\r\n        action: {\r\n          Edit: true,\r\n          Delete: true,\r\n          Checkbox: true\r\n        },\r\n        columnFilter: []\r\n      },\r\n      paging: true\r\n    }\r\n  };\r\n\r\n  processName: string;\r\n  WFId: any;\r\n  @Input() wfosId: string = null;\r\n  @Input() wfoid: string = null;\r\n  @Input() isComingStageandState: boolean = false;\r\n  ConditionID: any;\r\n  WFCondForm: UntypedFormGroup;\r\n  public activeModal: NgbActiveModal;\r\n  constructor(\r\n    private modalService: NgbModal,\r\n    private readonly wfApi: WorkflowApiService,\r\n    private wfsrvc: WFService,  \r\n    private userDetail: UserDetail,private router: Router,\r\n    private columnFilter: ColumnFilterService,\r\n    private route: ActivatedRoute,private toastr: ToastrService,\r\n    private msg: MessageService,private fb: UntypedFormBuilder,\r\n    public elRef: ElementRef,\r\n   ) {\r\n      super(elRef);\r\n    }\r\n\r\n  ngOnInit() { \r\n    this.processName = sessionStorage.getItem('AppName');\r\n    if (this.route.snapshot.queryParams.id && this.wfosId && this.wfoid) {\r\n      this.WFId = this.route.snapshot.queryParams.id;\r\n      this.LoadData(this.WFId,this.wfosId,this.wfoid);\r\n    }else{\r\n      if(this.route.snapshot.queryParams.id){\r\n        this.WFId = this.route.snapshot.queryParams.id;\r\n       this.LoadData(this.WFId,this.wfosId,this.wfoid)\r\n      }    \r\n    }\r\n    this.WFCondForm = this.fb.group({  \r\n      ChangeStatus: ['-1']\r\n    });\r\n  }\r\n\r\n  public showSelectedFilter(dmoGuid: string) {\r\n    return !dmoGuid.endsWith('_KEY') && !dmoGuid.endsWith('_VAL');\r\n}\r\n\r\n \r\n\r\n  pageChange(event) {\r\n    this._bodyData.PageNumber = event.currentPage;\r\n    this._bodyData.PageSize = event.pageSize; \r\n    this.GetWFCondtionGrid(this.WFId,this._bodyData);   \r\n  }\r\n\r\n  onGlobalFilter(form, columnName, filterType, value, dataType = undefined)\r\n  {\r\n    if(form.globalSearch.value!=\"\"){\r\n        this.submitted = true;\r\n        let filter: any = {};\r\n        this.filters={};\r\n        this._bodyData.PageNumber = 0;\r\n        if (filterType === 'Global_Search') {\r\n     \r\n            if (form.globalSearch.value === '') {\r\n                delete this.filters[filterType + '~$~' + columnName];\r\n            } else {\r\n                filter = {\r\n                  GridConditions: [{\r\n                    Condition: 'CONTAINS',\r\n                    ConditionValue: form.globalSearch.value\r\n                    }],\r\n                    DataField: columnName,\r\n                    LogicalOperator: 'Or',\r\n                    FilterType: filterType\r\n                };\r\n            }\r\n          //  columnName = columnName;\r\n        } \r\n        this.generateFilter();\r\n        this._bodyData.GridFilters.push(filter);\r\n        this.GetWFCondtionGrid(this.WFId,this._bodyData);\r\n        this.filters=this._bodyData.GridFilters;\r\n       }\r\n    }\r\n\r\n\r\n\r\n  actionClick(event) {   \r\n    switch (event.action) {\r\n      case 'Filter_Header':\r\n        this.bindColumnFilterDdl(event);\r\n        break;\r\n      case 'Edit':\r\n        this.openNewFormViewPopup(event.rowIndex);\r\n        break;\r\n        case 'Filter_Click':\r\n          if (!this.validate(event)) {\r\n            break;\r\n          }\r\n          this._bodyData.PageNumber = 1;\r\n          let filter: any = {};\r\n          filter = {\r\n            GridConditions: [\r\n            ],\r\n            DataField: event.colData.objectKey,          \r\n            LogicalOperator: event.filterData.logicalOpt.Value === 'Select...' ? '' : event.filterData.logicalOpt.Value,\r\n            FilterType: 'Column_Filter'\r\n          };\r\n          if (event.filterData.filterValue1 && event.filterData.filterValue1 !== '') {         \r\n              filter.GridConditions.push({\r\n                Condition: event.filterData.ConditionOpt1.Value,\r\n                ConditionValue: event.filterData.filterValue1\r\n              });          \r\n          }\r\n          if (event.filterData.filterValue2 && event.filterData.filterValue2 !== '') {  \r\n              filter.GridConditions.push({\r\n                Condition: event.filterData.ConditionOpt2.Value,\r\n                ConditionValue: event.filterData.filterValue2\r\n              });\r\n            }\r\n          \r\n         \r\n         this.generateFilter();\r\n         this._bodyData.GridFilters.push(filter)\r\n          sessionStorage.setItem('grid_filter', JSON.stringify(this._bodyData));\r\n          event.ColumnFilterDropdown.close();\r\n          if (filter && Object.keys(filter).length !== 0) {\r\n            this.filters['Column_Filter' + event.colData.objectKey] = filter;\r\n          }\r\n          this.GetWFCondtionGrid(this.WFId,this._bodyData);\r\n          break;\r\n        case 'asc':\r\n          this._bodyData.SortColumn = event.colData.objectKey;\r\n          this._bodyData.SortOrder = 'asc';\r\n          this.sortColumnName = event.colData.objectKey;\r\n          sessionStorage.setItem('grid_filter', JSON.stringify(this._bodyData));\r\n          //  this.LoadData(this.WFId); \r\n          this.GetWFCondtionGrid(this.WFId,this._bodyData);\r\n          break;\r\n        case 'desc':\r\n          this._bodyData.SortColumn = event.colData.objectKey;\r\n          this._bodyData.SortOrder = 'desc';\r\n          this.sortColumnName = event.colData.objectKey;\r\n          sessionStorage.setItem('grid_filter', JSON.stringify(this._bodyData));\r\n         //    this.LoadData(this.WFId); \r\n          this.GetWFCondtionGrid(this.WFId,this._bodyData);\r\n          break;\r\n        case 'Remove Sort':\r\n          this._bodyData.SortColumn = '-1';\r\n          this._bodyData.SortOrder = 'desc';\r\n          sessionStorage.setItem('grid_filter', JSON.stringify(this._bodyData));\r\n          this.LoadData(this.WFId); \r\n          break;\r\n      case 'Delete':\r\n        this.showDeleteMessage(event.rowIndex);\r\n        break;\r\n      case 'FilterClear_Click':\r\n        delete this.filters['Column_Filter~$~' + event.colData.objectKey];\r\n        sessionStorage.removeItem('grid_filter');\r\n        this.generateFilter();\r\n        event.ColumnFilterDropdown.close();\r\n        break;\r\n      case 'SpecialCharClick':     \r\n      window.open(`/admin/wf/wfd?processName =${this.processName}&VerNo=${this.dataSource[event.rowIndex].Ver}`, '_blank');\r\n        break;\r\n        case 'Link':\r\n         this.router.navigate([`/admin/wf/wfcondition`,'lmk']);\r\n          break;\r\n    }\r\n  }\r\n  LoadData(id:string,state?:string,stage?:string) { \r\n    if(this.isComingStageandState){   \r\n      this.wfsrvc.GetWFConditions(id,this.wfosId,this.wfoid).subscribe(x => {      \r\n        this.dataSource = x.Data;\r\n      },\r\n        err => {\r\n          console.log(err);\r\n        });\r\n    }else{\r\n      this.wfsrvc.GetWFConditions(id).subscribe(x => {      \r\n        this.dataSource = x.Data;\r\n      },\r\n        err => {\r\n          console.log(err);\r\n        });\r\n    }  \r\n  }\r\n\r\n  GetWFCondtionGrid(id?:any,body?:any)\r\n  {\r\n    this.wfsrvc.GetWFCondtionGrid(id,body).subscribe(x => {      \r\n      this.dataSource = x.Data;\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  routeBack(){\r\n    window.history.back();\r\n  }\r\n\r\n  bindColumnFilterDdl(item) {\r\n    let type = '';\r\n    if (item.colData.dataType === 'Date') {\r\n      type = 'DateEditBox';\r\n    }\r\n    const FilterData = this.columnFilter.GetFilterByDataType(type); // Calling Function to get ColumnFilter Condition data\r\n    if (FilterData.length === 0) { // Check if Array is empty then call API for options data\r\n    } else {\r\n      const key = Object.keys(item.colData)[0];\r\n      this.HeaderMap.config.header.columnFilter['colData_' + item.colIndex] = FilterData;\r\n      this.ConditionOpt1 = item.ConditionOpt1;\r\n      this.ConditionOpt2 = item.ConditionOpt2;\r\n    }\r\n  }\r\n\r\n  OnRowClick(event:any){ \r\n    return   ;\r\n  }\r\n\r\n  async openNewFormViewPopup(index:any) {\r\n    const bmList = await this.wfApi.getBMList(this.WFId).toPromise();\r\n    const condId = typeof index === 'number' ? this.dataSource[index].ConditionID : null;\r\n    const data = condId ? await this.wfApi.getWFConditionDetail(condId).toPromise() : null;\r\n    const modal = this.msg.showComponent(WfConditionDetailComponent, {\r\n      wfId: this.WFId,\r\n      bmList,\r\n      data,\r\n      version: sessionStorage.getItem('WFVersion'),\r\n    });\r\n    const res = await modal.result;\r\n    if (res) {\r\n      this.wfApi.upsertCondition(res).subscribe(_ => this.LoadData(this.WFId));\r\n    }\r\n  }\r\n  showDeleteMessage(Index:any) {    \r\n    if (Index > -1) {\r\n      this.ConditionID = this.dataSource[Index].ConditionID;\r\n      this.msg.showMessage('Warning', {\r\n        header: 'Delete Selected Item',\r\n        body: 'Do you want to delete selected item?',\r\n        btnText: 'Delete',\r\n        checkboxText: 'Yes, delete selected item',\r\n        isDelete: true,\r\n        isNewDesign:true,\r\n        callback: this.deleteSelectedConfirmation,\r\n        caller: this,\r\n      })\r\n    } else {\r\n      this.msg.showMessage('Warning', { body: 'At least one record must be selected in order to delete' });     \r\n    }\r\n  }\r\n  deleteSelectedConfirmation(modelRef: NgbModalRef, Caller: WfconditionsComponent) {    \r\n      Caller.wfsrvc.DeleteWFCondition(Caller.ConditionID).subscribe(\r\n        result => {          \r\n          if (result === 'Record(s) Deleted successfully'||result.message === 'Record(s) Deleted successfully' ) {\r\n            Caller.LoadData(Caller.WFId);  \r\n            Caller.toastr.success(result.message);\r\n            modelRef.close();\r\n          }\r\n        }, error => {          \r\n          if(!!error.error  && error.error === 'Record(s) Cannot Be Deleted'){\r\n            Caller.toastr.warning('Record(s) Cannot Be Deleted');\r\n          }} );\r\n  }\r\n\r\n  ChangeStatus(event:any){              \r\n    const ConditionID = this.dataSource.filter(x => x.selected === true).map(x => x.ConditionID).join(',');\r\n    if(event.target.value !== \"-1\" && !!ConditionID){\r\n      this.wfsrvc.ChangeWfConditionStatus(ConditionID,event.target.value).subscribe(\r\n        result => {\r\n          if (result) {\r\n            this.LoadData(this.WFId);\r\n            this.WFCondForm.get('ChangeStatus').patchValue('-1');\r\n            this.toastr.success('Status Changed successfully');\r\n          }\r\n        });\r\n    } else{  \r\n      if(event.target.value !== \"-1\" && (ConditionID === undefined || ConditionID === '')){\r\n        this.WFCondForm.get('ChangeStatus').patchValue('-1');\r\n        this.toastr.warning('Please select at least one record.');\r\n      }         \r\n    } \r\n  }\r\n\r\n  validate(event): boolean {\r\n\r\n    if (event.filterData.ConditionOpt1 && (event.filterData.ConditionOpt1.Value === '' ||\r\n      event.filterData.ConditionOpt1.Value === 'Select...')) {\r\n      return false;\r\n    } else if (event.filterData.filterValue1 && event.filterData.filterValue1.Value === '') {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  removeFilter(txtGlobal) {\r\n    this.filters = [];\r\n    txtGlobal.value = '';\r\n    this.pageNum = 1;\r\n    this.generateFilter();\r\n  }\r\n\r\n  closeModal() {\r\n    this.modalService.dismissAll();\r\n  }\r\n\r\n  private generateFilter() {\r\n    sessionStorage.removeItem('grid_filter');\r\n    this._bodyData.GridFilters = [];\r\n    this._bodyData.PageNumber = 1;\r\n    Object.keys(this.filters).forEach(key => {\r\n      this._bodyData.GridFilters.push(this.filters[key]);\r\n    });\r\n    sessionStorage.setItem('grid_filter', JSON.stringify(this._bodyData));\r\n   // this.LoadData(this.WFId);\r\n  }\r\n\r\n\r\n  onPaste(event: ClipboardEvent, inputElement: HTMLInputElement): void {\r\n    event.preventDefault(); // Prevent default paste behavior\r\n    const pastedText = (event.clipboardData?.getData('text') || '').replace(/\\s+/g, '');\r\n    const start = inputElement.selectionStart || 0;\r\n    const end = inputElement.selectionEnd || 0;\r\n    const currentValue = inputElement.value;\r\n    \r\n    inputElement.value = currentValue.slice(0, start) + pastedText + currentValue.slice(end);\r\n    \r\n    // Move cursor to the end of the inserted text\r\n    const cursorPosition = start + pastedText.length;\r\n    setTimeout(() => inputElement.setSelectionRange(cursorPosition, cursorPosition), 0);\r\n  }\r\n  \r\n}\r\n", "<!--Header-->\r\n\r\n<ng-container >\r\n  <div class=\"breadcrumbs p-3\" style=\"background-color: #fff;\">\r\n    <a (click)=\"routeBack()\">\r\n      <img [src]=\"backsImageUrl\" style=\"filter: var(--plx-app-list-icon-filter);\" width=\"20px\">\r\n      <span>Back</span>\r\n    </a> \r\n  </div>\r\n</ng-container>\r\n\r\n<div class=\"p-3\">\r\n  <div class=\"mt-1 mb-3 mr-0.8\">\r\n    <button\r\n  *ngIf=\"isComingStageandState\"\r\n  type=\"button\"\r\n  class=\"close close-custom\"\r\n  aria-label=\"Close\"\r\n  (click)=\"closeModal()\"\r\n  style=\"padding: 1rem 1rem; margin: -1rem -1rem 1rem auto;\"\r\n>\r\n  <span aria-hidden=\"true\" class=\"fas fa-times-circle fa-fw\"></span>\r\n</button>\r\n    <div class=\"d-flex flex-column flex-md-row justify-content-between align-items-center\">  \r\n    <div class=\"display-name\">WF Conditions</div>\r\n    \r\n    </div>\r\n\r\n    <ng-container *ngIf=\"showSelectedFilters\">\r\n      <div class=\"tags-list ml-2\" *ngIf=\"_bodyData.SortColumn !='-1' || !(isEmptyObject(filters))\">\r\n        <div class=\"tags-list-label\">Selected Filter(s) :</div>\r\n        <ul>\r\n     <!--  *ngIf=\"!(_bodyData.SortColumn.toLowerCase() ==='crtdon' && _bodyData.SortOrder.toLowerCase() ==='desc')\" -->\r\n          <li *ngIf=\"_bodyData.SortColumn != '-1' \"><span>{{sortColumnName + '(' + _bodyData.SortOrder +')' }}</span>\r\n            <a id=\"a_otchannel\" href=\"javascript:void(0);\" class=\"icon-close\"\r\n              (click)=\"onFilterClear(_bodyData.SortColumn, 'sort')\"><i class=\"fas fa-times\"></i></a>\r\n          </li>\r\n          <ng-container *ngFor=\"let item of filters | keyvalue\">\r\n            <li *ngIf=\"showSelectedFilter(item.value.DataField)\"><span>{{this.FilterList(item.value)}}</span>\r\n              <a id=\"a_otchannel\" href=\"javascript:void(0);\" class=\"icon-close\"\r\n                (click)=\"onFilterClear(item.value.DataField,'Global_Search' , item)\"><i class=\"fas fa-times\"></i></a>\r\n            </li>\r\n          </ng-container>\r\n          \r\n          <li class=\"resetFilter\" (click)=\"ClearFilters()\">\r\n            <span>Remove All Filter(s)</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </ng-container> \r\n\r\n    </div>\r\n    <!--Gloabl Search-->\r\n    <form class=\"position-relative text-center\" #gblFilterForm\r\n    (ngSubmit)=\"onGlobalFilter(gblFilterForm,'dmoName','Global_Search',undefined)\">\r\n      <div class=\"p-2\">\r\n        <div class=\"wfMainGSearch\">\r\n          <div class=\"globalSearchWrap\">\r\n            <div class=\"position-relative\">\r\n              <input id=\"globalSearch\" #txtGlobal placeholder=\"Global Search\" type=\"search\" (paste)=\"onPaste($event, txtGlobal)\">\r\n              <button aria-label=\"Search\" class=\"btn-search search-icon-btn \" routerlink=\"\" tabindex=\"0\" type=\"submit\">\r\n                <i class=\"fas fa-search\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"button\" class=\"btn btn-warning text-white open-popup-btn d-none\" (click)=\"openNewFormViewPopup(null)\">\r\n        <i class=\"fas fa-plus\" aria-hidden=\"true\"></i>\r\n      </button>\r\n    </form>\r\n    <div></div>\r\n    <div class=\"p-1\"></div>\r\n    <form [formGroup]=\"WFCondForm\">\r\n    <div class=\"table-filters-group\">        \r\n      <div class=\"button-group d-none\" style=\"padding: 3px 5px;\">              \r\n        <select name='ChangeStatus' formControlName=\"ChangeStatus\" class=\"btn btn-primary-special btn-small\" (change)=\"ChangeStatus($event)\">\r\n            <option value=\"-1\">Change Status</option>\r\n            <option value=\"1\">Active</option>\r\n            <option value=\"0\">Inactive</option>\r\n        </select>   \r\n      </div>\r\n      <button (click)=\"openNewFormViewPopup(null)\" class=\"icon\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19\" height=\"18\" viewBox=\"0 0 19 18\" fill=\"none\">\r\n          <path\r\n            d=\"M16.851 7.07143H11.0653V1.28571C11.0653 0.575759 10.4895 0 9.77958 0H8.49386C7.78391 0 7.20815 0.575759 7.20815 1.28571V7.07143H1.42243C0.712478 7.07143 0.136719 7.64719 0.136719 8.35714V9.64286C0.136719 10.3528 0.712478 10.9286 1.42243 10.9286H7.20815V16.7143C7.20815 17.4242 7.78391 18 8.49386 18H9.77958C10.4895 18 11.0653 17.4242 11.0653 16.7143V10.9286H16.851C17.561 10.9286 18.1367 10.3528 18.1367 9.64286V8.35714C18.1367 7.64719 17.561 7.07143 16.851 7.07143Z\"\r\n            fill=\"white\" />\r\n        </svg>\r\n      </button>\r\n      <button class=\"btn btn-primary-special btn-small my-1 d-none\" style=\"padding: 3px 5px;\" type=\"button\" (click)=\"ClearFilters()\">Remove Filter</button>\r\n    </div>\r\n  </form>\r\n    <div class=\"p-1\"></div>\r\n    <div class=\"grid\">\r\n <generic-grid\r\n [dataSource]=\"dataSource\"\r\n [headerMap]=\"HeaderMap\"\r\n [itemsCount]=\"itemsCount\"\r\n [sNo]=\"false\"\r\n[pageNum]=\"pageNum\"\r\n(pageChange)=\"pageChange($event)\"\r\n(actionClick)=\"actionClick($event)\"\r\n(rowClick)=\"OnRowClick($event)\"\r\n#genericgridcomponent></generic-grid>\r\n</div>\r\n</div>"],
  "mappings": "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",
  "names": ["WF", "Status", "ActionState", "BMOType", "ElementType", "EventDef", "EventType", "style", "elementType", "t", "id", "el", "filter", "filter"]
}
