{
  "version": 3,
  "sources": ["src/app/modules/auth/pages/login/login.component.ts", "src/app/modules/auth/pages/login/login.component.html", "src/app/modules/auth/pages/reset-pwd/reset-pwd.component.ts", "src/app/modules/auth/pages/reset-pwd/reset-pwd.component.html", "src/app/core/services/email.service.ts", "src/app/gateway-page/gateway-page.component.ts", "src/app/gateway-page/gateway-page.component.html", "src/app/modules/auth/pages/error/error.component.ts", "src/app/modules/auth/pages/error/error.component.html", "src/app/modules/auth/pages/activate-account/activate-account.component.ts", "src/app/modules/auth/pages/activate-account/activate-account.component.html", "src/app/modules/auth/pages/gate-way/gate-way.component.ts", "src/app/modules/auth/auth-routing.module.ts", "src/app/modules/auth/auth.module.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport {  AuthenticationService } from '@app/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ForgotPwdComponent } from '@app/shared/components/forgot-pwd/forgot-pwd.component';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NgClass, NgIf } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n    standalone: true,\r\n    imports: [ReactiveFormsModule, NgClass, NgIf]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    loginForm: UntypedFormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    returnUrl: string;\r\n\r\n    constructor(\r\n        private formBuilder: UntypedFormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService,\r\n        private titleService: Title,\r\n        public activeModal: NgbModal,\r\n        private toastr: ToastrService\r\n    ) {\r\n        if (localStorage.getItem('AccessToken')) {\r\n             this.authenticationService.logout();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setDocTitle('');\r\n        this.loginForm = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n\r\n        // get return url from route parameters or default to '/'\r\n        this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/';\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.loginForm.controls; }\r\n\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // stop here if form is invalid\r\n        if (this.loginForm.invalid) {\r\n            return false;\r\n        }\r\n\r\n        this.loading = true;\r\n        // this.authenticationService.isSamlUser(this.f.username.value).toPromise()\r\n        //     .then(res => {\r\n        //        if (res) {\r\n        //             const currentUser = res.User;\r\n        //             if (currentUser.IsGlobalUser) {\r\n        //                 this.toastr.warning('Redirecting to SSO', '', {\r\n        //                     timeOut: 4000, positionClass: 'toast-top-center'\r\n        //                 });\r\n        //                 setTimeout(() => {\r\n        //                     this.router.navigate(['']);\r\n        //                 }, 5000);\r\n        //             }\r\n                  //  else {\r\n                        this.authenticationService.login(this.f.username.value, this.f.password.value).subscribe(\r\n                            data => {\r\n                                if (data === true) {\r\n                                    if (this.returnUrl !== '/') {\r\n                                        const arr = this.returnUrl.split('/');\r\n                                        switch (arr[1]) {\r\n                                            case 'process_control':\r\n                                                switch (arr[2]) {\r\n                                                    case 'LMKESaleyardListings':\r\n                                                    case 'LMKCRMEContractsRecords':\r\n                                                        sessionStorage.AppName = 'LMKOpportunities';\r\n                                                        break;\r\n                                                    default:\r\n                                                        sessionStorage.AppName = arr[2];\r\n                                                }\r\n                                                break;\r\n                                            case 'sales':\r\n                                                sessionStorage.AppName = 'LMKLivestockSales';\r\n                                                break;\r\n                                            case 'announcement':\r\n                                                sessionStorage.AppName = 'Announcement';\r\n                                                break;\r\n                                            case 'e-saleyard':\r\n                                                sessionStorage.AppName = 'LMKESaleyardUsers';\r\n                                                break;\r\n                                            case 'content_manager':\r\n                                                sessionStorage.AppName = 'LMKESaleyardContentManager';\r\n                                                break;\r\n                                        }\r\n                                        this.router.navigateByUrl(this.returnUrl);\r\n                                    } else {\r\n                                        //this.router.navigate(['/app_list']);\r\n                                        this.router.navigate(['/admin/wf-app-list']);\r\n                                    }\r\n                                    this.loading = false;\r\n                                } else {\r\n                                    this.loading = false;\r\n                                }\r\n                            },\r\n                            error => {\r\n                                console.log(error);\r\n                                this.loading = false;\r\n                                throw error;\r\n                            });\r\n\r\n                   // }\r\n              // }\r\n          // })\r\n\r\n    }\r\n    setDocTitle(title: string) {\r\n        this.titleService.setTitle('C2M IoT Cloud Login- Fully Managed IoT Services from C2M');\r\n     }\r\n\r\n\r\n}\r\n", "<div class=\"container mt-3\">\r\n    <h2>Login</h2><hr>\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"mb-3\">\r\n            <label for=\"username\" class=\"form-label\">Username</label>\r\n            <input id=\"username\" type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n            <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n                <div *ngIf=\"f.username.errors.pattern\">Invalid username format</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <label for=\"password\" class=\"form-label\">Password</label>\r\n            <input id=\"password\" type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback password-error\">\r\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                <div *ngIf=\"f.password.errors.minlength\">Password must be at least 8 characters long</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <button [disabled]=\"loading\" class=\"btn btn-primary text-white login-btn\">Login</button>\r\n        </div>\r\n\r\n    </form>\r\n</div>", "import { Component, OnInit } from '@angular/core';\r\nimport { UntypedFormGroup, Validators, UntypedFormBuilder, AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthenticationService } from '@app/core';\r\n// import { ToastrService } from 'ngx-toastr';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MessageService } from '@app/core/services/message.service';\r\nimport { environment } from '@env/environment';\r\nimport { EmailService } from '@app/core/services/email.service';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport { NgClass, NgIf } from '@angular/common';\r\n@Component({\r\n    selector: 'app-reset-pwd',\r\n    templateUrl: './reset-pwd.component.html',\r\n    styleUrls: ['./reset-pwd.component.scss'],\r\n    standalone: true,\r\n    imports: [ReactiveFormsModule, NgClass, NgIf]\r\n})\r\nexport class ResetPwdComponent implements OnInit {\r\n  form: UntypedFormGroup;\r\n  submitted = false;\r\n\r\n  constructor(\r\n    private formBuilder: UntypedFormBuilder,\r\n    private auth: AuthenticationService,\r\n    private msg: MessageService,\r\n    private emailService: EmailService,\r\n    private router_activate: ActivatedRoute,\r\n    private router: Router,\r\n    \r\n  ) {}\r\n\r\n  ngOnInit() {\r\n\r\n    this.form = this.formBuilder.group({\r\n      resetCode: ['', Validators.required],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', [Validators.required, confirmPassword]]\r\n    });    \r\n      this.isLinkExpire();\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.form.controls;\r\n  }\r\n\r\n isLinkExpire(){\r\n  try{\r\n    if(!this.router_activate.snapshot.queryParamMap.get('ids')){\r\n      this.msg.showMessage('Warning', {body: `Can't complete this request`})\r\n      this.router.navigateByUrl('/auth/login');\r\n     return true;\r\n    }\r\n   //this.router_activate.snapshot.queryParamMap.get('ids');\r\n   var decrypted = CryptoJS.AES.decrypt(decodeURIComponent(this.router_activate.snapshot.queryParamMap.get('ids')), environment.Setting.secretCode);\r\n   const minutes=diff_minutes(((new Date()).toUTCString()),(decrypted.toString(CryptoJS.enc.Utf8)))\r\n   if(!(minutes<=10)){\r\n    this.msg.showMessage('Warning', {body: `Your activation link has been expired.`})\r\n    this.router.navigateByUrl('/auth/login');\r\n    return true;\r\n   }\r\n  else{\r\n    return false;\r\n  }}\r\n   catch(err){\r\n    this.msg.showMessage('Warning', {body: `Can't complete this request `})\r\n    this.router.navigateByUrl('/auth/login');\r\n    return true;\r\n   }\r\n}\r\n  async resetPassword() {\r\n    \r\n    this.submitted = true;\r\n    return;\r\n  }\r\n  \r\n}\r\n\r\nfunction Encryption(text) {\r\n    var key = CryptoJS.enc.Utf8.parse('lmkkeyasdfghjklq');\r\n    var iv = CryptoJS.enc.Utf8.parse('lmkkeyasdfghjklq');\r\n    var encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(text), key,\r\n        {\r\n            keySize: 128 / 8,\r\n            iv: iv,\r\n            mode: CryptoJS.mode.CBC,\r\n            padding: CryptoJS.pad.Pkcs7\r\n        });\r\n    return encrypted.toString();\r\n}\r\n\r\nfunction diff_minutes(dt2, dt1) \r\n {\r\n  dt2=new Date(dt2);\r\n  dt1=new Date(dt1);\r\n  var diff =(dt2.getTime() - dt1.getTime()) / 1000;\r\n  diff /= 60;\r\n  return Math.abs(Math.round(diff));\r\n }\r\n\r\nfunction confirmPassword(control: AbstractControl): any {\r\n  if (!control.parent || !control) {\r\n    return;\r\n  }\r\n\r\n  const password = control.parent.get('password');\r\n  const passwordConfirm = control.parent.get('confirmPassword');\r\n\r\n  if (!password || !passwordConfirm) {\r\n    return;\r\n  }\r\n\r\n  if (passwordConfirm.value === '') {\r\n    return;\r\n  }\r\n\r\n  if (password.value !== passwordConfirm.value) {\r\n    return {\r\n      passwordsNotMatch: true\r\n    };\r\n  }\r\n}\r\n", "<section role=\"main\" class=\"container mt-3\">\r\n  <div class=\"whiteBgSection\" style=\"margin:0px;\">\r\n    <div class=\"smallCenteredContainer\">\r\n      <h3 class=\"FR25\">Reset Password</h3>\r\n    </div>\r\n  </div>\r\n\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"resetPassword()\">\r\n    <div class=\"whiteBgSection\">\r\n      <div class=\"smallCenteredContainer\">\r\n        <div class=\"padding-m\"></div>\r\n\r\n        <!-- <div\r\n          class=\"alert\"\r\n          *ngIf=\"submitted && (f.resetCode.errors || f.password.errors || f.confirmPassword.errors)\"\r\n        >\r\n          <div class=\"alert-error\">\r\n            <i class=\"fas fa-exclamation-triangle\"></i>\r\n          </div>\r\n          <div class=\"alert-content\">\r\n            <h3 class=\"AL20 colorRed\">There was a problem</h3>\r\n             <div *ngIf=\"submitted && f.resetCode.errors\">\r\n              <div *ngIf=\"f.resetCode.errors.required\">Reset code is required</div>\r\n            </div> \r\n            <div *ngIf=\"submitted && f.password.errors\">\r\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n              <div *ngIf=\"f.password.errors.minlength\">\r\n                Password should be at least 6 characters length\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"submitted && f.confirmPassword.errors\">\r\n              <div *ngIf=\"f.confirmPassword.errors.required\">Confirm password is required</div>\r\n              <div *ngIf=\"f.confirmPassword.errors.passwordsNotMatch\">Passwords do not match</div>\r\n            </div>\r\n          </div>\r\n        </div> -->\r\n\r\n        <p class=\"p-large\">\r\n          Please enter the reset code you received and select a new password.\r\n        </p>\r\n        <!-- <div class=\"formWrap\" style=\"max-width:400px;\"> -->\r\n          <div class=\"form-group\">\r\n            <label for=\"\">Reset Code</label>\r\n            <!-- <div class=\"field-group span12\"> -->\r\n              <input formControlName=\"resetCode\" id=\"\" placeholder=\"\" class=\"span12 form-control col-sm-8\" type=\"text\" autocomplete=\"new-code\" [ngClass]=\"{ 'is-invalid': submitted && f.resetCode.errors }\">\r\n            <!-- </div> -->\r\n            <div *ngIf=\"submitted && f.resetCode.errors\" class=\"invalid-feedback password-error\">\r\n              <div *ngIf=\"f.resetCode.errors.required\">Reset code is required</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"\">Password</label>\r\n            <!-- <div class=\"field-group span12\"> -->\r\n              <input\r\n                formControlName=\"password\"\r\n                id=\"\"\r\n                placeholder=\"\"\r\n                class=\"span12 form-control col-sm-8\"\r\n                type=\"password\"\r\n                autocomplete=\"new-password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\r\n              />\r\n            <!-- </div> -->\r\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n              <div *ngIf=\"f.password.errors.minlength\">\r\n                Password should be at least 6 characters length\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"\">Confirm Password</label>\r\n            <!-- <div class=\"field-group span12\"> -->\r\n              <input\r\n                formControlName=\"confirmPassword\"\r\n                id=\"\"\r\n                placeholder=\"\"\r\n                class=\"span12 form-control col-sm-8\"\r\n                type=\"password\"\r\n                autocomplete=\"new-password\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\"\r\n              />\r\n              <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.confirmPassword.errors.required\">Confirm password is required</div>\r\n                <div *ngIf=\"f.confirmPassword.errors.passwordsNotMatch\">Passwords do not match</div>\r\n              </div>\r\n            <!-- </div> -->\r\n          </div>\r\n        <!-- </div> -->\r\n\r\n        <div class=\"padding-xxs\"></div>\r\n        <div class=\"form-group\">\r\n          <button type=\"submit\" class=\"btn btn-primary login-btn\">Continue</button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-clear btn-large\"\r\n            onClick=\"window.location.href='javascript:history.back()'\"\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n        <div class=\"padding-m\"></div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</section>\r\n", "import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Email } from '../models/email.model';\r\nimport { UserProfile } from '../models/user-profile.model';\r\n\r\nimport { environment } from '@env/environment';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class EmailService {\r\n\r\n  private _url = ''//`${environment.Setting.BaseAPIUrlLmk}/user/mailLogNotification`;\r\n  //private _urlmailpwd = `${environment.Setting.lmkwebrooturl}/user/mailLogNotification`;\r\n  constructor( private http: HttpClient,@Inject(DOCUMENT) private document ) {}\r\n\r\n  sendEmail(type: EmailType, user: UserProfile, data?: any) {\r\n    let TradingName:string='';\r\n    let MailKey:string;\r\n    if (type === 'Account Suspended') {\r\n      MailKey = 'Account_Suspended';\r\n    } else if(type === 'Account Reactivated') {\r\n     MailKey = 'Account_Activated'; \r\n    } else if (type === 'Nutrien Buyer Account Approved') {\r\n     MailKey = 'Account_Approved';\r\n     TradingName =data.sapNumber+'~'+data.tradingName;\r\n    } \r\n    else if (type === 'Password Updated') {\r\n      MailKey = 'Update_Password';\r\n    }\r\n    const email: Email = {\r\n      MailSubject: '',\r\n      MailBody: '',\r\n      MailFrom: '',     \r\n      MailTo: user.EmailAddress,\r\n      MailKey:MailKey,\r\n      TradingName:TradingName\r\n    };\r\n\r\n   if(type === 'Password Updated' ){\r\n     //const fullEmailHtmNuterien = templates.generateNuterienEmailHtml(emailBodyHtml,this.document.location.origin);\r\n    const emailNuterien: Email = {\r\n      MailSubject: '',\r\n      MailBody: '',\r\n      MailFrom:'no-reply@email.plasmacomp.com',\r\n     // MailFrom: 'E-Saleyard@landmark.com.au',\r\n      MailTo: user.EmailAddress,\r\n      MailKey:MailKey,\r\n      TradingName:TradingName\r\n    };\r\n    return this.http.post(this._url, emailNuterien, this._setHeadersforpwd());\r\n   }\r\n    return this.http.post(this._url, email, this._setHeaders());\r\n  }\r\n\r\n  private _setHeaders() {\r\n    const accessToken = localStorage.getItem('AccessToken');\r\n    return {\r\n      headers: new HttpHeaders({accessToken})\r\n    } \r\n  }\r\n  private _setHeadersforpwd() {\r\n    //let { accessToken } = this.auth.credentials.getValue();\r\n    let  accessToken =\"\";\r\n    if (!accessToken)\r\n      accessToken = environment.Setting.AdminViewAccessToken;\r\n\r\n    return {\r\n      headers: new HttpHeaders({accessToken})\r\n    };\r\n  }\r\n}\r\ntype EmailType =\r\n| 'Account Suspended'\r\n| 'Account Reactivated'\r\n| 'Nutrien Buyer Account Approved'\r\n| 'Buyer Account Reactivated'\r\n| 'Buyer Account Suspended'\r\n| 'Password Updated'\r\n", "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { User } from '../core/models/user';\r\n\r\n\r\n@Component({\r\n    selector: 'app-gateway-page',\r\n    templateUrl: './gateway-page.component.html',\r\n    styleUrls: ['./gateway-page.component.scss'],\r\n    standalone: true\r\n})\r\n\r\nexport class GatewayPageComponent implements OnInit {\r\n  private currentUserSubject: BehaviorSubject<User>;\r\n  public currentUser: Observable<User>;\r\n  samlData: any;\r\n\r\n  constructor(private routes: Router,\r\n    private route: ActivatedRoute) {\r\n\r\n    const AccessToken = localStorage.getItem('AccessToken');\r\n    if (AccessToken) {\r\n      const aToken = AccessToken.split('.');\r\n      const userDetail = atob(aToken[1]);\r\n      this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(userDetail));\r\n      this.currentUser = this.currentUserSubject.asObservable();\r\n    } else {\r\n      this.currentUserSubject = new BehaviorSubject<User>(null);\r\n      this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n    // this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\r\n    //this.currentUser = this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  public get currentUserValue(): User {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  async ngOnInit() {\r\n    var samlId = this.route.snapshot.queryParamMap.get('samlid');\r\n  }\r\n\r\n\r\n  goToLogin() {\r\n    this.routes.navigate(['/auth/login']);\r\n  }\r\n\r\n  gotoUnAuthorize() {\r\n    this.routes.navigate(['/unauthorized'])\r\n  }\r\n\r\n  getSamlResponse(data) {\r\n    if (data == true) {\r\n      this.routes.navigate(['/app_list']);\r\n    }\r\n    else {\r\n      this.gotoUnAuthorize();\r\n      localStorage.clear();\r\n      sessionStorage.clear();\r\n    }\r\n  }\r\n}\r\n", "<div class=\"img-container\">\r\n    <h1>Loading... </h1>\r\n    <img src=\"../../assets/styles/images/giphy.gif\" />\r\n</div>", "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-error',\r\n    templateUrl: './error.component.html',\r\n    styleUrls: ['./error.component.scss'],\r\n    standalone: true\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n", "<div class=\"not-found\">\r\n    <div class=\"p-sm-5 p-2\">\r\n        <h1 class=\"text-stroke text-transparent\">401</h1>\r\n        <h4>Unauthorized Access</h4> \r\n        <p>You have attempted to access a page for which you are not authorized.</p>\r\n    </div>\r\n</div>", "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthenticationService } from '@app/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-activate-account',\r\n    templateUrl: './activate-account.component.html',\r\n    styleUrls: ['./activate-account.component.scss'],\r\n    standalone: true\r\n})\r\nexport class ActivateAccountComponent implements OnInit {\r\n\r\n  constructor(private router_activate: ActivatedRoute,private registeruser:AuthenticationService, private toastr: ToastrService,private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    if(this.router_activate.snapshot.queryParamMap.get('email')&&this.router_activate.snapshot.queryParamMap.get('unlockcode')){\r\n     const email=this.router_activate.snapshot.queryParamMap.get('email');\r\n     const code=this.router_activate.snapshot.queryParamMap.get('unlockcode');   \r\n     const URL='/User/UnlockAccount?username='+email+'&unlockcode='+code;\r\n    //  this.registeruser.activateUser(URL).subscribe(data => {\r\n    //    this.toastr.success(data);\r\n    //    this.gotologin();\r\n    //  },\r\n    //   error => {}\r\n    //   );\r\n    }\r\n    else{\r\n      this.gotologin();\r\n    }\r\n  }\r\n  gotologin(){\r\n    this.router.navigateByUrl('/auth/login');\r\n  }\r\n}\r\n", "<div class=\"img-container\">\r\n    <h1>Loading... </h1>  \r\n    <img src=\"../../../../../assets/styles/images/giphy.gif\"/>\r\n</div>\r\n", "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthenticationService, MessageService } from '@app/core';\r\nimport { UserDetail } from '@app/core/models/user-detail';\r\n\r\n@Component({\r\n    selector: 'app-gate-way',\r\n    templateUrl: './gate-way.component.html',\r\n    styleUrls: ['./gate-way.component.scss'],\r\n    standalone: true\r\n})\r\nexport class GateWayComponent implements OnInit {\r\n\r\ngetwayId:any;\r\n constructor(private route:ActivatedRoute, private authService: AuthenticationService,\r\n  private readonly user: UserDetail,\r\n  private router: Router, private msg: MessageService,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.queryParams.subscribe(params => {\r\n      this.getwayId=params.returnId;\r\n      this.GetGatewayLogData(this.getwayId);\r\n    });\r\n  }\r\n  GetGatewayLogData(Id:string)\r\n  {\r\n    this.authService.getGetwayDetails(Id).subscribe(data=>{\r\n      if (data && data.accessToken) {\r\n          const aToken = data.accessToken.split('.');\r\n          const userDetail = JSON.parse(atob(aToken[1]));\r\n          const offset = new Date().getTimezoneOffset();\r\n          const currentUser =JSON.parse(userDetail.User);\r\n          currentUser.TimeZone = offset;\r\n          userDetail.User = JSON.stringify(currentUser);\r\n          localStorage.setItem('AccessToken', data.accessToken); \r\n          localStorage.setItem('loginType', \"normalUser\");\r\n          sessionStorage.setItem('processName',data.Result.AppName);\r\n          sessionStorage.setItem('AppName',data.Result.AppName);\r\n          sessionStorage.setItem('DisplayName', data.Result.DisplayName);\r\n          switch (data.Result.AppName) {\r\n            case 'Announcement':\r\n              this.router.navigate(['/announcement']);\r\n              break;\r\n            case 'QuickMind':\r\n              this.router.navigate(['/quickmindlist']);\r\n              break;\r\n            default:\r\n              if (data.Result.Type === 'bm') {\r\n                this.router.navigate(['/admin/bm']);\r\n              } else {\r\n                this.router.navigate(['/admin/wf']);\r\n              }\r\n          }\r\n    }}, error => {\r\n          this.router.navigate(['/auth/login']);   \r\n    },);\r\n  }\r\n\r\n}\r\n", "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { ResetPwdComponent } from './pages/reset-pwd/reset-pwd.component';\r\nimport { GatewayPageComponent } from '@app/gateway-page/gateway-page.component';\r\nimport { ErrorComponent } from './pages/error/error.component';\r\nimport { ActivateAccountComponent } from './pages/activate-account/activate-account.component';\r\nimport { GateWayComponent } from './pages/gate-way/gate-way.component';\r\n\r\nconst routes: Routes = [\r\n  //{ path: '', redirectTo: '/auth/login', pathMatch: 'full' },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'reset-password', component: ResetPwdComponent },\r\n  { path: 'gateway', component: GatewayPageComponent, pathMatch: 'full' },\r\n  { path: 'error', component: ErrorComponent },\r\n  { path: 'activate-account', component: ActivateAccountComponent },\r\n  {path:'Gateway',component:GateWayComponent,pathMatch:'full'}\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@app/shared';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { ResetPwdComponent } from './pages/reset-pwd/reset-pwd.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { GatewayPageComponent } from '@app/gateway-page/gateway-page.component';\r\nimport { ErrorComponent } from './pages/error/error.component';\r\nimport { ActivateAccountComponent } from './pages/activate-account/activate-account.component';\r\nimport { GateWayComponent } from './pages/gate-way/gate-way.component';\r\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\r\n\r\n@NgModule({\r\n    imports: [\r\n        SharedModule,\r\n        AuthRoutingModule,\r\n        LoginComponent, ResetPwdComponent,\r\n        GatewayPageComponent,\r\n        ErrorComponent,\r\n        ActivateAccountComponent,\r\n        GateWayComponent\r\n    ],\r\n    providers: [provideHttpClient(withInterceptorsFromDi())]\r\n})\r\nexport class AuthModule { }\r\n"],
  "mappings": "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",
  "names": ["_c0", "routes"]
}
