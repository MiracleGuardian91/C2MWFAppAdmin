{
  "version": 3,
  "sources": ["src/app/admin/core/services/api.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { environment } from '@env/environment';\r\nimport { SimpleLoaderService } from '@app/shared/services/simple-loader.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  endpoint = environment.Setting.BaseAPIUrl;\r\n  // changes by Harshit\r\n  GatewayAPIUrl = environment.Setting.GatewayAPIUrl;\r\n  // changes by harshit\r\n  constructor(private http: HttpClient, private simpleLoader: SimpleLoaderService) { }\r\n\r\n  setHeaders(parameters?: any) {    \r\n    let processName = null;\r\n    if (parameters && parameters.ProcessName) {\r\n      processName = parameters.ProcessName;\r\n    } else {\r\n      processName = sessionStorage.getItem('AppName');\r\n    }\r\n\r\n    let headers =  new HttpHeaders();\r\n    const accessToken = localStorage.getItem('AccessToken');\r\n    if(!headers.has('AccessToken') && accessToken){\r\n        headers = headers.set('AccessToken', accessToken);\r\n      }\r\n      \r\n    if (processName != null) {\r\n      headers.set('processName', processName);\r\n    } \r\n    // else{\r\n    //   //resolved Raygun Error\r\n    //   if(accessToken !== null){\r\n    //     headers = new HttpHeaders({ accessToken });\r\n    //   }      \r\n    // }\r\n\r\n    return headers;\r\n  }\r\n\r\n  setParams(parameters) {\r\n    let params = new HttpParams();\r\n    if (parameters) {\r\n      for (const i in parameters) {\r\n        if (parameters[i] != null) {\r\n          params = params.append(i, parameters[i]);\r\n        }\r\n      }\r\n    }\r\n    return params;\r\n  }\r\n\r\n  get(url: string, parameters?: any): Observable<any> {\r\n    const fullUrl = `${this.endpoint}/${url}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders(parameters);\r\n    const params = this.setParams(parameters);\r\n    \r\n    const request$ = this.http.get<any>(`${this.endpoint}/${url}`, { headers, params });\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n get_gateway(url: string, parameters?: any): Observable<any> {\r\n    const fullUrl = `${this.GatewayAPIUrl}/${url}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders(parameters);\r\n    const params = this.setParams(parameters);\r\n    \r\n    const request$ = this.http.get<any>(`${this.GatewayAPIUrl}/${url}`, { headers, params });\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n async postAdvanceSearch(url: string, data: any,  parameters?: any){    \r\n    const httpAllOptions = { headers: new HttpHeaders({ \"AccessToken\":localStorage.getItem('AccessToken'),\"Content-Type\":\"application/json\" }) }     \r\n    return await  this.http.post(`${url}`, data, httpAllOptions).toPromise().catch(this.handleError);\r\n  }\r\n\r\n  handleError(error) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n        //client side error\r\n        errorMessage = `Error: ${error.error.message}`;\r\n    }\r\n    else {\r\n        // server-side error\r\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    //window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n}\r\n\r\n post1(url: string, data: any, parameters?: any): Observable<any> {\r\n    const fullUrl = `${this.endpoint}/${url}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders(data);\r\n    const params = this.setParams(parameters);\r\n    \r\n    const request$ = this.http.post<any>(`${this.endpoint}/${url}`, data, { headers, params });\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n\r\n  post(url: string, data: any, parameters?: any,isV3?): Observable<any> {\r\n    const fullUrl = `${this.endpoint}/${url}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders(data);\r\n    const params = this.setParams(parameters);\r\n    if(isV3){\r\n      this.endpoint=this.endpoint.replace('v2','v3');\r\n    }\r\n    else{\r\n      this.endpoint=this.endpoint.replace('v3','v2');\r\n    }\r\n    \r\n    const request$ = this.http.post<any>(`${this.endpoint}/${url}`, data, { headers, params });\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n  post_gateway(url: string, data: any, parameters?: any): Observable<any> {\r\n    const fullUrl = `${this.GatewayAPIUrl}/${url}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders(parameters);\r\n    const params = this.setParams(parameters);\r\n    \r\n    const request$ = this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, data, { headers, params });\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n   postgateway(endPoint: string, url: string, data: any, parameters?: any): Observable<any> {\r\n    const fullUrl = endPoint != null && endPoint != \"\" ? `${endPoint}/${url}` : `${this.GatewayAPIUrl}/${url}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders(data);\r\n    const params = this.setParams(parameters);\r\n    \r\n    const request$ = endPoint != null && endPoint != \"\"\r\n      ? this.http.post<any>(`${endPoint}/${url}`, data, { headers, params })\r\n      : this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, data, { headers, params });\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  postGetFile(url: string, data: any, resultType: any): Observable<any> {\r\n    const Headers = this.setHeaders();\r\n    return this.http.post<any>(`${this.endpoint}/${url}`, data, { headers: Headers, responseType: resultType });\r\n  }\r\n   postGetFile_Gateway(url: string, data: any, resultType: any): Observable<any> {\r\n    const Headers = this.setHeaders();\r\n    return this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, data, { headers: Headers, responseType: resultType });\r\n  }\r\n\r\n\r\n  postGetFileWithEndPoint(url: string, data: any, resultType: any): Observable<any> {\r\n    const Headers = this.setHeaders();\r\n    return this.http.post<any>(url, data, { headers: Headers, responseType: resultType });\r\n  }\r\n  put(url: string, data: any): Observable<any> {\r\n    const fullUrl = `${this.endpoint}/${url}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders();\r\n    const request$ = this.http.put<any>(`${this.endpoint}/${url}`, data, {headers});\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n\r\n  update(url: string, objectId: string, data: any): Observable<any> {\r\n    const fullUrl = `${this.endpoint}/${url}/${objectId}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders();\r\n    const request$ = this.http.patch<any>(`${this.endpoint}/${url}/${objectId}`, data, {headers});\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n\r\n  delete(url: string, objectId: string): Observable<any> {\r\n    const fullUrl = `${this.endpoint}/${url}/${objectId}`;\r\n    this.simpleLoader.show(fullUrl,true);\r\n    \r\n    const headers = this.setHeaders();\r\n    const request$ = this.http.delete(`${this.endpoint}/${url}/${objectId}`, {headers});\r\n    const minDelay$ = new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    return request$.pipe(\r\n      finalize(async () => {\r\n        await minDelay$;\r\n        this.simpleLoader.hide();\r\n      })\r\n    );\r\n  }\r\n  deleteGrid(url: string): Observable<any> {\r\n    const headers = this.setHeaders();\r\n    return this.http.delete(`${this.endpoint}/${url}`, {headers}).pipe();\r\n  }\r\n  \r\n deleteViaGateway(url: string): Observable<any> {\r\n  const headers = this.setHeaders();\r\n  return this.http.delete(`${this.GatewayAPIUrl}/${url}`, { headers });\r\n}\r\n\r\n  UploadFile(url: string, formData: FormData): Observable<any> {\r\n    let query = {\r\n      ProcessName: formData.get('processName')\r\n    }\r\n    const Headers = this.setHeaders(query);\r\n    return this.http.post<any>(`${this.endpoint}/${url}`, formData, { headers: Headers });\r\n  }\r\n\r\n  UploadFileGateway(url: string, formData: FormData): Observable<any> {\r\n    let query = {\r\n      ProcessName: formData.get('processName')\r\n    }\r\n    const Headers = this.setHeaders(query);\r\n    return this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, formData, { headers: Headers });\r\n  }\r\n\r\n  DeleteFile(url: string, formData: FormData): Observable<any> {\r\n    const Headers = this.setHeaders();\r\n    return this.http.post<any>(`${this.endpoint}/${url}`, formData, { headers: Headers });\r\n  }\r\n\r\n  downloadfile(url: string, formData: FormData, resultType: any): Observable<any> {\r\n    const Headers = this.setHeaders();\r\n    //Headers['Content-Type'] = 'application/octet-stream';\r\n\r\n    return this.http.post<any>(`${this.endpoint}/${url}`, formData, { headers: Headers, responseType: resultType });\r\n  }\r\n  getProcessData() {\r\n    return this.get(`application/processList`);\r\n  }\r\n   // changes By Harshit\r\n\r\n  ImportBM(url: string, data: any): Observable<any> {\r\n    \r\n    const httpAllOptions = { headers: new HttpHeaders({ \"AccessToken\":localStorage.getItem('AccessToken'),\"Content-Type\":\"application/json\" }) }     \r\n    return this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, data, httpAllOptions);\r\n  }\r\n  ImportWF(url: string, data: any): Observable<any> {\r\n    \r\n    const httpAllOptions = { headers: new HttpHeaders({ \"AccessToken\":localStorage.getItem('AccessToken'),\"Content-Type\":\"application/json\" }) }     \r\n    return this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, data, httpAllOptions);\r\n  }\r\n\r\n  getGateway(url: string, parameters?: any): Observable<any> {\r\n     const headers = this.setHeaders(parameters);\r\n    const params = this.setParams(parameters);\r\n    return this.http.get<any>(`${this.GatewayAPIUrl}/${url}`, { headers, params });\r\n  }\r\n  postGatway(url: string, data: any, parameters?: any, isV3?): Observable<any> {\r\n\r\n    const headers = this.setHeaders(data);\r\n    const params = this.setParams(parameters);\r\n    return this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, data, { headers, params });\r\n  }\r\n  postGetFileGateway(url: string, data: any, resultType: any): Observable<any> {\r\n    const Headers = this.setHeaders();\r\n    return this.http.post<any>(`${this.GatewayAPIUrl}/${url}`, data, { headers: Headers, responseType: resultType });\r\n  }\r\n  deleteGridGateway(url: string): Observable<any> {\r\n    const headers = this.setHeaders();\r\n    return this.http.delete(`${this.GatewayAPIUrl}/${url}`, { headers }).pipe();\r\n  }\r\n\r\n  \r\n  // changes By Harshit\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
