import {
  DMOS,
  MatInput,
  MatSelect
} from "./chunk-W7MRP3RE.js";
import {
  BmEntryComponent
} from "./chunk-F52WDQUI.js";
import {
  NAME_VALIDATORS
} from "./chunk-IZC66MGR.js";
import {
  CdkAccordionModule,
  MatExpansionPanel,
  MatExpansionPanelHeader
} from "./chunk-LNAQ2UNQ.js";
import {
  ObjectControlModule
} from "./chunk-XJNJIFSZ.js";
import {
  ServiceProviderService,
  SharedModule,
  TabComponent,
  TabsComponent
} from "./chunk-AVHCICF3.js";
import {
  BmService
} from "./chunk-C5NFJAYY.js";
import {
  CompanyAssociationComponent,
  FormViewApiService,
  GenerateXmlComponent,
  MatDialog
} from "./chunk-NIXK6VWY.js";
import "./chunk-AZ2LSUZA.js";
import {
  ListColumnType,
  MatRadioButton,
  ObjectControlComponent
} from "./chunk-FKDZX6HV.js";
import {
  AssociationComponent,
  BaseHttpService,
  arrayToList,
  enumToList,
  listToTypeArray,
  nameToGuid,
  primitiveArrayToList,
  require_lodash,
  toFormArray,
  toFormGroup
} from "./chunk-BQKXR4UC.js";
import {
  MatAutocomplete,
  SharedResizeObserver
} from "./chunk-B4CPBYGG.js";
import "./chunk-Y5HOE45L.js";
import "./chunk-ILK2XUKT.js";
import "./chunk-FRU5HPWK.js";
import "./chunk-RBJWRETV.js";
import {
  CdkDragHandle,
  DragDropModule,
  moveItemInArray,
  transferArrayItem
} from "./chunk-WACMUXJB.js";
import {
  CdkMonitorFocus,
  CdkObserveContent,
  CdkPortal,
  CdkPortalOutlet,
  CdkScrollable,
  CdkScrollableModule,
  DOWN_ARROW,
  Directionality,
  DomPortalOutlet,
  ENTER,
  ESCAPE,
  FocusKeyManager,
  FocusMonitor,
  LEFT_ARROW,
  MAT_RIPPLE_GLOBAL_OPTIONS,
  MatCommonModule,
  MatRipple,
  MatRippleModule,
  Overlay,
  OverlayConfig,
  OverlayModule,
  Platform,
  RIGHT_ARROW,
  SPACE,
  TemplatePortal,
  UP_ARROW,
  ViewportRuler,
  hasModifierKey,
  isFakeMousedownFromScreenReader,
  isFakeTouchstartFromScreenReader,
  normalizePassiveListenerOptions
} from "./chunk-5GIB77BJ.js";
import {
  ApiService,
  DmoImageControlService,
  MessageService,
  NgbDateFRParserFormatter
} from "./chunk-43FCU5DY.js";
import "./chunk-U3QHRRQH.js";
import {
  ApiService as ApiService2
} from "./chunk-WGZX6A37.js";
import {
  CheckboxControlValueAccessor,
  DefaultValueAccessor,
  FormGroupDirective,
  FormsModule,
  NgControlStatus,
  NgControlStatusGroup,
  NgLabelTemplateDirective,
  NgModel,
  NgOptionComponent,
  NgOptionTemplateDirective,
  NgSelectComponent,
  NgSelectModule,
  NgSelectOption,
  NgbActiveModal,
  NgbDateParserFormatter,
  NgbDropdown,
  NgbDropdownItem,
  NgbDropdownMenu,
  NgbDropdownToggle,
  NgbInputDatepicker,
  NgbModal,
  NgbProgressbar,
  NgbTooltip,
  NumberValueAccessor,
  RangeValueAccessor,
  ReactiveFormsModule,
  SelectControlValueAccessor,
  ToastrService,
  UntypedFormBuilder,
  UtilService,
  Validators,
  animate,
  environment,
  state,
  style,
  transition,
  trigger,
  ɵNgNoValidate,
  ɵNgSelectMultipleOption
} from "./chunk-L2L6ECIJ.js";
import {
  ANIMATION_MODULE_TYPE,
  ActivatedRoute,
  ApplicationRef,
  AsyncPipe,
  Attribute,
  BehaviorSubject,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  CommonModule,
  Component,
  ComponentFactoryResolver$1,
  ContentChild,
  ContentChildren,
  DOCUMENT,
  Directive,
  EMPTY,
  ElementRef,
  EventEmitter,
  Inject,
  InjectionToken,
  Injector,
  Input,
  NgClass,
  NgForOf,
  NgIf,
  NgModule,
  NgStyle,
  NgSwitch,
  NgSwitchCase,
  NgSwitchDefault,
  NgTemplateOutlet,
  NgZone,
  Observable,
  Optional,
  Output,
  QueryList,
  Renderer2,
  RouterModule,
  Self,
  SlicePipe,
  Subject,
  Subscription,
  TemplateRef,
  UpperCasePipe,
  ViewChild,
  ViewContainerRef,
  ViewEncapsulation$1,
  __decorate,
  afterNextRender,
  asapScheduler,
  booleanAttribute,
  catchError,
  debounceTime,
  delay,
  filter,
  finalize,
  firstValueFrom,
  forkJoin,
  forwardRef,
  from,
  fromEvent,
  inject,
  lastValueFrom,
  map,
  merge,
  mergeAll,
  numberAttribute,
  of,
  setClassMetadata,
  shareReplay,
  skip,
  startWith,
  switchMap,
  take,
  takeUntil,
  takeWhile,
  tap,
  timer,
  ɵsetClassDebugInfo,
  ɵɵInheritDefinitionFeature,
  ɵɵInputTransformsFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵStandaloneFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassMapInterpolate1,
  ɵɵclassProp,
  ɵɵconditional,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵgetInheritedFactory,
  ɵɵinjectAttribute,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnamespaceHTML,
  ɵɵnamespaceSVG,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵpipeBind2,
  ɵɵpipeBind3,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpropertyInterpolate1,
  ɵɵpropertyInterpolate2,
  ɵɵpropertyInterpolate3,
  ɵɵpropertyInterpolate4,
  ɵɵpropertyInterpolate5,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵpureFunction3,
  ɵɵpureFunction4,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵrepeater,
  ɵɵrepeaterCreate,
  ɵɵrepeaterTrackByIdentity,
  ɵɵresetView,
  ɵɵresolveDocument,
  ɵɵresolveWindow,
  ɵɵrestoreView,
  ɵɵsanitizeUrl,
  ɵɵstyleProp,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵtwoWayBindingSet,
  ɵɵtwoWayListener,
  ɵɵtwoWayProperty,
  ɵɵviewQuery
} from "./chunk-ZQT4GMOS.js";
import {
  __async,
  __objRest,
  __spreadProps,
  __spreadValues,
  __toESM
} from "./chunk-N6ESDQJH.js";

// src/app/admin/data-modeler1/classes/base-object.class.ts
var BaseObject = class {
  constructor(obj = {}, parent) {
    this.parent = parent;
    this.id = obj.id || "";
    this.Name = obj.Name || "";
    this.Version = obj.Version || parent?.Version || "";
    this.Children = obj.Children || [];
    this.Status = obj.Status || "0";
    this.childrenMap = {};
  }
  getChild(guid) {
    return this.childrenMap[guid];
  }
  addChild(child) {
    if (!this.Children.includes(child.id)) {
      this.Children.push(child.id);
    }
    this.childrenMap[child.id] = child;
  }
  addChildAt(child, index) {
    if (!this.Children.includes(child.id)) {
      this.Children = this.Children.slice(0, index).concat(child.id, this.Children.slice(index));
    }
    this.childrenMap[child.id] = child;
  }
  removeChild(id) {
    this.Children = this.Children.filter((cid) => cid !== id);
    delete this.childrenMap[id];
  }
  update(obj = {}) {
    Object.entries(obj).forEach(([key, value]) => {
      this[key] = value;
    });
  }
  unreference() {
    const _a = this, { childrenMap, parent, root } = _a, rest = __objRest(_a, ["childrenMap", "parent", "root"]);
    if ("DMOGID" in this) {
      delete rest["formData"];
      delete rest["Children"];
      delete rest["Roles"];
    }
    return rest;
  }
};

// src/app/admin/data-modeler1/classes/bmo.class.ts
var BMO = class extends BaseObject {
  constructor(obj, parent) {
    super(obj, parent);
    this.BMOID = obj.BMOID;
    this.DisplayName = obj.DisplayName;
    this.ShortDesc = obj.ShortDesc;
    this.LongDesc = obj.LongDesc;
    this.Parent = obj.Parent || parent.id;
    this.Share = obj.Share || [];
    this.GUID = obj.GUID;
    this.BmoType = obj.BmoType;
    this.SubProcessId = obj.SubProcessId;
    this.ChildProcessId = obj.ChildProcessId;
    this.ParentProcessDmoGuid = obj.ParentProcessDmoGuid;
    this.ChildProcessDmoGuid = obj.ChildProcessDmoGuid;
    this.root = parent.parent;
  }
  get shared() {
    return this.parent.Share.some(({ value }) => value === this.id);
  }
};

// src/app/admin/data-modeler1/classes/bmog.class.ts
var BMOG = class extends BaseObject {
  constructor(obj, parent) {
    super(obj, parent);
    this.BMOGID = obj.BMOGID;
    this.CanvasType = obj.CanvasType;
    this.LongDesc = obj.LongDesc;
    this.Parent = obj.Parent || parent.id;
    this.Share = obj.Share || [];
    this.root = parent;
    this.EnableTLCorner = obj.EnableTLCorner;
  }
};

// src/app/admin/data-modeler1/classes/dm-component.class.ts
var import_lodash = __toESM(require_lodash());

// src/app/admin/data-modeler1/models1/dmog.model.ts
var DMOGType;
(function(DMOGType2) {
  DMOGType2["Standard"] = "Normal";
  DMOGType2["Grid"] = "Grid";
  DMOGType2["CardGroup"] = "CardGroup";
})(DMOGType || (DMOGType = {}));

// src/app/admin/data-modeler1/models1/bmo.model.ts
var BMOType;
(function(BMOType2) {
  BMOType2["Form"] = "Forms";
  BMOType2["Contact"] = "Contacts";
  BMOType2["Attachment"] = "Attachments";
  BMOType2["Document"] = "Documents";
  BMOType2["SubProcess"] = "Subprocess";
  BMOType2["ChildProcess"] = "ChildProcess";
})(BMOType || (BMOType = {}));
var FormBmoType;
(function(FormBmoType2) {
  FormBmoType2["Form"] = "Forms";
})(FormBmoType || (FormBmoType = {}));

// src/app/admin/data-modeler1/models1/bmog.model.ts
var CanvasType;
(function(CanvasType2) {
  CanvasType2["Admin"] = "AdminView";
  CanvasType2["Form"] = "Form";
  CanvasType2["User"] = "UserView";
  CanvasType2["View1"] = "View1";
  CanvasType2["View2"] = "View2";
  CanvasType2["View3"] = "View3";
  CanvasType2["View4"] = "View4";
  CanvasType2["View5"] = "View5";
  CanvasType2["View6"] = "View6";
})(CanvasType || (CanvasType = {}));
var EnableTLCorner;
(function(EnableTLCorner2) {
  EnableTLCorner2["Yes"] = "1";
  EnableTLCorner2["No"] = "0";
})(EnableTLCorner || (EnableTLCorner = {}));
var canvasType = {
  "Admin View": CanvasType.Admin,
  "Form View": CanvasType.Form,
  "User View": CanvasType.User,
  "View 1": CanvasType.View1,
  "View 2": CanvasType.View2,
  "View 3": CanvasType.View3,
  "View 4": CanvasType.View4,
  "View 5": CanvasType.View5,
  "View 6": CanvasType.View6
};

// src/app/admin/data-modeler1/models1/formio.model.ts
var MethodTypes;
(function(MethodTypes2) {
  MethodTypes2["GET"] = "GET";
  MethodTypes2["POST"] = "POST";
})(MethodTypes || (MethodTypes = {}));
var GridViewDataSource;
(function(GridViewDataSource2) {
  GridViewDataSource2["WFApi"] = "wf_apigetdata";
  GridViewDataSource2["WFApiGateway"] = "wf_apigateway";
  GridViewDataSource2["CustomApi"] = "customapi";
})(GridViewDataSource || (GridViewDataSource = {}));
var DataSource;
(function(DataSource2) {
  DataSource2["Values"] = "values";
  DataSource2["WFApi"] = "wfapigetdata";
})(DataSource || (DataSource = {}));
var CustomDataSource;
(function(CustomDataSource2) {
  CustomDataSource2["Country"] = "wf_GetCountry";
  CustomDataSource2["State"] = "wf_GetState";
  CustomDataSource2["City"] = "wf_GetCity";
  CustomDataSource2["UserByRole"] = "WF_API_ROLECONTROLUSER";
})(CustomDataSource || (CustomDataSource = {}));
var RegExType;
(function(RegExType2) {
  RegExType2["Alphabetic"] = "alphabates";
  RegExType2["Alphanumeric"] = "alphanumeric";
  RegExType2["Integer"] = "integer";
  RegExType2["Float"] = "float";
  RegExType2["Percent"] = "percent";
  RegExType2["Dollar"] = "dollar";
  RegExType2["Custom"] = "custom";
})(RegExType || (RegExType = {}));
var StorageProvider;
(function(StorageProvider2) {
  StorageProvider2["Base64"] = "base64";
  StorageProvider2["Dropbox"] = "dropbox";
  StorageProvider2["S3"] = "s3";
  StorageProvider2["Url"] = "url";
  StorageProvider2["Azure"] = "azurefileservices";
})(StorageProvider || (StorageProvider = {}));

// src/app/admin/data-modeler1/models1/object-detail.class.ts
var ObjectDetail = class _ObjectDetail {
  get f() {
    return this.form.controls;
  }
  constructor(ref, fb) {
    this.ref = ref;
    this.fb = fb;
    this.formActions = [];
    this.output = new EventEmitter();
    this.submitted = false;
    this.newObject = false;
    this.componentActive = true;
  }
  ngOnInit() {
    this.beforeFormInit();
    this.initForm();
  }
  ngAfterViewInit() {
    this.initFormActions();
    this.afterFormInit();
  }
  initFormActions() {
    this.formActions.forEach((action) => {
      this.form.get(action.controlName).valueChanges.pipe(takeWhile((_) => this.componentActive)).subscribe((val) => action.handler(val));
    });
  }
  beforeFormInit() {
  }
  initForm() {
  }
  afterFormInit() {
  }
  onCancel() {
    this.ref.close();
  }
  onSubmit() {
  }
  ngOnDestroy() {
    this.componentActive = false;
  }
  static {
    this.\u0275fac = function ObjectDetail_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ObjectDetail)(\u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(UntypedFormBuilder));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({ type: _ObjectDetail, inputs: { title: "title", data: "data", dmr: "dmr", parent: "parent", formActions: "formActions" }, outputs: { output: "output" } });
  }
};

// src/app/admin/data-modeler1/models1/condition.model.ts
var ActionState;
(function(ActionState2) {
  ActionState2[ActionState2["No"] = 0] = "No";
  ActionState2[ActionState2["Yes"] = 1] = "Yes";
  ActionState2[ActionState2["NA"] = 2] = "NA";
})(ActionState || (ActionState = {}));

// src/app/admin/data-modeler1/models1/status.model.ts
var Status;
(function(Status2) {
  Status2["Active"] = "1";
  Status2["Inactive"] = "0";
})(Status || (Status = {}));
var DMOStatus;
(function(DMOStatus2) {
  DMOStatus2["Active"] = "1";
  DMOStatus2["Inactive"] = "2";
})(DMOStatus || (DMOStatus = {}));
var NotificationOption;
(function(NotificationOption2) {
  NotificationOption2[NotificationOption2["None"] = 0] = "None";
  NotificationOption2[NotificationOption2["Custom_Notification"] = 1] = "Custom_Notification";
})(NotificationOption || (NotificationOption = {}));

// src/app/admin/data-modeler1/classes/dm-component.class.ts
var DMComponent = class _DMComponent {
  get shared() {
    return this.parent.Share.some(({ value }) => value === this.guid);
  }
  constructor(obj = {}, parent) {
    this.parent = parent;
    this.rte = false;
    this._protected = false;
    this.parentDmo = null;
    this.authenticate = false;
    this.allowCalculateOverride = false;
    this.allowInput = false;
    this.autoAdjust = false;
    this.autofocus = false;
    this.calculateValue = "";
    this.clearOnHide = false;
    this.clearOnRefresh = false;
    this.clonedIndex = 0;
    this.fromApi = true;
    this.column = 0;
    this.comparatorSelect = null;
    this.compareOprator = null;
    this.conditional = { show: null, when: null, eq: "" };
    this.conditionNA = false;
    this.conditions = [];
    this.customClass = "";
    this.customDefaultValue = "";
    this.dataGridLabel = false;
    this.dataSrc = DataSource.Values;
    this.dbIndex = false;
    this.default_Value = "";
    this.defaultValue = "";
    this.description = "";
    this.dmoName = null;
    this.dmoId = null;
    this.enableDate = false;
    this.enableTime = false;
    this.errorLabel = "";
    this.expression = "";
    this.expressionMessage = "";
    this.fieldSet = false;
    this.hideChild = false;
    this.id = (0, import_lodash.uniqueId)();
    this.image = false;
    this.inline = false;
    this.input = true;
    this.inputType = null;
    this.is24hourformat = false;
    this.isalphanumeric = false;
    this.isautoCrop = false;
    this.isEncrypt = false;
    this.israndom = false;
    this.key = null;
    this.label = null;
    this.labelMargin = 3;
    this.labelPosition = "top";
    this.labelWidth = 30;
    this.mask = false;
    this.minlength = "";
    this.minSearch = 0;
    this.multiple = false;
    this.persistent = false;
    this.placeholder = "";
    this.prefix = "";
    this.protected = false;
    this.RangeCal = null;
    this.regxType = null;
    this.refreshOn = "";
    this.searchEnabled = false;
    this.searchField = "";
    this.selectFields = "";
    this.showtooltip = false;
    this.startwith = null;
    this.status = Status.Active;
    this.suffix = "";
    this.tabindex = "";
    this.tableView = true;
    this.theme = "info";
    this.tooltip = "";
    this.tree = false;
    this.type = null;
    this.unique = false;
    this.uploadLimit = null;
    this.uploadOnly = false;
    this.useLocaleSettings = false;
    this.validateOn = "change";
    this.values = [];
    this.widget = null;
    this.data = {
      values: [],
      json: [],
      url: "",
      headers: [],
      resource: "",
      custom: "",
      apiparams: null,
      apiurl: null,
      fieldparams: null,
      endpoint: null,
      methodtype: null,
      toggledepmapper: false,
      dependentdatasrc: null,
      dependentbody: null,
      modelbody: null,
      datasource: null,
      mappings: [],
      emitonstart: false,
      dependencydmos: [],
      dependentdmos: [],
      kvboxmultiselect: false
    };
    this.validate = {
      required: false,
      customPrivate: false,
      maxLength: "",
      disabled: false,
      custom: "",
      maxWords: null,
      minLength: "",
      minWords: null,
      pattern: null
    };
    Object.entries(obj).forEach(([key, value]) => {
      if (value && typeof value === "object" && !Array.isArray(value)) {
        Object.entries(value).forEach(([k, v]) => {
          if (!this[key])
            this[key] = {};
          this[key][k] = obj[key] && obj[key][k] ? obj[key][k] : v;
        });
      } else {
        this[key] = obj[key] ?? this[key];
      }
    });
    this.guid = obj.guid;
  }
  clone() {
    const cloned = new _DMComponent(this, this.parent);
    cloned.label = cloned.label + ` Copy ${this.clonedIndex}`;
    cloned.dmoName = `${cloned.dmoName}_copy_${this.clonedIndex}`;
    cloned.id = `${cloned.id}${this.clonedIndex}`;
    cloned.clonedIndex = 0;
    cloned.fromApi = false;
    cloned.guid = this.guid + `clone + ${this.clonedIndex}`;
    this.clonedIndex++;
    return cloned;
  }
  asObject() {
    const _a = this, { conditions, parent, clonedIndex } = _a, rest = __objRest(_a, ["conditions", "parent", "clonedIndex"]);
    return rest;
  }
  dmoListByType(type) {
    const list = [];
    Object.values(this.parent.root.childrenMap).flatMap((bmog) => Object.values(bmog.childrenMap)).flatMap((bmo) => Object.values(bmo.childrenMap)).flatMap((dmog) => Object.values(dmog.childrenMap)).forEach((dmo) => {
      if (type) {
        if (dmo.type === type && dmo.dmoName !== this.dmoName) {
          list.push({
            key: dmo.guid,
            value: dmo.label,
            parent: dmo.parent.DisplayName
          });
        }
      } else {
        if (!list.some((lst) => lst.key === dmo.guid))
          list.push({
            key: dmo.guid,
            value: dmo.label,
            parent: dmo.parent.DisplayName
          });
      }
    });
    return list;
  }
  addCondition(condition) {
    this.conditions.push(condition);
  }
};

// src/app/admin/data-modeler1/classes/dmog.class.ts
var DMOG = class extends BaseObject {
  constructor(obj, parent) {
    super(obj, parent);
    this.childrenMap = {};
    this.GUID = obj.GUID;
    this.DMOGID = obj.DMOGID;
    this.DisplayName = obj.DisplayName;
    this.IsCollapsed = obj.IsCollapsed;
    this.DefCollapsed = obj.DefCollapsed;
    this.showHelp = obj.showHelp;
    this.LongDesc = obj.LongDesc;
    this.Parent = obj.Parent || parent.id;
    this.Type = obj.Type;
    this.Share = obj.Share || [];
    this.LnkBmoDmogID = obj.LnkBmoDmogID;
    this.IsHidden = obj.IsHidden;
    this.Children = obj.Children || [];
    this.Roles = obj.Roles || [];
    this.root = parent.parent.parent;
    this.formData = this.generateFormDataBoilerplate();
    this.DMOGProps = obj.DMOGProps;
    this.PrntDmogIDs = obj.PrntDmogIDs;
  }
  get shared() {
    return this.parent.Share.some(({ value }) => value === this.id);
  }
  addFormData(formData) {
    if (formData?.components?.length > 0) {
      this.formData = formData;
    }
  }
  addChild(child) {
    if (!this.Children.includes(child.dmoName)) {
      this.Children.push(child.dmoName);
    }
    this.childrenMap[child.dmoName] = child;
  }
  removeChild(name) {
    this.Children = this.Children.filter((c) => c !== name);
    delete this.childrenMap[name];
  }
  getChild(name) {
    return this.childrenMap[name];
  }
  findDmo(name) {
    if (!name)
      return null;
    const rows = this.formData.components;
    for (let i = 0; i < rows.length; i++) {
      const dmo = rows[i];
      if (dmo.dmoName === name) {
        return {
          rowIndex: i,
          columnIndex: i,
          dmoIndex: i,
          dmo
        };
      }
    }
    return null;
  }
  findDmoAndThen(name, cb) {
    const child = this.findDmo(name);
    cb(child || null);
    return child;
  }
  update(obj = {}) {
    Object.entries(obj).forEach(([key, value]) => {
      this[key] = value;
    });
  }
  generateFormDataBoilerplate() {
    return {
      display: "form",
      // ROWS
      components: [
        {
          input: false,
          key: "columns",
          label: "Columns",
          type: "columns",
          // COLUMNS
          columns: [
            {
              // DMOS
              components: [],
              width: 50,
              offset: 0,
              push: 0,
              pull: 0,
              type: "column",
              input: true,
              key: "column1",
              hideOnChildrenHidden: false,
              tableView: true
            },
            {
              components: [],
              width: 50,
              offset: 0,
              push: 0,
              pull: 0,
              type: "column",
              input: true,
              key: "column2",
              hideOnChildrenHidden: false,
              tableView: true
            }
          ],
          tableView: false,
          dataSrc: 2,
          columns1: [
            {
              width: 50
            },
            {
              width: 50
            }
          ]
        }
      ],
      _id: this.id
    };
  }
};

// src/app/admin/data-modeler1/classes/bm.class.ts
var BM = class _BM extends BaseObject {
  get selectedBMOG() {
    return this._selectedBMOG;
  }
  set selectedBMOG(bmog) {
    this._selectedBMOG = bmog;
  }
  get selectedBMO() {
    return this._selectedBMO;
  }
  set selectedBMO(bmo) {
    this._selectedBMO = bmo;
  }
  get selectedDMOG() {
    return this._selectedDMOG;
  }
  set selectedDMOG(bmo) {
    this._selectedDMOG = bmo;
  }
  constructor(obj, parent) {
    super(obj, parent);
    this.DisplayName = obj.DisplayName;
    this.Mode = obj.Mode;
    this.IntegrateWorkspace = obj.IntegrateWorkspace || "0";
    this.Description = obj.Description;
    this.BMId = obj.BMId;
    this.Share = obj.Share || [];
    this.ProcessName = obj.ProcessName;
    this.Status = obj.Status || "0";
    this.EnableLoad = obj.EnableLoad;
    this.ProcessId = obj.ProcessId;
    this.TypeId = obj.TypeId;
    this.root = this;
  }
  get published() {
    return this.Mode === "Published";
  }
  get payload() {
    const _a = this, { childrenMap, _selectedBMO, _selectedBMOG, _selectedDMOG, root } = _a, rest = __objRest(_a, ["childrenMap", "_selectedBMO", "_selectedBMOG", "_selectedDMOG", "root"]);
    const bmog = this.unreferenceChildren(childrenMap);
    const bmo = {};
    const dmog = {};
    const dmo = {};
    Object.values(this.childrenMap).forEach((bmog2) => {
      Object.entries(bmog2.childrenMap).forEach(([id, bmoClass]) => {
        bmo[id] = bmoClass.unreference();
        Object.entries(bmoClass.childrenMap).forEach(([id2, dmogClass]) => {
          dmo[id2] = dmogClass.formData;
          dmog[id2] = dmogClass.unreference();
        });
      });
    });
    if (_selectedDMOG?.formData) {
      dmo[_selectedDMOG.id] = _selectedDMOG.formData;
    }
    const currentDmo = {};
    return {
      bm: __spreadProps(__spreadValues({}, rest), {
        selectedBMOG: _selectedBMOG?.id,
        selectedBMO: _selectedBMO?.id,
        selectedDMOG: _selectedDMOG?.id
      }),
      bmog,
      bmo,
      dmog,
      dmo,
      currentDmo,
      _BmogName: _selectedBMOG?.id,
      _BmoName: _selectedBMO?.id,
      _DmogName: _selectedDMOG?.id
    };
  }
  unreferenceAll() {
    const _a = this, { childrenMap, _selectedBMO, _selectedBMOG, _selectedDMOG, root } = _a, rest = __objRest(_a, ["childrenMap", "_selectedBMO", "_selectedBMOG", "_selectedDMOG", "root"]);
    return rest;
  }
  unreferenceChildren(childrenMap) {
    const children = {};
    Object.entries(childrenMap || {}).forEach(([id, obj]) => {
      children[id] = obj.unreference();
    });
    return children;
  }
  updateSelectedObjects(obj) {
    if (!obj)
      return;
    if ("BMOGID" in obj) {
      this.selectedBMOG = obj;
    }
    if ("BMOID" in obj) {
      this.selectedBMO = obj;
    }
    if ("DMOGID" in obj) {
      this.selectedDMOG = obj;
    }
    if ("dmoName" in obj) {
      return;
    }
    const childId = obj?.Children[0];
    if (childId) {
      const firstChild = obj.childrenMap[childId];
      this.updateSelectedObjects(firstChild);
    } else {
      switch (obj.id) {
        case this.selectedBMOG?.id:
          this.selectedBMO = null;
          break;
        case this.selectedBMO?.id:
          this.selectedDMOG = null;
          break;
        default:
          break;
      }
    }
    this.cacheObjectIds();
  }
  onRemoveChild(removedObjectId) {
    switch (removedObjectId) {
      case this.selectedBMOG?.id:
        this.selectedBMOG = null;
        break;
      case this.selectedBMO?.id:
        this.selectedBMO = null;
        break;
      case this.selectedDMOG?.id:
        this.selectedDMOG = null;
        break;
      default:
        break;
    }
  }
  static fromResponse(res) {
    const bm = new _BM(res.Item1, void 0);
    bm.Children.forEach((bmogId) => {
      const bmog = new BMOG(res.Item2[bmogId], bm);
      bm.addChild(bmog);
      bmog.Children.forEach((bmoid) => {
        const bmo = new BMO(res.Item3[bmoid], bmog);
        bmog.addChild(bmo);
        bmo.Children.forEach((dmogid) => {
          const dmog = new DMOG(res.Item4[dmogid], bmo);
          bmo.addChild(dmog);
          res.Item5[dmogid]?.components.forEach((dmoObj) => {
            const guid = dmoObj.guid || nameToGuid(dmoObj.dmoName);
            dmoObj.dmoId = +res?.Item7.dmoIds[guid];
            dmoObj.guid = guid;
            const dmo = new DMComponent(dmoObj, dmog);
            dmog.addChild(dmo);
            res?.Item6[dmo.guid]?.Condition.forEach((cond) => {
              dmo.addCondition(cond);
            });
          });
          dmog.addFormData(res.Item5[dmogid]);
        });
      });
    });
    bm.setInitialSelectedObjects();
    return bm;
  }
  setInitialSelectedObjects() {
    const { selectedBMOG, selectedBMO, selectedDMOG } = localStorage;
    this._setInitialSelectedObject(this, [{ selectedDMOG }, { selectedBMO }, { selectedBMOG }]);
  }
  /** Recursively go through objects children and set them as selected objects
   *
   *  @param parent is of type ObjectClass excluding DMComponent,
   *
   *  namely {@link BMOG} | {@link BMO} | {@link DMOG}
   */
  _setInitialSelectedObject(parent, ids) {
    if (ids.length === 0)
      return;
    const [[key, id]] = Object.entries(ids.pop());
    const child = parent.childrenMap[id];
    if (child) {
      this[key] = child;
      this._setInitialSelectedObject(child, ids);
    } else {
      const firstChildId = parent.Children[0];
      firstChildId && this.updateSelectedObjects(parent.childrenMap[firstChildId]);
    }
  }
  /** Invoked when an {@link ObjectClass} excluding {@link DMComponent} is saved or created */
  cacheObjectId(obj) {
    if ("BMOGID" in obj) {
      localStorage.selectedBMOG = obj.id;
    }
    if ("BMOID" in obj) {
      localStorage.selectedBMO = obj.id;
    }
    if ("DMOGID" in obj) {
      localStorage.selectedDMOG = obj.id;
    }
  }
  cacheObjectIds() {
    localStorage.selectedBMOG = this.selectedBMOG?.id;
    localStorage.selectedBMO = this.selectedBMO?.id;
    localStorage.selectedDMOG = this.selectedDMOG?.id;
  }
};

// src/app/admin/data-modeler1/classes/object-control.class.ts
var ObjectControl = class {
  constructor(config) {
    this.name = config.name;
    this.label = config?.label || config.name;
    this.type = config.type || "text";
    this.show = config.show || of(true);
    this.options = config.options;
    this.multiple = config.multiple;
    this.hint = config.hint;
    this.required = config.required;
    this.readonly = config.readonly;
    this.class = config.class;
    this.group = config.group;
    this.config = config.config;
    this.groupOptionsBy = config.groupOptionsBy;
    this.placeholder = config.placeholder || "";
  }
};

// src/app/admin/data-modeler1/components1/bm-detail/bm-detail.component.ts
function BmDetailComponent_h2_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("New ", ctx_r0.title, "");
  }
}
function BmDetailComponent_h2_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.title, " Details");
  }
}
function BmDetailComponent_ng_container_9_app_object_control_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-object-control", 12);
  }
  if (rf & 2) {
    const control_r2 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMap(control_r2.class);
    \u0275\u0275property("config", control_r2)("parentForm", ctx_r0.form);
  }
}
function BmDetailComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, BmDetailComponent_ng_container_9_app_object_control_1_Template, 1, 4, "app-object-control", 11);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(2, 1, control_r2.show));
  }
}
function BmDetailComponent_button_13_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Create");
    \u0275\u0275elementContainerEnd();
  }
}
function BmDetailComponent_button_13_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Update");
    \u0275\u0275elementContainerEnd();
  }
}
function BmDetailComponent_button_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 13);
    \u0275\u0275listener("click", function BmDetailComponent_button_13_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onSubmit());
    });
    \u0275\u0275template(1, BmDetailComponent_button_13_ng_container_1_Template, 2, 0, "ng-container", 2)(2, BmDetailComponent_button_13_ng_container_2_Template, 2, 0, "ng-container", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.newObject);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.newObject);
  }
}
var BmDetailComponent = class _BmDetailComponent extends ObjectDetail {
  constructor() {
    super(...arguments);
    this.title = "Business Model";
    this.status = enumToList(Status);
  }
  initForm() {
    this.form = this.fb.group({
      Name: [this.data.Name],
      DisplayName: [this.data.DisplayName, [Validators.required]],
      Version: [this.data.Version, [Validators.required]],
      ProcessName: [this.data.ProcessName],
      Status: [this.status.find((s) => s.key == this.data.Status), [Validators.required]],
      IntegrateWorkspace: [+this.data.IntegrateWorkspace],
      Description: [this.data.Description]
    });
    this.controls = [
      new ObjectControl({ name: "Name", readonly: true, required: true }),
      new ObjectControl({ name: "DisplayName", label: "Friendly Name", required: true }),
      new ObjectControl({ name: "Version", readonly: true }),
      new ObjectControl({ name: "ProcessName", label: "Process Name", readonly: true }),
      new ObjectControl({
        name: "Status",
        type: "dropdown",
        required: true,
        options: of(this.status)
      }),
      new ObjectControl({ name: "IntegrateWorkspace", label: "Integrate Workspace", type: "switch" }),
      new ObjectControl({ name: "Description", label: "Long Description", type: "rich", class: "span-12" })
    ];
  }
  onSubmit() {
    this.submitted = true;
    if (this.form.valid) {
      const val = this.form.value;
      const payload = __spreadProps(__spreadValues(__spreadValues({}, this.data.unreferenceAll()), val), {
        Status: val.Status?.key || val.Status,
        IntegrateWorkspace: +val.IntegrateWorkspace
      });
      this.output.emit(payload);
      this.ref.close(payload);
    }
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275BmDetailComponent_BaseFactory;
      return function BmDetailComponent_Factory(__ngFactoryType__) {
        return (\u0275BmDetailComponent_BaseFactory || (\u0275BmDetailComponent_BaseFactory = \u0275\u0275getInheritedFactory(_BmDetailComponent)))(__ngFactoryType__ || _BmDetailComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BmDetailComponent, selectors: [["app-bm-detail"]], standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 14, vars: 5, consts: [[1, "popup"], [1, "popup__header"], [4, "ngIf"], [1, "popup__close"], [1, "fas", "fa-times-circle", "fa-fw", 3, "click"], [3, "formGroup"], [1, "double-column"], [4, "ngFor", "ngForOf"], [1, "popup__actions"], ["type", "button", 1, "btn", "btn-light", "btn-sm", 3, "click"], ["class", "btn btn-primary btn-sm", "type", "submit", 3, "click", 4, "ngIf"], [3, "config", "parentForm", "class", 4, "ngIf"], [3, "config", "parentForm"], ["type", "submit", 1, "btn", "btn-primary", "btn-sm", 3, "click"]], template: function BmDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275template(2, BmDetailComponent_h2_2_Template, 2, 1, "h2", 2)(3, BmDetailComponent_h2_3_Template, 2, 1, "h2", 2);
        \u0275\u0275elementStart(4, "span", 3)(5, "i", 4);
        \u0275\u0275listener("click", function BmDetailComponent_Template_i_click_5_listener() {
          return ctx.ref.close();
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(6, "hr");
        \u0275\u0275elementStart(7, "form", 5)(8, "div", 6);
        \u0275\u0275template(9, BmDetailComponent_ng_container_9_Template, 3, 3, "ng-container", 7);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(10, "div", 8)(11, "button", 9);
        \u0275\u0275listener("click", function BmDetailComponent_Template_button_click_11_listener() {
          return ctx.onCancel();
        });
        \u0275\u0275text(12, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275template(13, BmDetailComponent_button_13_Template, 3, 2, "button", 10);
        \u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.newObject);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.newObject);
        \u0275\u0275advance(4);
        \u0275\u0275property("formGroup", ctx.form);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.controls);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !ctx.data.published);
      }
    }, dependencies: [
      NgIf,
      ReactiveFormsModule,
      \u0275NgNoValidate,
      NgControlStatusGroup,
      FormGroupDirective,
      NgForOf,
      ObjectControlComponent,
      AsyncPipe
    ], encapsulation: 2, changeDetection: 0 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BmDetailComponent, { className: "BmDetailComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\bm-detail\\bm-detail.component.ts", lineNumber: 23 });
})();

// src/app/admin/data-modeler1/services1/data-modeler-api.service1.ts
var DataModelerApiService = class _DataModelerApiService extends BaseHttpService {
  constructor() {
    super(...arguments);
    this.baseUrl = `${environment.Setting.BaseAPIUrl}/modeler`;
    this.wfbaseUrl = `${environment.Setting.WF_Api_Url}/api/v3/modeler`;
    this.GatewayAPIUrl = `${environment.Setting.GatewayAPIUrl}/wfapibm/DataModel`;
  }
  getData(processName, bmName, version) {
    let url = `${this.GatewayAPIUrl}/getdatafornewmodelbm/${processName}/${bmName}`;
    return this.get(url, { version }).pipe(map((res) => BM.fromResponse(res)));
  }
  createBMVersion(encryptedBmId, timezone = "") {
    const url = `${this.GatewayAPIUrl}/createBMVersion`;
    return this.post(url, null, { bmId: encryptedBmId, timezone: timezone.toString() });
  }
  changeMode(bmId, mode) {
    const url = `${this.GatewayAPIUrl}/updateMode/${bmId}/${mode}`;
    return this.post(url, null, null);
  }
  saveBM(payload, noSpinner) {
    const url = `${this.GatewayAPIUrl}/saveBM`;
    return this.post(url, { bm: payload }, null, noSpinner && { noSpinner: "true" });
  }
  saveObject(obj, bm, noLoading) {
    const { url, payload } = this.generateRequestInfo(obj, bm, "save");
    const headers = { processName: bm.ProcessName };
    if (noLoading) {
      headers.noSpinner = "noSpinner";
    }
    return this.post(url, payload, null, headers);
  }
  reorderChildren(obj) {
    let payload = null;
    let url = "";
    if ("BMOGID" in obj) {
      url = `${this.GatewayAPIUrl}/setBmoOrder`;
      payload = {
        bmogid: obj.BMOGID,
        bmoid: obj.Children.map((guid) => obj.getChild(guid).BMOID)
      };
    } else if ("BMOID" in obj) {
      url = `${this.GatewayAPIUrl}/setDmogOrder`;
      payload = {
        bmoid: obj.BMOID,
        dmogId: obj.Children.map((guid) => obj.getChild(guid).DMOGID)
      };
    } else if ("DMOGID" in obj) {
      console.log(obj);
      url = `${this.GatewayAPIUrl}/setDmoOrder`;
      payload = {
        dmogid: obj.DMOGID,
        columns: obj.formData.components.flatMap((row) => row.columns.map((col) => col.components.map((dmo) => dmo.dmoId)))
      };
    }
    if (!url)
      return EMPTY;
    return this.post(url, payload);
  }
  saveDmoCondition(payload) {
    let url = `${this.GatewayAPIUrl}/saveBMCondition`;
    return this.post(url, payload);
  }
  deleteDmoCondition(id) {
    const url = `${this.GatewayAPIUrl}/deleteDmoCondition/${id}`;
    return this.post(url, null);
  }
  deleteObject(obj, bm) {
    const unreferenced = obj.unreference();
    const { url, payload } = this.generateRequestInfo(unreferenced, bm, "delete");
    const lastSegment = url.split("/").pop();
    const postTo = (endpoint, body) => this.post(`${this.GatewayAPIUrl}/${endpoint}`, null, body);
    if (lastSegment?.includes("DMOG")) {
      const dmogId = payload?.dmog?.["DMOGID"];
      const bmoId = payload?.bmo?.[payload?._BmoName]?.BMOID;
      const endpoint = "UnshareDmog";
      return postTo(endpoint, { dmogId, bmoId });
    } else if (lastSegment?.includes("BMO")) {
      const bmogId = payload?.bmog?.[payload?._BmogName]?.BMOGID;
      const bmoId = payload?.bmo?.["BMOID"];
      const endpoint = "UnshareBmo";
      return postTo(endpoint, { bmoId, bmogId });
    } else {
      return this.post(url, payload, null, { processName: bm.ProcessName });
    }
  }
  checkNameValidity(type, id, name, version, processName) {
    const url = `${this.GatewayAPIUrl}/checkName/${type}/${id}/${name}/${version}`;
    return this.get(url, null, { processName });
  }
  checkDmoInBmog(dmoId, bmogId) {
    const url = `${this.GatewayAPIUrl}/checkDmoInBmog`;
    return this.post(url, null, { dmoId, bmogId });
  }
  checkDmogInBmo(dmogId, bmogId) {
    const url = `${this.GatewayAPIUrl}/CheckDmogInBMO`;
    return this.post(url, null, { dmogId, bmogId });
  }
  checkBmoInBmog(bmoId, bmogId) {
    const url = `${this.GatewayAPIUrl}/checkBmoInBmog`;
    return this.post(url, null, { bmoId, bmogId });
  }
  getSubprocessList(bmId) {
    const url = `${this.GatewayAPIUrl}/getSubprocessList`;
    return this.get(url, { bmId }, { noSpinner: "noSpinner" }).pipe(shareReplay(1));
  }
  getChildProcessList(bmId) {
    const url = `${this.GatewayAPIUrl}/getChildProcessList`;
    return this.get(url, { bmId }, { noSpinner: "noSpinner" }).pipe(shareReplay(1));
  }
  getProcessDmos(processId) {
    const url = `${this.GatewayAPIUrl}/getProcessDmoListByProcId`;
    return this.get(url, { processId }, { noSpinner: "noSpinner" }).pipe(shareReplay(1));
  }
  getRoles(processName) {
    const url = `${this.GatewayAPIUrl}/role`;
    return this.get(url, null, { processName, noSpinner: "noSpinner" }).pipe(shareReplay(1));
  }
  getColorCodes() {
    const url = `${this.GatewayAPIUrl}/getColorCode`;
    return this.get(url);
  }
  getCountriesList() {
    const url = `${this.GatewayAPIUrl}/getCountry`;
    return this.get(url);
  }
  getTriggers(processName) {
    const url = `${this.GatewayAPIUrl}/trigger`;
    return this.get(url, null, { processName });
  }
  encode(s) {
    const url = `${this.GatewayAPIUrl}/encode?str=${s}`;
    return this.get(url);
  }
  saveSharedDmos(payload) {
    const url = `${this.GatewayAPIUrl}/saveDMOGColumns`;
    return this.post(url, payload);
  }
  unshareDmo(dmoId, dmogId) {
    const url = `${this.GatewayAPIUrl}/unshareDmo`;
    return this.post(url, null, { dmoId, dmogId });
  }
  deleteDmo(dmoId, bmId) {
    const url = `${this.GatewayAPIUrl}/DeleteDataModelObject`;
    return this.post(url, null, { dmoId, bmId });
  }
  deleteDmog(processName, dmogName) {
    const url = `${this.GatewayAPIUrl}/deletecard`;
    return this.post(url, null, { dmogName }, { processName });
  }
  deleteBmo(processName, bmoNames, version) {
    const url = `${this.GatewayAPIUrl}/deletesection`;
    return this.post(url, null, { bmoNames, version }, { processName });
  }
  saveSharedDmogs(bmoId, dmogIds) {
    const url = `${this.GatewayAPIUrl}/SaveBmoDmogLinking`;
    return this.post(url, null, { bmoId, dmogIds });
  }
  saveSharedBmos(bmogId, bmoIds) {
    const url = `${this.GatewayAPIUrl}/SaveBmogBmoLinking`;
    return this.post(url, null, { bmogId, bmoIds });
  }
  GetAvailableDmoToShare(bmogId, bmId) {
    let url = `${this.GatewayAPIUrl}/GetAvailableDmoToShare`;
    return this.get(url, { bmogId, bmId }, null, true);
  }
  GetAvailableDmogToShare(bmogId, bmId) {
    const url = `${this.GatewayAPIUrl}/GetAvailableDmogToShare`;
    return this.get(url, { bmogId, bmId });
  }
  GetAvailableBmoToShare(bmogId, bmId) {
    const url = `${this.GatewayAPIUrl}/GetAvailableBmoToShare`;
    return this.get(url, { bmogId, bmId });
  }
  SaveDmogProps(model) {
    const url = `${this.GatewayAPIUrl}/SaveDmogProps`;
    return this.post(url, model);
  }
  generateRequestInfo(obj, bm, action) {
    const payload = bm.payload;
    let path = "";
    if ("BMOGID" in obj) {
      path = `${action}BMOG`;
      payload.bmog = obj;
    } else if ("BMOID" in obj) {
      path = `${action}BMO`;
      payload.bmo = obj;
    } else if ("DMOGID" in obj) {
      path = `${action}DMOG${action === "save" ? "All" : ""}`;
      payload.dmog = obj;
    } else if ("dmoName" in obj) {
      path = `${action}DMO`;
      payload.currentDmo = obj;
    }
    const url = `${this.GatewayAPIUrl}/${path}`;
    return { payload, url };
  }
  checkCanvasType(type, id, name, version, processName) {
    const url = `${this.GatewayAPIUrl}/checkCanvasTy/${type}/${id}/${name}/${version}`;
    return this.get(url, null, { processName });
  }
  saveReorderDmogs(bmoId, dmogIds) {
    const url = `${this.GatewayAPIUrl}/SaveBmoDmogLinking?bmoId=${bmoId}&dmogIds=${dmogIds}`;
    return this.postReorderDmogs(url, bmoId, dmogIds);
  }
  saveupdatePrntDmogIDs(model) {
    const url = `${this.GatewayAPIUrl}/updatePrntDmogIDs`;
    return this.updatePrntDmogIDs(url, model);
  }
  callDynamicApi(dataSource, endpoint, methodtype, body) {
    let baseurl = null;
    switch (dataSource?.toLowerCase()) {
      case "wfapi":
        baseurl = environment.Setting.BaseAPIUrl;
        break;
      case "wfapigateway":
        baseurl = environment.Setting.GatewayAPIUrl;
        break;
      case "customapi":
        baseurl = environment.Setting.CustomAPIUrl;
        break;
      default:
        return null;
    }
    const url = `${baseurl}/${endpoint}`;
    switch (methodtype?.toUpperCase()) {
      case "GET":
        return this.get(url, { params: body });
      case "POST":
        return this.post(url, body);
      case "DELETE":
        return this.delete(url, { body });
      default:
        return null;
    }
  }
  getdmobybmid(bmid) {
    const url = `${environment.Setting.BaseAPIUrl}/formview/getdmobybmid`;
    return this.post(url, null, { bmid });
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275DataModelerApiService_BaseFactory;
      return function DataModelerApiService_Factory(__ngFactoryType__) {
        return (\u0275DataModelerApiService_BaseFactory || (\u0275DataModelerApiService_BaseFactory = \u0275\u0275getInheritedFactory(_DataModelerApiService)))(__ngFactoryType__ || _DataModelerApiService);
      };
    })();
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DataModelerApiService, factory: _DataModelerApiService.\u0275fac, providedIn: "root" });
  }
};

// src/app/admin/data-modeler1/components1/bmo-detail/bmo-detail.component.ts
function BmoDetailComponent_h2_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("New ", ctx_r0.title, "");
  }
}
function BmoDetailComponent_h2_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.title, " Details");
  }
}
function BmoDetailComponent_ng_container_9_app_object_control_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-object-control", 13);
  }
  if (rf & 2) {
    const control_r2 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMap(control_r2.class);
    \u0275\u0275property("config", control_r2)("parentForm", ctx_r0.form);
  }
}
function BmoDetailComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, BmoDetailComponent_ng_container_9_app_object_control_1_Template, 1, 4, "app-object-control", 12);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(2, 1, control_r2.show));
  }
}
function BmoDetailComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 14)(1, "div", 15)(2, "label", 16);
    \u0275\u0275text(3, "Available Cards");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "label", 16);
    \u0275\u0275text(5, "Selected Cards");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "app-association", 17);
    \u0275\u0275listener("add", function BmoDetailComponent_div_10_Template_app_association_add_6_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onShareAdd($event));
    })("remove", function BmoDetailComponent_div_10_Template_app_association_remove_6_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onShareRemove($event));
    })("reorder", function BmoDetailComponent_div_10_Template_app_association_reorder_6_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onShareReorder($event));
    })("itemRemoved", function BmoDetailComponent_div_10_Template_app_association_itemRemoved_6_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onItemRemoved($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(6);
    \u0275\u0275property("items", ctx_r0.allDmogs)("associatedItems", ctx_r0.associatedSharedItems)("displayWith", ctx_r0.displayShare)("uniqueWith", ctx_r0.uniqueShare)("checkAll", false)("shouldAdd", ctx_r0.shouldAdd)("canDelete", true);
  }
}
function BmoDetailComponent_button_14_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Create");
    \u0275\u0275elementContainerEnd();
  }
}
function BmoDetailComponent_button_14_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Update");
    \u0275\u0275elementContainerEnd();
  }
}
function BmoDetailComponent_button_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 18);
    \u0275\u0275listener("click", function BmoDetailComponent_button_14_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onSubmit());
    });
    \u0275\u0275template(1, BmoDetailComponent_button_14_ng_container_1_Template, 2, 0, "ng-container", 2)(2, BmoDetailComponent_button_14_ng_container_2_Template, 2, 0, "ng-container", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.newObject);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.newObject);
  }
}
var BmoDetailComponent = class _BmoDetailComponent extends ObjectDetail {
  constructor(ref, fb, api, toastr, msg, dmApi) {
    super(ref, fb);
    this.api = api;
    this.toastr = toastr;
    this.msg = msg;
    this.dmApi = dmApi;
    this.dmogSharing = true;
    this.title = "Section";
    this.bmoTypeList = enumToList(BMOType);
    this.FormBmoType = enumToList(FormBmoType);
    this.status = enumToList(Status);
    this.availableDmogToShare = [];
    this.removedDmogs = [];
    this.allDmogs = [];
    this.associatedSharedItems = [];
    this.allAssociatedSharedItems = [];
    this.sharedChanged = false;
    this.displayShare = (item) => item.value;
    this.uniqueShare = (item) => item.value;
    this.shouldAdd = (item) => this.api.checkDmogInBmo(item.dmogId.toString(), item.bmogId.toString()).pipe(tap((success) => {
      if (!success) {
        this.toastr.warning("This card cannot be shared");
      }
    }));
    this.onShareReorder = (items) => {
      this.associatedSharedItems = items;
      this.sharedChanged = true;
    };
    this.refreshAllDmogs = () => {
      this.allDmogs.forEach((dmog) => {
        const rightCheck = this.associatedSharedItems.some((item) => item.key === dmog.key);
        dmog.selected = rightCheck;
        dmog.disabled = rightCheck;
      });
      this.allDmogs = this.allDmogs;
    };
    this.formActions = [
      { controlName: "BmoType", handler: (type) => this.onBmoTypeChange(type) },
      { controlName: "ChildProcessId", handler: (processId) => this.onChildProcessIdChange(processId) }
    ];
  }
  beforeFormInit() {
    this.allDmogs = this.getSharedItems();
    this.associatedSharedItems = this.allDmogs.filter((item) => item.selected).sort((a, b) => a.DMOGID - b.DMOGID);
    this.subprocessList$ = this.api.getSubprocessList(this.parent.parent.BMId.toString()).pipe(this.handleApiResponse("SubProcessId"));
    this.childProcessList$ = this.api.getChildProcessList(this.parent.parent.BMId.toString()).pipe(this.handleApiResponse("ChildProcessId"));
    this.parentProcessDmos$ = this.api.getProcessDmos(this.parent.parent.ProcessId).pipe(this.handleApiResponse("ParentProcessDmoGuid"));
  }
  initForm() {
    const validators = [...NAME_VALIDATORS];
    if (this.newObject) {
      const allBmos = Object.values(this.parent.root.childrenMap).flatMap((bmog) => Object.values(bmog.childrenMap));
    }
    ;
    this.form = this.fb.group({
      Name: [this.data.Name, { validators, updateOn: "blur" }],
      DisplayName: [this.data.DisplayName, [Validators.required]],
      Version: [this.data.Version || this.parent.Version, [Validators.required]],
      BmoType: [this.bmoTypeList.find((t) => t.key === this.data.BmoType), [Validators.required]],
      Status: [this.status.find((s) => s.key == (this.data.Status || Status.Active)), [Validators.required]],
      ShortDesc: [this.data.ShortDesc, [Validators.required]],
      LongDesc: [this.data.LongDesc],
      SubProcessId: [this.data.SubProcessId],
      ChildProcessId: [this.data.ChildProcessId],
      ChildProcessDmoGuid: [this.data.ChildProcessDmoGuid],
      ParentProcessDmoGuid: [this.data.ParentProcessDmoGuid]
    });
    this.controls = [
      new ObjectControl({ name: "Name", readonly: !this.newObject, required: true }),
      new ObjectControl({ name: "DisplayName", label: "Friendly Name", required: true }),
      new ObjectControl({ name: "Version", readonly: true }),
      new ObjectControl({
        name: "BmoType",
        label: "Type",
        type: "dropdown",
        required: true,
        options: of(this.parent.CanvasType === "Form" ? this.FormBmoType : this.bmoTypeList)
      }),
      new ObjectControl({
        name: "Status",
        type: "dropdown",
        required: true,
        options: of(this.status)
      }),
      // new ObjectControl({
      //   name: 'Share', type: 'dropdown', options: of(this.sharedItems), multiple: true,
      //   show: this.show('BmoType', BMOType.Form), groupOptionsBy: 'parent',  
      // }),
      new ObjectControl({
        name: "SubProcessId",
        label: "Subprocess List",
        type: "dropdown",
        required: true,
        options: this.subprocessList$,
        show: this.show("BmoType", BMOType.SubProcess)
      }),
      new ObjectControl({
        name: "ChildProcessId",
        label: "Child Process List",
        type: "dropdown",
        required: true,
        options: this.childProcessList$,
        show: this.show("BmoType", BMOType.ChildProcess)
      }),
      new ObjectControl({
        name: "ParentProcessDmoGuid",
        label: "Parent Process DMOs",
        type: "dropdown",
        required: true,
        options: this.parentProcessDmos$,
        show: this.show("BmoType", BMOType.ChildProcess)
      }),
      new ObjectControl({
        name: "ChildProcessDmoGuid",
        label: "Child Process DMOs",
        type: "dropdown",
        required: true,
        options: of([]),
        show: this.show("BmoType", BMOType.ChildProcess)
      }),
      new ObjectControl({ name: "ShortDesc", label: "Short Description", required: true }),
      new ObjectControl({ name: "LongDesc", label: "Long Description", type: "rich", class: "span-12" })
    ];
    this.api.GetAvailableDmogToShare(this.parent.root.selectedBMOG.BMOGID, this.parent.root.BMId).subscribe((x) => {
      this.availableDmogToShare = x.AvaliableItems?.sort((a, b) => a.DMOGID - b.DMOGID);
      const avDmogs = this.getAllDmog();
      this.allDmogs = avDmogs;
    });
    this.form.get("Name").valueChanges.subscribe((name) => {
      if (this.newObject && name && name.length >= 4 && !this.form.get("Name").hasError("maxlength") && !this.form.get("Name").hasError("pattern")) {
        this.api.checkNameValidity("bmo", 0, name, this.parent.root.Version, this.parent.root.ProcessName).subscribe((IsExits) => {
          if (IsExits) {
            const nameControl = this.form.get("Name");
            nameControl.setErrors({
              nameExists: true,
              message: "Duplicate name"
            });
          }
        });
      }
    });
  }
  getSharedItems() {
    let list = [];
    const share = this.data.Share || [];
    Object.values(this.parent.root.childrenMap).forEach((bmog) => {
      Object.values(bmog.childrenMap).filter((bmo) => !bmo.shared).forEach((bmo) => {
        Object.values(bmo.childrenMap).filter((dmog) => !dmog.shared).forEach((dmog) => {
          const selected = share.some((item2) => item2.value === dmog.id) || this.data?.Children?.some((guid) => guid === dmog.id);
          const item = {
            key: dmog.id,
            dmogId: dmog.DMOGID,
            value: `${dmog.DisplayName} (${dmog.Name})`,
            bmogId: this.parent.BMOGID,
            parent: `${bmog.Name} / ${bmo.DisplayName}`,
            parentId: bmo.id,
            selected,
            disabled: selected
          };
          list.push(item);
        });
      });
    });
    return list;
  }
  getAllDmog() {
    let list = [];
    const share = this.data.Share || [];
    this.availableDmogToShare?.forEach((dmog, i) => {
      const check = share.some((item2) => item2.value === dmog.dmogGuid) || this.data?.Children?.some((guid) => guid === dmog.dmogGuid);
      const item = {
        key: dmog.dmogGuid,
        value: dmog.NAME,
        dmogId: dmog.DMOGID,
        bmogId: this.parent.BMOGID,
        parent: `${this.parent.Name} / ${this.parent.parent.selectedBMOG.Name}`,
        parentId: this.parent.parent.selectedBMOG.id,
        selected: check,
        disabled: check
      };
      list.push(item);
    });
    return list;
  }
  getAllAssocaitedDmog() {
    let list = [];
    const share = this.data.Share || [];
    this.allAssociatedSharedItems.forEach((dmog, i) => {
      const check = share.some((item2) => item2.value === dmog.dmogGuid) || this.data?.Children?.some((guid) => guid === dmog.dmogGuid);
      const item = {
        key: dmog.dmogGuid,
        value: dmog.NAME,
        dmogId: dmog.DMOGID,
        bmogId: this.parent.BMOGID,
        parent: `${this.parent.Name} / ${this.parent.parent.selectedBMOG.Name}`,
        parentId: this.parent.parent.selectedBMOG.id,
        selected: true,
        disabled: true
      };
      list.push(item);
    });
    return list;
  }
  afterFormInit() {
    setTimeout(() => {
      const val = this.bmoTypeList.find(({ key }) => key === this.data.BmoType);
      this.f.BmoType.patchValue(val);
    });
  }
  onSubmit() {
    this.submitted = true;
    if (this.form.valid) {
      const val = this.form.value;
      const payload = __spreadProps(__spreadValues({}, val), {
        Parent: this.parent.id,
        BMOID: this.data.BMOID,
        BmoType: val.BmoType?.key || val.BmoType,
        Status: val.Status?.key || val.Status,
        Children: this.data?.Children || [],
        id: this.data?.id || val.Name,
        GUID: this.data?.GUID || val.Name,
        SubProcessId: val.SubProcessId?.key || val.SubProcessId,
        ChildProcessId: val.ChildProcessId?.key || val.ChildProcessId,
        ChildProcessDmoGuid: val.ChildProcessDmoGuid?.key || val.ChildProcessDmoGuid,
        ParentProcessDmoGuid: val.ParentProcessDmoGuid?.key || val.ParentProcessDmoGuid,
        ParentBMId: this.parent.root.BMId
      });
      const shared = {
        bmoid: this.data.BMOID,
        dmogIds: this.sharedChanged ? this.associatedSharedItems.map(({ dmogId }) => dmogId).toString() : "-1"
      };
      const removedItems = {
        bmoid: this.data.BMOID,
        domgNames: this.removedDmogs.length > 0 ? this.removedDmogs.join(",")?.toString() : "-1"
      };
      this.output.emit(payload);
      this.ref.close({ payload, shared, removedItems });
    }
  }
  onBmoTypeChange(val) {
    val = val?.key || val;
    this.dmogSharing = false;
    if (val === BMOType.SubProcess) {
      this.f.SubProcessId.setValidators(Validators.required);
      this.f.ChildProcessId.clearValidators();
      this.f.ChildProcessDmoGuid.clearValidators();
      this.f.ParentProcessDmoGuid.clearValidators();
    } else if (val === BMOType.ChildProcess) {
      this.f.SubProcessId.clearValidators();
      this.f.ChildProcessId.setValidators(Validators.required);
      this.f.ChildProcessDmoGuid.setValidators(Validators.required);
      this.f.ParentProcessDmoGuid.setValidators(Validators.required);
    }
    if (val === BMOType.Form) {
      this.dmogSharing = true;
    }
    this.form.updateValueAndValidity();
  }
  onChildProcessIdChange(processId) {
    processId = processId?.key || processId;
    const control = this.controls.find((c) => c.name === "ChildProcessDmoGuid");
    control.options = this.api.getProcessDmos(processId).pipe(this.handleApiResponse("ChildProcessDmoGuid"));
    this.f.ChildProcessDmoGuid.reset();
  }
  handleApiResponse(control) {
    return (source) => {
      return source.pipe(map((list) => arrayToList(list, "Value", "Label")), tap((list) => {
        const val = list.find(({ key }) => key === this.data[control]);
        this.f[control].patchValue(val);
      }));
    };
  }
  show(controlName, compareTo) {
    return this.form.get(controlName).valueChanges.pipe(startWith(this.form.get(controlName).value), map((v) => v?.key || v), map((v) => v === compareTo));
  }
  onShareAdd(item) {
    this.associatedSharedItems = this.associatedSharedItems.concat(item);
    this.sharedChanged = true;
    this.refreshAllDmogs();
  }
  onShareRemove(item) {
    this.associatedSharedItems = this.associatedSharedItems.filter((dmog) => dmog.dmogId !== item.dmogId);
    this.sharedChanged = true;
    this.refreshAllDmogs();
  }
  onItemRemoved(item) {
    const nameMatch = item.value.match(/\(([^)]+)\)/);
    const Name = nameMatch ? nameMatch[1].trim() : "";
    const DispName = item.value.split("(")[0].trim();
    this.removedDmogs.push(Name);
    this.allDmogs = this.allDmogs.filter((dmog) => dmog.dmogId !== item.dmogId);
    this.sharedChanged = true;
  }
  static {
    this.\u0275fac = function BmoDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BmoDetailComponent)(\u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(MessageService), \u0275\u0275directiveInject(DataModelerApiService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BmoDetailComponent, selectors: [["app-bmo-detail"]], standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 15, vars: 6, consts: [[1, "popup"], [1, "popup__header"], [4, "ngIf"], [1, "popup__close"], [1, "fas", "fa-times-circle", "fa-fw", 3, "click"], [3, "formGroup"], [1, "double-column"], [4, "ngFor", "ngForOf"], ["class", "span-12", 4, "ngIf"], [1, "popup__actions"], ["type", "button", 1, "btn", "btn-light", "btn-sm", 3, "click"], ["class", "btn btn-primary btn-sm", "type", "submit", 3, "click", 4, "ngIf"], [3, "config", "parentForm", "class", 4, "ngIf"], [3, "config", "parentForm"], [1, "span-12"], [1, "double-column", 2, "margin", "0"], ["for", "", 1, "span-6"], ["checkBy", "selected", "disableBy", "disabled", 3, "add", "remove", "reorder", "itemRemoved", "items", "associatedItems", "displayWith", "uniqueWith", "checkAll", "shouldAdd", "canDelete"], ["type", "submit", 1, "btn", "btn-primary", "btn-sm", 3, "click"]], template: function BmoDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275template(2, BmoDetailComponent_h2_2_Template, 2, 1, "h2", 2)(3, BmoDetailComponent_h2_3_Template, 2, 1, "h2", 2);
        \u0275\u0275elementStart(4, "span", 3)(5, "i", 4);
        \u0275\u0275listener("click", function BmoDetailComponent_Template_i_click_5_listener() {
          return ctx.ref.close();
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(6, "hr");
        \u0275\u0275elementStart(7, "form", 5)(8, "div", 6);
        \u0275\u0275template(9, BmoDetailComponent_ng_container_9_Template, 3, 3, "ng-container", 7)(10, BmoDetailComponent_div_10_Template, 7, 7, "div", 8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "div", 9)(12, "button", 10);
        \u0275\u0275listener("click", function BmoDetailComponent_Template_button_click_12_listener() {
          return ctx.onCancel();
        });
        \u0275\u0275text(13, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275template(14, BmoDetailComponent_button_14_Template, 3, 2, "button", 11);
        \u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.newObject);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.newObject);
        \u0275\u0275advance(4);
        \u0275\u0275property("formGroup", ctx.form);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.controls);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dmogSharing);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !ctx.parent.root.published);
      }
    }, dependencies: [
      NgIf,
      ReactiveFormsModule,
      \u0275NgNoValidate,
      NgControlStatusGroup,
      FormGroupDirective,
      NgForOf,
      ObjectControlComponent,
      AssociationComponent,
      AsyncPipe
    ], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BmoDetailComponent, { className: "BmoDetailComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\bmo-detail\\bmo-detail.component.ts", lineNumber: 33 });
})();

// src/app/admin/data-modeler1/components1/bmog-detail/bmog-detail.component.ts
function BmogDetailComponent_h2_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("New ", ctx_r0.title, "");
  }
}
function BmogDetailComponent_h2_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.title, " Details");
  }
}
function BmogDetailComponent_ng_container_9_app_object_control_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-object-control", 16);
  }
  if (rf & 2) {
    const control_r2 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMap(control_r2.class);
    \u0275\u0275property("parentForm", ctx_r0.form)("config", control_r2);
  }
}
function BmogDetailComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, BmogDetailComponent_ng_container_9_app_object_control_1_Template, 1, 4, "app-object-control", 15);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(2, 1, control_r2.show));
  }
}
function BmogDetailComponent_button_20_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Create");
    \u0275\u0275elementContainerEnd();
  }
}
function BmogDetailComponent_button_20_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Update");
    \u0275\u0275elementContainerEnd();
  }
}
function BmogDetailComponent_button_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 17);
    \u0275\u0275listener("click", function BmogDetailComponent_button_20_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onSubmit());
    });
    \u0275\u0275template(1, BmogDetailComponent_button_20_ng_container_1_Template, 2, 0, "ng-container", 2)(2, BmogDetailComponent_button_20_ng_container_2_Template, 2, 0, "ng-container", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.newObject);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.newObject);
  }
}
var BmogDetailComponent = class _BmogDetailComponent extends ObjectDetail {
  constructor(ref, fb, api, toastr, msg) {
    super(ref, fb);
    this.api = api;
    this.toastr = toastr;
    this.msg = msg;
    this.title = "View";
    this.canvasTypeList = enumToList(canvasType);
    this.status = enumToList(Status);
    this.enableTLValues = enumToList(EnableTLCorner);
    this.availableBmoToShare = [];
    this.removedBMOs = [];
    this.allBMOs = [];
    this.associatedSharedItems = [];
    this.sharedChanged = false;
    this.displayShare = (item) => item.value;
    this.uniqueShare = (item) => item.value + item.key;
    this.shouldAdd = (item) => {
      const val = this.form.value;
      if (val.CanvasType?.key == void 0) {
        this.toastr.warning("Please select canvas type before shared");
        return of(false);
      }
      if (val.CanvasType?.key === "Form" && item.type != "Forms") {
        this.toastr.warning("Only form type section can be shared in case of form type view");
        return of(false);
      }
      return this.api.checkBmoInBmog(item.key.toString(), (this.data.BMOGID || -1).toString()).pipe(tap((success) => {
        if (!success) {
          this.toastr.warning("This section cannot be shared");
        }
      }));
    };
    this.onShareReorder = (items) => {
      this.associatedSharedItems = items;
      this.sharedChanged = true;
      this.refreshAllBMOs();
    };
    this.refreshAllBMOs = () => {
      this.allBMOs.forEach((dmog) => {
        const rightCheck = this.associatedSharedItems.some((item) => item.GUID === dmog.GUID);
        dmog.selected = rightCheck;
        dmog.disabled = rightCheck;
      });
      this.allBMOs = this.allBMOs;
    };
  }
  beforeFormInit() {
    this.allBMOs = this.getSharedItems() || [];
    this.associatedSharedItems = this.allBMOs.filter((item) => item.selected);
  }
  initForm() {
    const validators = [...NAME_VALIDATORS];
    this.form = this.fb.group({
      Name: [this.data.Name, { validators, updateOn: "blur" }],
      Version: [this.data.Version || this.parent.Version, [Validators.required]],
      CanvasType: [this.canvasTypeList.find((t) => t.key === this.data.CanvasType), [Validators.required]],
      Status: [this.status.find((s) => s.key == this.data.Status), [Validators.required]],
      LongDesc: [this.data.LongDesc],
      EnableTLCorner: [this.enableTLValues?.find((s) => s?.key == this.data?.EnableTLCorner)?.key, [Validators.required]]
    });
    this.controls = [
      new ObjectControl({ name: "Name", label: "Name", readonly: !this.newObject, required: true }),
      new ObjectControl({ name: "Version", label: "Version", readonly: true }),
      new ObjectControl({
        name: "CanvasType",
        label: "Canvas Type",
        type: "dropdown",
        required: true,
        options: of(this.canvasTypeList)
      }),
      new ObjectControl({
        name: "Status",
        label: "Status",
        type: "dropdown",
        required: true,
        options: of(this.status)
      }),
      new ObjectControl({ name: "LongDesc", label: "Long Description", type: "rich", class: "span-12" }),
      new ObjectControl({
        name: "EnableTLCorner",
        label: "Enable Top Left Corner",
        type: "radio",
        required: true,
        options: of(this.enableTLValues)
      })
    ];
    this.api.GetAvailableBmoToShare(this.data.BMOGID, this.parent.BMId).subscribe((x) => {
      this.availableBmoToShare = x;
      const avBmos = this.getAllBmo();
      this.allBMOs = avBmos;
    });
    this.form.get("Name").valueChanges.subscribe((name) => {
      if (this.newObject && name && name.length >= 4 && !this.form.get("Name").hasError("maxlength") && !this.form.get("Name").hasError("pattern")) {
        this.api.checkNameValidity("bmog", 0, name, this.parent.root.Version, this.parent.root.ProcessName).subscribe((IsExits) => {
          if (IsExits) {
            const nameControl = this.form.get("Name");
            nameControl.setErrors({
              nameExists: true,
              message: "Duplicate name"
            });
          }
        });
      }
    });
    this.form.get("CanvasType").valueChanges.subscribe((CT) => {
      if (CT["key"].length > 0) {
        this.api.checkCanvasType(
          "bmog",
          this.data.BMOGID ?? 0,
          // Replacing the ternary with nullish coalescing
          CT["key"],
          this.parent.root.Version,
          this.parent.root.ProcessName
        ).subscribe((IsExits) => {
          if (IsExits) {
            const nameControl = this.form.get("CanvasType");
            nameControl?.setErrors({
              nameExists: true,
              message: "Duplicate Canvas Type"
            });
          }
        });
      }
      if (CT?.key === "Form") {
        const nameControl = this.form.get("EnableTLCorner");
        nameControl.setErrors(null);
        nameControl.setValue(null);
        nameControl.disable();
      } else {
        const nameControl = this.form.get("EnableTLCorner");
        nameControl.enable();
      }
    });
    if (this.form.value.CanvasType != null) {
      if (this.form.value.CanvasType.key === "Form") {
        const nameControl = this.form.get("EnableTLCorner");
        nameControl.setErrors(null);
        nameControl.disable();
      }
    } else {
      const nameControl = this.form.get("EnableTLCorner");
      nameControl.setErrors(null);
      nameControl.disable();
    }
    this.form.get("CanvasType").valueChanges.subscribe((name) => {
      if (name?.key === "Form") {
        const nameControl = this.form.get("EnableTLCorner");
        nameControl.setErrors(null);
        nameControl.setValue(null);
        nameControl.disable();
      } else {
        const nameControl = this.form.get("EnableTLCorner");
        nameControl.enable();
      }
    });
  }
  getSharedItems() {
    let list = [];
    Object.values(this.parent.childrenMap).forEach((bmog) => {
      Object.values(bmog.childrenMap).filter((bmo) => !bmo.shared).forEach((bmo) => {
        const selected = this.data?.Share?.some((item2) => item2.value === bmo.GUID) || this.data?.Children?.some((guid) => bmo.GUID === guid);
        const item = {
          key: bmo.BMOID.toString(),
          selected,
          disabled: selected,
          GUID: bmo.GUID,
          type: bmo.BmoType,
          value: `${bmo.DisplayName} (${bmo.Name})`,
          parent: bmog.Name,
          parentId: bmog.id
        };
        list.push(item);
      });
    });
    return list;
  }
  getAllBmo() {
    let list = [];
    const share = this.data.Share || [];
    this.availableBmoToShare.forEach((bmo, i) => {
      const check = this.data?.Share?.some((item2) => item2.value === bmo.bmoGuid) || this.data?.Children?.some((guid) => bmo.bmoGuid === guid);
      const item = {
        key: bmo.bmoid,
        GUID: bmo.bmoGuid,
        value: bmo.NAME,
        parent: this.data.Name,
        parentId: this.data.id,
        selected: check,
        disabled: check,
        type: bmo.BMOTYP
      };
      list.push(item);
    });
    return list;
  }
  onSubmit() {
    this.submitted = true;
    if (this.form.valid) {
      const val = this.form.value;
      const payload = __spreadProps(__spreadValues({}, val), {
        Parent: this.parent.id,
        BMOGID: this.data.BMOGID,
        Children: this.data?.Children || [],
        id: this.data?.id || val.Name,
        CanvasType: val.CanvasType?.key || val.CanvasType,
        Status: val.Status?.key || val.Status,
        enableTLCorner: val.enableTLValues?.key
      });
      const shared = {
        bmogId: this.data.BMOGID || "-1",
        bmoIds: this.sharedChanged ? this.associatedSharedItems.map(({ key }) => key).toString() : "-1"
      };
      const removedItems = {
        bmogId: this.data.BMOGID || "-1",
        bmoNames: this.removedBMOs.length > 0 ? this.removedBMOs.join(",")?.toString() : "-1"
      };
      this.output.emit(payload);
      this.ref.close({ payload, shared, removedItems });
    }
  }
  onShareAdd(item) {
    this.associatedSharedItems = this.associatedSharedItems.concat(item);
    this.sharedChanged = true;
    this.refreshAllBMOs();
  }
  onShareRemove(item) {
    this.associatedSharedItems = this.associatedSharedItems.filter((bmo) => bmo.key !== item.key.toString());
    this.sharedChanged = true;
    this.refreshAllBMOs();
  }
  onItemRemoved(item) {
    const nameMatch = item.value.match(/\(([^)]+)\)/);
    const Name = nameMatch ? nameMatch[1].trim() : "";
    const DispName = item.value.split("(")[0].trim();
    this.removedBMOs.push(Name);
    this.allBMOs = this.allBMOs.filter((bmo) => bmo.key !== item.key);
    this.sharedChanged = true;
  }
  static {
    this.\u0275fac = function BmogDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BmogDetailComponent)(\u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(MessageService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BmogDetailComponent, selectors: [["app-bmog-detail"]], standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 21, vars: 12, consts: [[1, "popup"], [1, "popup__header"], [4, "ngIf"], [1, "popup__close"], [1, "fas", "fa-times-circle", "fa-fw", 3, "click"], [3, "formGroup"], [1, "double-column"], [4, "ngFor", "ngForOf"], [1, "span-12"], [1, "double-column", 2, "margin", "0"], ["for", "", 1, "span-6"], ["checkBy", "selected", "disableBy", "disabled", 3, "add", "remove", "reorder", "itemRemoved", "items", "associatedItems", "displayWith", "uniqueWith", "checkAll", "shouldAdd", "canDelete"], [1, "popup__actions"], ["type", "button", 1, "btn", "btn-light", "btn-sm", 3, "click"], ["class", "btn btn-primary btn-sm", "type", "submit", 3, "click", 4, "ngIf"], [3, "parentForm", "config", "class", 4, "ngIf"], [3, "parentForm", "config"], ["type", "submit", 1, "btn", "btn-primary", "btn-sm", 3, "click"]], template: function BmogDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275template(2, BmogDetailComponent_h2_2_Template, 2, 1, "h2", 2)(3, BmogDetailComponent_h2_3_Template, 2, 1, "h2", 2);
        \u0275\u0275elementStart(4, "span", 3)(5, "i", 4);
        \u0275\u0275listener("click", function BmogDetailComponent_Template_i_click_5_listener() {
          return ctx.ref.close();
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(6, "hr");
        \u0275\u0275elementStart(7, "form", 5)(8, "div", 6);
        \u0275\u0275template(9, BmogDetailComponent_ng_container_9_Template, 3, 3, "ng-container", 7);
        \u0275\u0275elementStart(10, "div", 8)(11, "div", 9)(12, "label", 10);
        \u0275\u0275text(13, "Available Sections");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(14, "label", 10);
        \u0275\u0275text(15, "Selected Sections");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(16, "app-association", 11);
        \u0275\u0275listener("add", function BmogDetailComponent_Template_app_association_add_16_listener($event) {
          return ctx.onShareAdd($event);
        })("remove", function BmogDetailComponent_Template_app_association_remove_16_listener($event) {
          return ctx.onShareRemove($event);
        })("reorder", function BmogDetailComponent_Template_app_association_reorder_16_listener($event) {
          return ctx.onShareReorder($event);
        })("itemRemoved", function BmogDetailComponent_Template_app_association_itemRemoved_16_listener($event) {
          return ctx.onItemRemoved($event);
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(17, "div", 12)(18, "button", 13);
        \u0275\u0275listener("click", function BmogDetailComponent_Template_button_click_18_listener() {
          return ctx.onCancel();
        });
        \u0275\u0275text(19, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275template(20, BmogDetailComponent_button_20_Template, 3, 2, "button", 14);
        \u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.newObject);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.newObject);
        \u0275\u0275advance(4);
        \u0275\u0275property("formGroup", ctx.form);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.controls);
        \u0275\u0275advance(7);
        \u0275\u0275property("items", ctx.allBMOs)("associatedItems", ctx.associatedSharedItems)("displayWith", ctx.displayShare)("uniqueWith", ctx.uniqueShare)("checkAll", false)("shouldAdd", ctx.shouldAdd)("canDelete", true);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !ctx.parent.published);
      }
    }, dependencies: [
      NgIf,
      ReactiveFormsModule,
      \u0275NgNoValidate,
      NgControlStatusGroup,
      FormGroupDirective,
      NgForOf,
      ObjectControlComponent,
      AssociationComponent,
      AsyncPipe
    ], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BmogDetailComponent, { className: "BmogDetailComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\bmog-detail\\bmog-detail.component.ts", lineNumber: 32 });
})();

// src/app/admin/data-modeler1/components1/dm-breadcrumbs/dm-breadcrumbs.component.ts
var _c0 = (a0, a1, a2, a3) => [a0, a1, a2, a3];
function DmBreadcrumbsComponent_ng_container_2_li_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 4);
    \u0275\u0275listener("click", function DmBreadcrumbsComponent_ng_container_2_li_1_Template_li_click_0_listener() {
      \u0275\u0275restoreView(_r1);
      const obj_r2 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.select.emit(obj_r2));
    });
    \u0275\u0275elementStart(1, "a", 5);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const obj_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(obj_r2.DisplayName || obj_r2.Name);
  }
}
function DmBreadcrumbsComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmBreadcrumbsComponent_ng_container_2_li_1_Template, 3, 1, "li", 3);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const obj_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", obj_r2);
  }
}
var DmBreadcrumbsComponent = class _DmBreadcrumbsComponent {
  constructor() {
    this.select = new EventEmitter();
  }
  set bm(bm) {
    this._bm = bm;
  }
  get bm() {
    return this._bm;
  }
  static {
    this.\u0275fac = function DmBreadcrumbsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmBreadcrumbsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmBreadcrumbsComponent, selectors: [["app-dm-breadcrumbs"]], inputs: { bm: "bm" }, outputs: { select: "select" }, standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 3, vars: 6, consts: [["aria-label", "breadcrumb", 2, "position", "fixed", "z-index", "9999", "width", "100%", "margin-top", "43px"], [1, "breadcrumb", 2, "margin", "0", "padding-top", "0", "padding-bottom", "0", "font-size", "0.8rem", "gap", "10px"], [4, "ngFor", "ngForOf"], ["class", "breadcrumb-item", 3, "click", 4, "ngIf"], [1, "breadcrumb-item", 3, "click"], [1, "link"]], template: function DmBreadcrumbsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "nav", 0)(1, "ul", 1);
        \u0275\u0275template(2, DmBreadcrumbsComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", \u0275\u0275pureFunction4(1, _c0, ctx.bm, ctx.bm.selectedBMOG, ctx.bm.selectedBMO, ctx.bm.selectedDMOG));
      }
    }, dependencies: [NgForOf, NgIf], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmBreadcrumbsComponent, { className: "DmBreadcrumbsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dm-breadcrumbs\\dm-breadcrumbs.component.ts", lineNumber: 11 });
})();

// src/app/admin/data-modeler1/components1/dm-header/dm-header.component.ts
var DmHeaderComponent = class _DmHeaderComponent {
  constructor() {
    this.imgUrl = UtilService.getUrlForImage("/assets/styles/images/datamodeler-icon.png");
  }
  static {
    this.\u0275fac = function DmHeaderComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmHeaderComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmHeaderComponent, selectors: [["app-dm-header"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 4, vars: 1, consts: [["alt", "C2M Logo", 2, "height", "45px", 3, "src"]], template: function DmHeaderComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "header");
        \u0275\u0275element(1, "img", 0);
        \u0275\u0275elementStart(2, "span");
        \u0275\u0275text(3, "Data Modeler");
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("src", ctx.imgUrl, \u0275\u0275sanitizeUrl);
      }
    }, styles: ["\n\nheader[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  color: #fff;\n  background: #aaadaa;\n  text-transform: uppercase;\n  padding: 0.2rem 1rem;\n  display: none;\n}\n/*# sourceMappingURL=dm-header.component.css.map */"], changeDetection: 0 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmHeaderComponent, { className: "DmHeaderComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dm-header\\dm-header.component.ts", lineNumber: 27 });
})();

// src/app/admin/data-modeler1/components1/dm-menu/dm-menu.component.ts
var _c02 = () => ["Edit", "Published"];
function DmMenuComponent_i_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 18);
  }
}
function DmMenuComponent_i_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 19);
  }
}
function DmMenuComponent_li_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 20);
    \u0275\u0275listener("click", function DmMenuComponent_li_21_Template_li_click_0_listener() {
      const mode_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.modeChange.emit(mode_r2));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const mode_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", mode_r2, " ");
  }
}
var DmMenuComponent = class _DmMenuComponent {
  set mode(mode) {
    this._mode = mode;
  }
  get mode() {
    return this._mode;
  }
  constructor(modalService, formView, toastr, msg, bmService, fb, route) {
    this.modalService = modalService;
    this.formView = formView;
    this.toastr = toastr;
    this.msg = msg;
    this.bmService = bmService;
    this.fb = fb;
    this.route = route;
    this.newVersion = new EventEmitter();
    this.generateXml = new EventEmitter();
    this.modeChange = new EventEmitter();
    this.submitted = false;
    this.isEdit = "edit";
    this.businessModel = null;
  }
  ngOnInit() {
    this.bmid = this.route.snapshot.queryParamMap.get("BMID");
    this.typeId = this.route.snapshot.queryParamMap.get("TypeID");
  }
  onCompanyAssociation() {
    return __async(this, null, function* () {
      const obj = "";
      const modal = this.msg.showComponent(CompanyAssociationComponent, {
        displayWith: (item) => `${item.BMODISPNAME} > ${item.DMOGDISPNAME} > ${item.DMODISPNAME}`,
        uniqueWith: (item) => `${item.BMOID}${item.DMOGID}${item.DMOID}`,
        getAssociationsWith: (groupId) => this.formView.getBMObjectsForCompanyAssociation(groupId, this.typeId, this.bmid),
        checkBy: "ISDMOSELECTED"
      }, { size: "lg", centered: true });
      const res = yield modal.result;
      if (res) {
        const success = (yield this.updateCompanyAssociatedRecords(obj, res)) === 1;
        if (success) {
          this.toastr.success("Success");
        }
      }
    });
  }
  updateCompanyAssociatedRecords(bm, res) {
    const bmoGuids = /* @__PURE__ */ new Set(), dmogGuids = /* @__PURE__ */ new Set(), dmoGuids = /* @__PURE__ */ new Set();
    const selectedItems = res?.selectedItems;
    if (Array.isArray(selectedItems)) {
      selectedItems.forEach((item) => {
        bmoGuids.add(item.BMOGUID);
        dmogGuids.add(item.DMOGGUID);
        dmoGuids.add(item.DMOGUID);
      });
    } else {
      console.warn("selectedItems is not an array:", selectedItems);
    }
    const payload = {
      BMId: this.bmid,
      ProcessId: this.typeId,
      CompanyId: res?.companyId ?? null,
      groupName: res?.groupName ?? "",
      BMOGUIDS: [...bmoGuids].toString(),
      DMOGGUIDS: [...dmogGuids].toString(),
      DMOGUIDS: [...dmoGuids].toString(),
      IsAllComp: res?.IsAllComp ?? false
    };
    return lastValueFrom(this.formView.updatetBMObjectsForCompanyAssociation(payload));
  }
  CreateNewRecord() {
    return __async(this, null, function* () {
      this.bmid = this.route.snapshot.queryParamMap.get("BMID");
      this.ProcessName = sessionStorage.getItem("AppName");
      try {
        const response = yield firstValueFrom(this.bmService.GetBmData(this.ProcessName, this.bmid));
        this.dataSource = response[0];
        const modalRef = this.modalService.open(BmEntryComponent, { backdrop: "static", size: "lg", keyboard: false });
        const modalInstance = modalRef.componentInstance;
        const item = this.dataSource;
        modalInstance.bmid = this.bmid;
        modalInstance.dataList = item;
        modalInstance.isEdit = true;
        modalInstance.currentMode = item?.MOD;
        const result = yield modalRef.result;
        if (result) {
          this.toastr.success("Data saved successfully.");
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    });
  }
  static {
    this.\u0275fac = function DmMenuComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmMenuComponent)(\u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(FormViewApiService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(MessageService), \u0275\u0275directiveInject(BmService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(ActivatedRoute));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmMenuComponent, selectors: [["app-dm-menu"]], inputs: { businessModel: "businessModel", mode: "mode" }, outputs: { newVersion: "newVersion", generateXml: "generateXml", modeChange: "modeChange" }, standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 22, vars: 9, consts: [[1, "header-row", "col-sm-12", "pt-2", "pb-2"], [1, "heading-section"], [1, "buss-heading"], [1, "gear-icon", 3, "click"], ["xmlns", "http://www.w3.org/2000/svg", "width", "19", "height", "19", "viewBox", "0 0 19 19", "fill", "none"], ["d", "M18.3469 11.6609L16.7453 10.7283C16.907 9.8488 16.907 8.94657 16.7453 8.06708L18.3469 7.13451C18.5311 7.02837 18.6138 6.8085 18.5536 6.60379C18.1363 5.25423 17.4258 4.03356 16.4972 3.01759C16.3543 2.86217 16.1212 2.82426 15.9407 2.9304L14.3392 3.86297C13.6662 3.27917 12.8917 2.82805 12.0533 2.53236V0.671025C12.0533 0.458735 11.9067 0.272981 11.6999 0.22749C10.3202 -0.0833643 8.90658 -0.0682007 7.59449 0.22749C7.38771 0.272981 7.24109 0.458735 7.24109 0.671025V2.53615C6.40646 2.83563 5.63199 3.28675 4.95527 3.86676L3.35745 2.93419C3.17323 2.82805 2.94389 2.86217 2.80103 3.02139C1.87241 4.03356 1.16185 5.25423 0.744541 6.60758C0.680628 6.81229 0.767098 7.03216 0.951317 7.13831L2.5529 8.07087C2.39123 8.95036 2.39123 9.85259 2.5529 10.7321L0.951317 11.6646C0.767098 11.7708 0.684387 11.9907 0.744541 12.1954C1.16185 13.5449 1.87241 14.7656 2.80103 15.7816C2.94389 15.937 3.17699 15.9749 3.35745 15.8688L4.95902 14.9362C5.63199 15.52 6.40646 15.9711 7.24485 16.2668V18.1319C7.24485 18.3442 7.39147 18.53 7.59825 18.5755C8.97801 18.8863 10.3916 18.8711 11.7037 18.5755C11.9105 18.53 12.0571 18.3442 12.0571 18.1319V16.2668C12.8917 15.9673 13.6662 15.5162 14.3429 14.9362L15.9445 15.8688C16.1287 15.9749 16.3581 15.9408 16.5009 15.7816C17.4295 14.7694 18.1401 13.5487 18.5574 12.1954C18.6138 11.9869 18.5311 11.767 18.3469 11.6609ZM9.64722 12.4304C7.98924 12.4304 6.63956 11.0695 6.63956 9.39768C6.63956 7.7259 7.98924 6.36496 9.64722 6.36496C11.3052 6.36496 12.6549 7.7259 12.6549 9.39768C12.6549 11.0695 11.3052 12.4304 9.64722 12.4304Z", "fill", "#EB583B"], [1, "btn-section"], [1, "btn", "btn-outline-white", "btn-sm", 3, "click"], ["xmlns", "http://www.w3.org/2000/svg", "width", "20", "height", "18", "viewBox", "0 0 20 18", "fill", "none"], ["d", "M10.8497 0.35862L12.77 0.742681L9.14066 17.6414L7.22036 17.2573L10.8497 0.35862ZM17.2828 9L13.8358 5.55305V2.83582L20 9L13.8358 15.1546V12.4374L17.2828 9ZM0 9L6.15458 2.83582V5.55305L2.70763 9L6.15458 12.4374V15.1546L0 9Z", "fill", "white"], ["type", "button", 1, "btn", "btn-outline-white", "btn-sm", "compAssContainer", 3, "click"], [1, "fa", "fa-link"], ["ngbDropdown", "", 1, "mode", "d-none"], ["ngbDropdownToggle", "", 1, "btn", "btn-sm"], ["class", "fas fa-edit", 4, "ngIf"], ["class", "fas fa-lock", 4, "ngIf"], ["ngbDropdownMenu", "", 2, "min-width", "auto !important"], ["ngbDropdownItem", "", 3, "click", 4, "ngFor", "ngForOf"], [1, "fas", "fa-edit"], [1, "fas", "fa-lock"], ["ngbDropdownItem", "", 3, "click"]], template: function DmMenuComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2);
        \u0275\u0275text(3);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "div", 3);
        \u0275\u0275listener("click", function DmMenuComponent_Template_div_click_4_listener() {
          return ctx.CreateNewRecord();
        });
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(5, "svg", 4);
        \u0275\u0275element(6, "path", 5);
        \u0275\u0275elementEnd()()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(7, "div", 6)(8, "button", 7);
        \u0275\u0275listener("click", function DmMenuComponent_Template_button_click_8_listener() {
          return ctx.generateXml.emit();
        });
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(9, "svg", 8);
        \u0275\u0275element(10, "path", 9);
        \u0275\u0275elementEnd();
        \u0275\u0275text(11, " Generate JSON");
        \u0275\u0275elementEnd();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(12, "button", 10);
        \u0275\u0275listener("click", function DmMenuComponent_Template_button_click_12_listener() {
          return ctx.onCompanyAssociation();
        });
        \u0275\u0275element(13, "i", 11);
        \u0275\u0275text(14, "Company Association");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(15, "div", 12)(16, "button", 13);
        \u0275\u0275template(17, DmMenuComponent_i_17_Template, 1, 0, "i", 14)(18, DmMenuComponent_i_18_Template, 1, 0, "i", 15);
        \u0275\u0275text(19);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(20, "ul", 16);
        \u0275\u0275template(21, DmMenuComponent_li_21_Template, 2, 1, "li", 17);
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate2("", (ctx.businessModel == null ? null : ctx.businessModel.DisplayName) || "Business Model", " (", (ctx.businessModel == null ? null : ctx.businessModel.Version) || "Version", ")");
        \u0275\u0275advance(13);
        \u0275\u0275classMap(ctx.mode === "Edit" ? "btn-outline-white-edit" : "btn-primary");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.mode === "Edit");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.mode === "Published");
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.mode, " ");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", \u0275\u0275pureFunction0(8, _c02));
      }
    }, dependencies: [NgbDropdown, NgbDropdownToggle, NgIf, NgbDropdownMenu, NgForOf, NgbDropdownItem], styles: ["\n\n.sticky-sub-head[_ngcontent-%COMP%] {\n  position: fixed;\n  z-index: 1998;\n  width: 100%;\n}\n.header-row[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  border-top: 1px solid #E3E5EA;\n  border-bottom: 1px solid #E3E5EA;\n  background: #F4F4F4;\n  height: 40px;\n  justify-content: space-between;\n  display: flex;\n  padding: 5px 10px;\n  border-radius: 8px;\n}\n.header-row[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  font-size: 12px;\n  border-radius: 8px;\n}\n.btn-outline-white[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  color: #fff;\n  text-align: center;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  background-color: rgb(0, 89, 150);\n  border: 1px solid white;\n  font-size: 12px;\n  line-height: 18px;\n  height: 30px;\n  width: 132px;\n  padding: 0px 0px 0px 0px;\n  border-radius: 8px;\n  transition:\n    color 0.15s ease-in-out,\n    background-color 0.15s ease-in-out,\n    border-color 0.15s ease-in-out,\n    box-shadow 0.15s ease-in-out;\n}\n.btn-outline-white-edit[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  color: #fff;\n  text-align: center;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  background-color: rgb(0, 89, 150);\n  border: 1px solid white;\n  font-size: 12px;\n  line-height: 18px;\n  height: 30px;\n  width: 78px;\n  padding: 0px 0px 0px 0px;\n  border-radius: 8px;\n  transition:\n    color 0.15s ease-in-out,\n    background-color 0.15s ease-in-out,\n    border-color 0.15s ease-in-out,\n    box-shadow 0.15s ease-in-out;\n}\n.heading-section[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: baseline;\n  gap: 6px;\n}\n.btn-section[_ngcontent-%COMP%] {\n  display: flex;\n}\n.buss-heading[_ngcontent-%COMP%] {\n  color: #333;\n  font-family: Roboto;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 14px;\n  padding: 8px 10px;\n}\n.gear-icon[_ngcontent-%COMP%] {\n  width: 17.851px;\n  height: 18.803px;\n  flex-shrink: 0;\n  cursor: pointer;\n}\n.fas[_ngcontent-%COMP%]   fa-code[_ngcontent-%COMP%] {\n  width: 20px;\n  height: 17.283px;\n  flex-shrink: 0;\n}\n.btn[_ngcontent-%COMP%]:hover {\n  background-color: #005996;\n}\n.compAssContainer[_ngcontent-%COMP%] {\n  width: 150px;\n  margin: 0px 5px 0px 5px;\n}\n/*# sourceMappingURL=dm-menu.component.css.map */"], changeDetection: 0 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmMenuComponent, { className: "DmMenuComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dm-menu\\dm-menu.component.ts", lineNumber: 24 });
})();

// src/app/admin/data-modeler1/components1/dmo-condition/dmo-condition.component.ts
var import_lodash2 = __toESM(require_lodash());
function DmoConditionComponent_tr_26_a_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 24);
    \u0275\u0275listener("click", function DmoConditionComponent_tr_26_a_13_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const i_r7 = \u0275\u0275nextContext().index;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.deleteCondition(i_r7));
    });
    \u0275\u0275element(1, "i", 25);
    \u0275\u0275elementEnd();
  }
}
function DmoConditionComponent_tr_26_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr")(1, "td")(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "td")(5, "span");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "td")(8, "span");
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(10, "td", 20)(11, "a", 21);
    \u0275\u0275listener("click", function DmoConditionComponent_tr_26_Template_a_click_11_listener() {
      const condition_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      const formPanel_r5 = \u0275\u0275reference(28);
      ctx_r3.editCondition(condition_r3);
      return \u0275\u0275resetView(formPanel_r5.open());
    });
    \u0275\u0275element(12, "i", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275template(13, DmoConditionComponent_tr_26_a_13_Template, 2, 0, "a", 23);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const condition_r3 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(condition_r3.Name);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(condition_r3.Status === "1" ? "Active" : "Inactive");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(condition_r3.ShortDesc);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", !ctx_r3.readonly);
  }
}
function DmoConditionComponent_ng_container_33_app_object_control_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-object-control", 27);
  }
  if (rf & 2) {
    const control_r8 = \u0275\u0275nextContext().$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("parentForm", ctx_r3.form)("config", control_r8);
  }
}
function DmoConditionComponent_ng_container_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmoConditionComponent_ng_container_33_app_object_control_1_Template, 1, 2, "app-object-control", 26);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r8 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(2, 1, control_r8.show));
  }
}
function DmoConditionComponent_button_37_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Create");
    \u0275\u0275elementContainerEnd();
  }
}
function DmoConditionComponent_button_37_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Update");
    \u0275\u0275elementContainerEnd();
  }
}
function DmoConditionComponent_button_37_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 28);
    \u0275\u0275listener("click", function DmoConditionComponent_button_37_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.updateCondition());
    });
    \u0275\u0275template(1, DmoConditionComponent_button_37_ng_container_1_Template, 2, 0, "ng-container", 29)(2, DmoConditionComponent_button_37_ng_container_2_Template, 2, 0, "ng-container", 29);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.newObject);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r3.newObject);
  }
}
function DmoConditionComponent_button_41_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 28);
    \u0275\u0275listener("click", function DmoConditionComponent_button_41_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onSubmit());
    });
    \u0275\u0275text(1, "Save");
    \u0275\u0275elementEnd();
  }
}
var DmoConditionComponent = class _DmoConditionComponent extends ObjectDetail {
  #areas;
  constructor(ref, fb, api) {
    super(ref, fb);
    this.api = api;
    this.readonly = false;
    this.newObject = true;
    this.conditions = [];
    this.deletedConditions = [];
    this.dmoList = [];
    this.status = enumToList(Status);
    this.availableItems$ = new BehaviorSubject([]);
    this.allConditions = [];
    this.bmoConditionItems = [];
    this.dmogConditionItems = [];
    this.dmoConditionItems = [];
    this.#areas = [
      { key: "BusinessModelObject", value: "Section" },
      { key: "DataModelGroup", value: "Card" },
      { key: "DataModelObject", value: "Data Model Object" },
      { key: "Trigger", value: "Trigger" }
    ];
    this.sanitizeConditions = (body) => {
      return body.Conditions.map((c) => {
        return __spreadProps(__spreadValues({}, c), {
          Dmo: c.Dmo?.key || c.Dmo,
          Exp: c.Exp?.key || c.Exp,
          Logical: c.Logical?.key || c.Logical,
          Value: c.Dmo?.Value || c.Value
        });
      });
    };
  }
  beforeFormInit() {
    this.conditions = [...this.parent.conditions];
    this.dmoList = this.parent.dmoListByType().map((item) => __spreadProps(__spreadValues({}, item), { disabled: item.key === this.parent.guid }));
    this.createConditionsConfig();
    this.generateConditionAreaItems();
  }
  initForm() {
    const validators = [...NAME_VALIDATORS];
    this.form = this.fb.group({
      Name: ["", { validators, updateOn: "blur" }],
      Version: [this.parent.parent.Version, [Validators.required]],
      Status: [this.status[0]],
      ShortDesc: ["", [Validators.required]],
      ExecuteElse: [true],
      Conditions: toFormArray([], { addCheckbox: true }),
      ConditionArea: this.fb.group({
        key: [""],
        value: [[]]
      }),
      Action: this.fb.group({
        Enabled: "",
        Mandatory: "",
        Visible: []
      })
    });
    this.defaultCondition();
    this.controls = [
      new ObjectControl({ name: "Name", label: "Condition Name", required: true, readonly: !this.newObject }),
      new ObjectControl({ name: "Version", readonly: true, required: true }),
      new ObjectControl({ name: "Status", options: of(this.status), type: "dropdown" }),
      new ObjectControl({ name: "ShortDesc", label: "Short Description", required: true }),
      new ObjectControl({ name: "ExecuteElse", label: "Execute else?", type: "switch" }),
      new ObjectControl({ name: "Conditions", type: "list", config: this.conditionsConfig, class: "span-12" }),
      new ObjectControl({
        name: "key",
        label: "Condition Area",
        type: "radio",
        group: this.f.ConditionArea,
        options: of(this.#areas)
      }),
      new ObjectControl({
        name: "value",
        label: "Available Items",
        type: "dropdown",
        group: this.f.ConditionArea,
        options: this.availableItems$,
        multiple: true,
        groupOptionsBy: "parent"
      }),
      new ObjectControl({
        name: "Enabled",
        type: "radio",
        class: "span-4",
        options: of([ActionState[0], ActionState[2], ActionState[1]]),
        group: this.f.Action
      }),
      new ObjectControl({
        name: "Mandatory",
        type: "radio",
        class: "span-4",
        options: of([ActionState[0], ActionState[2], ActionState[1]]),
        group: this.f.Action
      }),
      new ObjectControl({
        name: "Visible",
        type: "radio",
        class: "span-4",
        options: of([ActionState[0], ActionState[2], ActionState[1]]),
        group: this.f.Action
      })
    ];
    this.form.get("Name").valueChanges.subscribe((name) => {
      if (this.newObject && name && name.length >= 4 && !this.form.get("Name").hasError("maxlength") && !this.form.get("Name").hasError("pattern")) {
        this.api.checkNameValidity("condition", 0, name, this.parent.parent.Version, this.parent.parent.root.ProcessName).subscribe((IsExits) => {
          if (IsExits) {
            const nameControl = this.form.get("Name");
            nameControl.setErrors({
              nameExists: true,
              message: "Duplicate name"
            });
          }
        });
      }
    });
  }
  afterFormInit() {
    this.f.ConditionArea.get("key").valueChanges.pipe(takeWhile((_) => this.componentActive)).subscribe((val) => this.conditionAreaHandler(val));
  }
  editCondition(condition) {
    this.editedCondition = condition;
    this.submitted = false;
    this.newObject = false;
    if (this.controls) {
      this.controls[0].readonly = !this.newObject;
    }
    const selfAdded = condition.Conditions.some((cond) => cond.Dmo === this.parent.guid);
    const dmo = this.dmoList.find((dmo2) => dmo2.key === this.parent.guid);
    dmo.disabled = selfAdded;
    const validators = [...NAME_VALIDATORS];
    this.f.Name.clearValidators();
    this.f.Name.setValidators(validators);
    this.form.patchValue(__spreadProps(__spreadValues({}, condition), {
      ConditionArea: __spreadProps(__spreadValues({}, condition.ConditionArea), {
        value: this.parseConditionArea(condition.ConditionArea)
      }),
      Status: this.status.find((s) => s.key == condition.Status),
      ExecuteElse: condition.ExecuteElse == "0" ? false : true,
      Action: {
        Enabled: ActionState[condition.Action[0].value || 2],
        Mandatory: ActionState[condition.Action[1].value || 2],
        Visible: ActionState[condition.Action[2].value || 2]
      }
    }));
    this.f.Conditions.clear();
    condition.Conditions.map((cond) => __spreadProps(__spreadValues({}, cond), { Dmo: { key: cond.Dmo, value: this.dmoList.find((dmo2) => dmo2.key === cond.Dmo).value } })).map((cond) => toFormGroup(cond, { addCheckbox: cond.Dmo.key !== this.parent.guid, deletable: cond.Dmo.key !== this.parent.guid })).forEach((group) => this.f.Conditions.push(group));
    if (!selfAdded) {
      this.defaultCondition();
    }
    this.form.updateValueAndValidity();
  }
  defaultCondition() {
    const first = {
      Dmo: { key: this.parent.guid, value: this.parent.label, parent: this.parent.parent.DisplayName },
      Exp: "equal",
      Logical: "AND",
      Label: this.parent.dmoName,
      Value: ""
    };
    this.f.Conditions.push(toFormGroup(first, { addCheckbox: false, deletable: false }));
  }
  deleteCondition(i) {
    this.deletedConditions.push(this.conditions[i]);
    this.conditions = this.conditions.filter((_, idx) => idx !== i);
  }
  updateCondition() {
    this.submitted = true;
    if (this.form.valid) {
      const f = this.form.value;
      const condition = __spreadProps(__spreadValues({}, f), {
        Action: Object.entries(f.Action).map(([key, v]) => ({ key, value: v ? ActionState[v].toString() : ActionState.NA })),
        Status: f.Status?.key || f.Status || 0,
        Conditions: this.f.Conditions.value.map((cond) => __spreadProps(__spreadValues({}, cond), { Dmo: cond.Dmo?.key || cond.Dmo })),
        ExecuteElse: +f.ExecuteElse,
        ConditionArea: {
          key: f.ConditionArea.key || "",
          value: this.sanitizeConditionArea(f.ConditionArea.value || [])
        }
      });
      const idx = this.conditions.findIndex((c) => c.Name === condition.Name);
      if (idx !== -1)
        this.conditions[idx] = condition;
      else
        this.conditions.push(condition);
      this.onReset();
    }
  }
  generateConditionAreaItems() {
    const bm = this.parent.parent.root;
    const { selectedBMO, selectedDMOG } = bm;
    Object.values(bm.childrenMap).forEach((bmog) => {
      Object.values(bmog.childrenMap).filter((bmo) => !bmo.shared).forEach((bmo) => {
        if (bmo.id !== selectedBMO.id) {
          const bmoItem = { key: bmo.id, value: bmo.DisplayName, parent: bmog.Name, parentId: bmog.id };
          this.bmoConditionItems.push(bmoItem);
        }
        Object.values(bmo.childrenMap).filter((dmog) => !dmog.shared).forEach((dmog) => {
          if (dmog.id !== selectedDMOG.id) {
            const dmogItem = { key: dmog.id, value: dmog.DisplayName, parent: `${bmog.Name} / ${bmo.DisplayName}`, parentId: bmo.id };
            this.dmogConditionItems.push(dmogItem);
          }
          Object.values(dmog.childrenMap).forEach((dmo) => {
            const dmoItem = {
              key: dmo.guid,
              value: dmo.label,
              parent: `${bmog.Name} / ${bmo.DisplayName} / ${dmog.DisplayName}`,
              parentId: dmog.id
            };
            this.dmoConditionItems.push(dmoItem);
            this.allConditions.push(...dmo.conditions);
          });
        });
      });
    });
  }
  conditionAreaHandler(val) {
    let list = [];
    this.f.ConditionArea.get("value").reset([]);
    if (val == "BusinessModelObject") {
      list = this.bmoConditionItems;
    } else if (val === "DataModelGroup") {
      list = this.dmogConditionItems;
    } else if (val === "DataModelObject") {
      list = this.dmoConditionItems;
    } else if (val === "Trigger") {
      if (!this.triggersConditionItems) {
        this.api.getTriggers(this.parent.parent.root.ProcessName).subscribe((res) => {
          this.triggersConditionItems = arrayToList(res, "Key", "Value");
          this.availableItems$.next(this.triggersConditionItems);
          this.f.ConditionArea.get("value").patchValue(this.parseConditionArea(this.editedCondition?.ConditionArea));
        });
      } else {
        this.availableItems$.next(this.triggersConditionItems);
      }
      return;
    }
    this.availableItems$.next(list);
  }
  onReset() {
    this.form.reset({ Version: this.parent.parent.Version });
    if (this.controls) {
      this.controls[0].readonly = false;
    }
    this.f.Conditions.clear();
    this.defaultCondition();
    this.newObject = true;
  }
  onSubmit() {
    const bm = this.parent.parent.root;
    const dmo = this.currentDmog.formData;
    const dmogName = this.currentDmog.Name;
    if (this.parent.parent.PrntDmogIDs) {
      bm.selectedDMOG.formData._id = this.currentDmog.GUID;
    }
    const payload = {
      BMName: bm.Name,
      BMOGName: bm.selectedBMOG.Name,
      BMOName: bm.selectedBMO.Name,
      DMOGName: dmogName,
      CanvasType: bm.selectedBMOG.CanvasType,
      ProcessName: bm.ProcessName,
      Version: bm.Version,
      dmo,
      dmoCondition: {
        [this.parent.guid]: {
          Condition: this.conditions.map((obj) => {
            return __spreadProps(__spreadValues({}, obj), {
              Conditions: this.sanitizeConditions(obj)
            });
          })
        }
      }
    };
    const res = { payload, deletedConditions: this.deletedConditions };
    this.output.emit(res);
    this.ref.close(res);
  }
  sanitizeConditionArea(items) {
    return items.map((area) => ({ Key: area.parentId, Value: area.key }));
  }
  parseConditionArea(area) {
    if (!area)
      return [];
    const selectedList = (list) => (0, import_lodash2.intersectionWith)(list, area.value, (a, b) => a.key === b.Value);
    switch (area.key) {
      case "BusinessModelObject":
        return selectedList(this.bmoConditionItems);
      case "DataModelGroup":
        return selectedList(this.dmogConditionItems);
      case "DataModelObject":
        return selectedList(this.dmoConditionItems);
      case "Trigger":
        return selectedList(this.triggersConditionItems);
      default:
        return [];
    }
  }
  createConditionsConfig() {
    const operators = ["AND", "OR"];
    const expressions = ["equal", "not equal"];
    this.conditionsConfig = {
      columns: [
        { key: "Dmo", displayValue: "Data Model Object", type: ListColumnType.Dropdown, validators: [Validators.required] },
        { key: "Exp", displayValue: "Expression", type: ListColumnType.Dropdown, validators: [Validators.required] },
        { key: "Value", displayValue: "Value", validators: [Validators.required] },
        { key: "Logical", displayValue: "Operator", type: ListColumnType.Dropdown }
      ],
      defaultValues: {
        Exp: primitiveArrayToList(expressions),
        Logical: primitiveArrayToList(operators),
        Dmo: this.dmoList
      },
      actions: { add: true, edit: true, delete: true },
      checkbox: true
    };
  }
  static {
    this.\u0275fac = function DmoConditionComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmoConditionComponent)(\u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(DataModelerApiService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmoConditionComponent, selectors: [["app-dmo-condition"]], inputs: { uiData: "uiData", readonly: "readonly", currentDmog: "currentDmog" }, standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 42, vars: 11, consts: [["formPanel", ""], [1, "popup"], [1, "popup__header"], [2, "margin-right", "5px"], [1, "popup__close"], [1, "fas", "fa-times-circle", "fa-fw", 3, "click"], [3, "expanded"], [1, "stripped", "table", "table-bordered", "text-muted"], [1, "text-muted"], [1, "span-row"], [2, "width", "100px"], [1, "text-center", 2, "width", "60px"], [4, "ngFor", "ngForOf"], [3, "hidden"], [3, "formGroup"], [1, "double-column"], [1, "actions"], ["type", "button", 1, "btn", "btn-light", "btn-sm", 3, "click"], ["class", "btn btn-primary btn-sm", "type", "submit", 3, "click", 4, "ngIf"], [1, "popup__actions"], [1, "d-flex", "align-items-center", "justify-content-around"], ["title", "Open", 1, "save-btn", 2, "cursor", "pointer", 3, "click"], [1, "fas", "fa-pencil-alt"], ["title", "Delete", "class", "save-btn", "style", "cursor: pointer;", 3, "click", 4, "ngIf"], ["title", "Delete", 1, "save-btn", 2, "cursor", "pointer", 3, "click"], [1, "far", "fa-trash-alt"], [3, "parentForm", "config", 4, "ngIf"], [3, "parentForm", "config"], ["type", "submit", 1, "btn", "btn-primary", "btn-sm", 3, "click"], [4, "ngIf"]], template: function DmoConditionComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "h2");
        \u0275\u0275element(3, "i", 3);
        \u0275\u0275text(4);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "span", 4)(6, "i", 5);
        \u0275\u0275listener("click", function DmoConditionComponent_Template_i_click_6_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.ref.close());
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(7, "mat-expansion-panel", 6)(8, "mat-expansion-panel-header");
        \u0275\u0275text(9, " Conditions ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(10, "table", 7)(11, "thead", 8)(12, "tr", 9)(13, "th")(14, "span");
        \u0275\u0275text(15, "Condition");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(16, "th", 10)(17, "span");
        \u0275\u0275text(18, "Status");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(19, "th")(20, "span");
        \u0275\u0275text(21, "Sort Description");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(22, "th", 11)(23, "span");
        \u0275\u0275text(24, "Actions");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(25, "tbody");
        \u0275\u0275template(26, DmoConditionComponent_tr_26_Template, 14, 4, "tr", 12);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(27, "mat-expansion-panel", 13, 0)(29, "mat-expansion-panel-header");
        \u0275\u0275text(30);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(31, "form", 14)(32, "div", 15);
        \u0275\u0275template(33, DmoConditionComponent_ng_container_33_Template, 3, 3, "ng-container", 12);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(34, "div", 16)(35, "button", 17);
        \u0275\u0275listener("click", function DmoConditionComponent_Template_button_click_35_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onReset());
        });
        \u0275\u0275text(36, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275template(37, DmoConditionComponent_button_37_Template, 3, 2, "button", 18);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(38, "div", 19)(39, "button", 17);
        \u0275\u0275listener("click", function DmoConditionComponent_Template_button_click_39_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onCancel());
        });
        \u0275\u0275text(40, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275template(41, DmoConditionComponent_button_41_Template, 2, 0, "button", 18);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275classMap(ctx.uiData.class);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1("", ctx.uiData.name, " Conditions");
        \u0275\u0275advance(3);
        \u0275\u0275property("expanded", false);
        \u0275\u0275advance(19);
        \u0275\u0275property("ngForOf", ctx.conditions);
        \u0275\u0275advance();
        \u0275\u0275property("hidden", !ctx.conditions.length && ctx.readonly);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.readonly ? "Select Condition" : ctx.newObject ? "Create Condition" : "Update Condition", " ");
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.form);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.controls);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !ctx.readonly);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !ctx.readonly);
      }
    }, dependencies: [
      MatExpansionPanel,
      MatExpansionPanelHeader,
      NgForOf,
      NgIf,
      ReactiveFormsModule,
      \u0275NgNoValidate,
      NgControlStatusGroup,
      FormGroupDirective,
      ObjectControlComponent,
      AsyncPipe
    ], styles: ["\n\n[_nghost-%COMP%]     .mat-radio-container {\n  height: 12px;\n  width: 12px;\n}\n[_nghost-%COMP%]     .mat-radio-outer-circle {\n  height: 12px;\n  width: 12px;\n  border-width: 1px;\n}\n[_nghost-%COMP%]     .mat-radio-inner-circle {\n  height: 12px;\n  width: 12px;\n}\n[_nghost-%COMP%]     .mat-radio-button .mat-radio-ripple {\n  visibility: hidden;\n}\n[_nghost-%COMP%]     .mat-radio-label {\n  font-size: 12px;\n}\nmat-accordion[_ngcontent-%COMP%], \nmat-expansion-panel[_ngcontent-%COMP%] {\n  box-shadow: unset;\n  background: none;\n  border-radius: 0;\n  margin-bottom: 2rem;\n}\n  table thead tr {\n  height: 30px;\n  font-size: 10px;\n  font-weight: bold;\n}\n  table thead td {\n  border: 1px solid #dee2e6;\n  margin-bottom: 10px;\n}\nmat-expansion-panel[_ngcontent-%COMP%] {\n  border-top: 1px solid #ccc;\n  overflow: unset;\n}\n.mat-expansion-panel-header[_ngcontent-%COMP%] {\n  height: 30px;\n}\n.mat-expansion-panel-header.mat-expanded[_ngcontent-%COMP%] {\n  height: 30px;\n}\n  .mat-expansion-panel-content > .mat-expansion-panel-body {\n  padding: 0;\n}\nmat-expansion-panel-header[_ngcontent-%COMP%] {\n  padding: 0px 1px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\ntable.basicTable[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  border-bottom: 1px solid #000;\n  color: #000;\n  font-size: 10px;\n  font-weight: bold;\n  letter-spacing: 0.3px;\n  line-height: 1.9;\n}\n.btn.btn-primary.btn-sm[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n  border-radius: 8px;\n  padding: 6px 12px;\n  gap: 10px;\n  height: 40px;\n  width: 130px;\n}\n.btn.btn-primary.btn-sm[type=submit][_ngcontent-%COMP%] {\n  background-color: #EB583B;\n  color: white;\n  border: none;\n}\n.actions[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 10px;\n}\n.actions[_ngcontent-%COMP%]   .btn-sm[type=button][_ngcontent-%COMP%] {\n  align-items: center;\n  justify-content: center;\n  height: 40px;\n  width: 130px;\n  background-color: #f6f6f6;\n  color: #333;\n  border: 1px solid #ccc;\n  cursor: pointer;\n}\ntable[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], \ntable[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  color: #4D4D51;\n  font-size: 10px;\n  font-weight: bold;\n  letter-spacing: 0.3px;\n}\n/*# sourceMappingURL=dmo-condition.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmoConditionComponent, { className: "DmoConditionComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmo-condition\\dmo-condition.component.ts", lineNumber: 33 });
})();

// src/app/admin/data-modeler1/components1/grid-header-mapper/grid-header-mapper.component.ts
var _c03 = () => ({ "margin-bottom": "10px" });
var _c1 = () => ({ "font-size": "10px", "margin-left": "10px" });
function GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "a", 11);
    \u0275\u0275listener("click", function GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_2_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r4);
      const row_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.editRow(row_r5));
    });
    \u0275\u0275element(2, "i", 21);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 11);
    \u0275\u0275listener("click", function GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_2_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r4);
      const i_r6 = \u0275\u0275nextContext().index;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteRow(i_r6));
    });
    \u0275\u0275element(4, "i", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
}
function GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 11);
    \u0275\u0275listener("click", function GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_3_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r7);
      const row_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.saveRow(row_r5));
    });
    \u0275\u0275element(1, "i", 23);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "a", 11);
    \u0275\u0275listener("click", function GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_3_Template_a_click_2_listener() {
      \u0275\u0275restoreView(_r7);
      const row_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.cancelEdit(row_r5));
    });
    \u0275\u0275element(3, "i", 24);
    \u0275\u0275elementEnd();
  }
}
function GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 25);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_6_Template_ng_select_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r8);
      const row_r5 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(row_r5.objectKey, $event) || (row_r5.objectKey = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const row_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("items", ctx_r1.columnNames);
    \u0275\u0275twoWayProperty("ngModel", row_r5.objectKey);
    \u0275\u0275property("readonly", !row_r5.isEditing)("searchable", true);
  }
}
function GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(row_r5.objectKey);
  }
}
function GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 26);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_12_Template_ng_select_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r9);
      const row_r5 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(row_r5.dataType, $event) || (row_r5.dataType = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const row_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("items", ctx_r1.dataTypes);
    \u0275\u0275twoWayProperty("ngModel", row_r5.dataType);
    \u0275\u0275property("disabled", !row_r5.isEditing)("searchable", true);
  }
}
function GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(row_r5.dataType);
  }
}
function GridHeaderMapperComponent_ng_container_0_tr_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr")(1, "td", 17);
    \u0275\u0275template(2, GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_2_Template, 5, 0, "ng-container", 18)(3, GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_3_Template, 4, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td");
    \u0275\u0275template(6, GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_6_Template, 2, 4, "ng-container", 18)(7, GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_7_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "td")(10, "input", 19);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_tr_18_Template_input_ngModelChange_10_listener($event) {
      const row_r5 = \u0275\u0275restoreView(_r3).$implicit;
      \u0275\u0275twoWayBindingSet(row_r5.displayName, $event) || (row_r5.displayName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "td");
    \u0275\u0275template(12, GridHeaderMapperComponent_ng_container_0_tr_18_ng_container_12_Template, 2, 4, "ng-container", 18)(13, GridHeaderMapperComponent_ng_container_0_tr_18_ng_template_13_Template, 2, 1, "ng-template", null, 2, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "td")(16, "input", 20);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_tr_18_Template_input_ngModelChange_16_listener($event) {
      const row_r5 = \u0275\u0275restoreView(_r3).$implicit;
      \u0275\u0275twoWayBindingSet(row_r5.width, $event) || (row_r5.width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("keydown", function GridHeaderMapperComponent_ng_container_0_tr_18_Template_input_keydown_16_listener($event) {
      const row_r5 = \u0275\u0275restoreView(_r3).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.preventIfTotalWidthExceeds($event, row_r5));
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const row_r5 = ctx.$implicit;
    const editMode_r10 = \u0275\u0275reference(4);
    const objectKeyView_r11 = \u0275\u0275reference(8);
    const dataTypesView_r12 = \u0275\u0275reference(14);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !row_r5.isEditing)("ngIfElse", editMode_r10);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", row_r5.isEditing)("ngIfElse", objectKeyView_r11);
    \u0275\u0275advance(4);
    \u0275\u0275twoWayProperty("ngModel", row_r5.displayName);
    \u0275\u0275property("readonly", !row_r5.isEditing);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", row_r5.isEditing)("ngIfElse", dataTypesView_r12);
    \u0275\u0275advance(4);
    \u0275\u0275twoWayProperty("ngModel", row_r5.width);
    \u0275\u0275property("readonly", !row_r5.isEditing);
  }
}
function GridHeaderMapperComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 4)(2, "button", 5);
    \u0275\u0275listener("click", function GridHeaderMapperComponent_ng_container_0_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.getColumnsName());
    });
    \u0275\u0275text(3, "Call API");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "table", 6)(5, "thead", 7)(6, "tr")(7, "th", 8);
    \u0275\u0275text(8, "Actions");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "th", 8);
    \u0275\u0275text(10, "Column");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "th", 8);
    \u0275\u0275text(12, "Display Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "th", 8);
    \u0275\u0275text(14, "Data Type");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "th", 8);
    \u0275\u0275text(16, "Width (%)");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(17, "tbody");
    \u0275\u0275template(18, GridHeaderMapperComponent_ng_container_0_tr_18_Template, 17, 10, "tr", 9);
    \u0275\u0275elementStart(19, "tr")(20, "td", 10)(21, "a", 11);
    \u0275\u0275listener("click", function GridHeaderMapperComponent_ng_container_0_Template_a_click_21_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addRow());
    });
    \u0275\u0275element(22, "i", 12);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(23, "td")(24, "ng-select", 13);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_Template_ng_select_ngModelChange_24_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.newRow.objectKey, $event) || (ctx_r1.newRow.objectKey = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(25, "td")(26, "input", 14);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_Template_input_ngModelChange_26_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.newRow.displayName, $event) || (ctx_r1.newRow.displayName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(27, "td")(28, "ng-select", 15);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_Template_ng_select_ngModelChange_28_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.newRow.dataType, $event) || (ctx_r1.newRow.dataType = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(29, "td")(30, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function GridHeaderMapperComponent_ng_container_0_Template_input_ngModelChange_30_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.newRow.width, $event) || (ctx_r1.newRow.width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("disabled", !ctx_r1.shouldAllowCallAPI());
    \u0275\u0275advance(2);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction0(13, _c03));
    \u0275\u0275advance(14);
    \u0275\u0275property("ngForOf", ctx_r1.headerMapping);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction0(14, _c1));
    \u0275\u0275advance(2);
    \u0275\u0275property("items", ctx_r1.columnNames);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.newRow.objectKey);
    \u0275\u0275property("searchable", true);
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.newRow.displayName);
    \u0275\u0275advance(2);
    \u0275\u0275property("closeOnSelect", true)("items", ctx_r1.dataTypes);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.newRow.dataType);
    \u0275\u0275property("searchable", true);
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.newRow.width);
  }
}
var GridHeaderMapperComponent = class _GridHeaderMapperComponent {
  #ApiService;
  constructor(toastr) {
    this.toastr = toastr;
    this.#ApiService = inject(DataModelerApiService);
    this.columnNames = [];
    this.allAvaliableColumns = [];
    this.dataTypes = ["DropDown", "Text", "Number", "Date"];
    this.newRow = { objectKey: null, displayName: "", dataType: null, width: "" };
    this.masterSelected = false;
  }
  ngOnInit() {
    if (this.shouldAllowCallAPI) {
      this.getColumnsName();
    }
  }
  addRow() {
    const hasInvalidValue = Object.values(this.newRow).some((val) => val === "" || val === null || val === void 0);
    if (hasInvalidValue) {
      return;
    }
    const totalWidth = this.getTotalWidth() + Number(this.newRow.width) || 0;
    ;
    if (totalWidth > 100) {
      this.toastr.error("Total width cannot be greater than 100%");
      return;
    }
    this.headerMapping.push(__spreadProps(__spreadValues({}, this.newRow), {
      isEditing: false,
      selected: false
    }));
    this.newRow = { objectKey: null, displayName: "", dataType: null, width: "" };
    this.filterAvailableColumns();
  }
  editRow(row) {
    row.isEditing = true;
  }
  saveRow(row) {
    const totalWidth = this.getTotalWidth();
    if (totalWidth > 100) {
      this.toastr.error("Total width cannot be greater than 100%");
      return;
    }
    this.filterAvailableColumns();
    row.isEditing = false;
  }
  deleteRow(index) {
    this.headerMapping.splice(index, 1);
  }
  deleteSelectedRows() {
    this.headerMapping = this.headerMapping.filter((row) => !row.selected);
  }
  cancelEdit(row) {
    row.isEditing = false;
  }
  checkUncheckAll() {
    this.headerMapping.forEach((row) => {
      row.selected = this.masterSelected;
    });
  }
  isAllSelected() {
    this.masterSelected = this.headerMapping.length > 0 && this.headerMapping.every((row) => row.selected);
  }
  shouldAllowCallAPI() {
    const { dataSrc, data } = this.parentForm?.value || {};
    const requestBody = data?.dependentbody;
    return !!(dataSrc?.value && data?.endpoint && data?.methodtype && requestBody && Object.keys(requestBody).length);
  }
  getColumnsName() {
    const { dataSrc, data } = this.parentForm?.value || {};
    const requestBody = data?.dependentbody;
    const dataSource = dataSrc?.value;
    const endpoint = data?.endpoint;
    const methodtype = data?.methodtype.key || data?.methodtype;
    const body = JSON.parse(requestBody);
    this.#ApiService.callDynamicApi(dataSource, endpoint, methodtype, body).subscribe((response) => {
      if (Array.isArray(response.Data)) {
        this.columnNames = response.Data;
        const firstItem = response.Data[0];
        if (firstItem) {
          this.columnNames = Object.keys(firstItem);
          this.allAvaliableColumns = this.columnNames;
          if (this.columnNames) {
            this.filterAvailableColumns();
          }
        }
      }
    });
  }
  filterAvailableColumns() {
    this.columnNames = this.allAvaliableColumns.filter((col) => !this.headerMapping.some((h) => h.objectKey === col));
  }
  getTotalWidth() {
    return this.headerMapping.map((row) => Number(row.width) || 0).reduce((a, b) => a + b, 0);
  }
  preventIfTotalWidthExceeds(event, currentRow) {
    const key = event.key;
    const allowedKeys = ["Backspace", "Tab", "ArrowLeft", "ArrowRight", "Delete"];
    if (allowedKeys.includes(key)) {
      return;
    }
    if (!/^\d$/.test(key)) {
      event.preventDefault();
      return;
    }
    const currentValue = String(currentRow.width ?? "");
    const selectionStart = event.target.selectionStart ?? currentValue.length;
    const selectionEnd = event.target.selectionEnd ?? currentValue.length;
    const newValue = currentValue.substring(0, selectionStart) + key + currentValue.substring(selectionEnd);
    const updatedWidth = parseInt(newValue, 10) || 0;
    const otherWidths = this.headerMapping.filter((row) => row !== currentRow).map((row) => Number(row.width) || 0);
    const total = otherWidths.reduce((a, b) => a + b, 0) + updatedWidth;
    if (total > 100) {
      event.preventDefault();
    }
  }
  static {
    this.\u0275fac = function GridHeaderMapperComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _GridHeaderMapperComponent)(\u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GridHeaderMapperComponent, selectors: [["app-grid-header-mapper"]], inputs: { parentForm: "parentForm", headerMapping: "headerMapping" }, standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [["editMode", ""], ["objectKeyView", ""], ["dataTypesView", ""], [4, "ngIf"], [1, "actions", "deleteContainer", "d-flex", "justify-content-end", "mt-1", "mb-3"], ["type", "button", 1, "btn", "btn-outline-primary", 3, "click", "disabled"], [1, "table", "table-bordered", 3, "ngStyle"], [1, "thead-light"], ["scope", "col"], [4, "ngFor", "ngForOf"], [1, "actions", "text-end", "align-middle"], [3, "click"], ["title", "Add", 1, "fas", "fa-plus", "ml-2", 3, "ngStyle"], ["placeholder", "Select...", 3, "ngModelChange", "items", "ngModel", "searchable"], ["placeholder", "", 1, "form-control", 3, "ngModelChange", "ngModel"], ["placeholder", "Select...", 3, "ngModelChange", "closeOnSelect", "items", "ngModel", "searchable"], [1, "form-control", 3, "ngModelChange", "ngModel"], [1, "actions"], [4, "ngIf", "ngIfElse"], [1, "form-control", 3, "ngModelChange", "ngModel", "readonly"], [1, "form-control", 3, "ngModelChange", "keydown", "ngModel", "readonly"], ["title", "Edit", 1, "fas", "fa-edit", "ml-1"], ["title", "Delete", 1, "fas", "fa-trash-alt", "ml-3"], ["title", "Edit", 1, "fas", "fa-save", "ml-1"], ["title", "Delete", 1, "fas", "fa-times", "ml-3"], ["placeholder", "Select...", 3, "ngModelChange", "items", "ngModel", "readonly", "searchable"], ["placeholder", "Select...", 3, "ngModelChange", "items", "ngModel", "disabled", "searchable"]], template: function GridHeaderMapperComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, GridHeaderMapperComponent_ng_container_0_Template, 31, 15, "ng-container", 3);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.parentForm);
      }
    }, dependencies: [CommonModule, NgForOf, NgIf, NgStyle, NgSelectModule, NgSelectComponent, FormsModule, DefaultValueAccessor, NgControlStatus, NgModel, ReactiveFormsModule], styles: ["\n\n  .ng-select.ng-select-single .ng-select-container {\n  height: 24px !important;\n}\ntd[_ngcontent-%COMP%] {\n  vertical-align: middle;\n  padding: 0 0.75rem;\n}\ninput[_ngcontent-%COMP%]:read-only {\n  background-color: transparent;\n  border-color: transparent;\n  outline-color: transparent;\n}\nselect[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.form-control[_ngcontent-%COMP%] {\n  height: 28px;\n  border-radius: 3px;\n  font-size: 12px;\n}\n.actions[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n.actions[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.tr[_ngcontent-%COMP%] {\n  display: table-row;\n}\n.td[_ngcontent-%COMP%] {\n  display: table-cell;\n}\n.table[_ngcontent-%COMP%] {\n  table-layout: fixed;\n  margin-bottom: 0;\n}\n.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  font-size: 12px;\n  font-weight: bold;\n  color: #4D4D51;\n  padding: 0.75rem;\n  text-align: left;\n  vertical-align: middle;\n}\n.table[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #4D4D51;\n}\ntable[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  height: 30px;\n  font-size: 10px;\n  font-weight: bold;\n  color: #4D4D51;\n  border-bottom-width: 0px;\n}\n.new[_ngcontent-%COMP%]   .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], \n.new[_ngcontent-%COMP%]   .table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  border-top: none;\n}\n.checkbox-cell[_ngcontent-%COMP%] {\n  width: 50px;\n}\n.actions-cell[_ngcontent-%COMP%] {\n  width: 70px;\n}\n.download[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.download[_ngcontent-%COMP%]:hover {\n  color: #226398;\n}\n.action[_ngcontent-%COMP%] {\n  width: 8%;\n}\n.deleteContainer[_ngcontent-%COMP%] {\n  height: 20px;\n}\n.deleteContainer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #4d4d51;\n  text-decoration: none;\n}\n.deleteContainer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  font-size: 12px;\n}\ntable[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:last-child   td[_ngcontent-%COMP%] {\n  padding: 5px;\n  border: none !important;\n}\ntable[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:last-child {\n  margin-top: 5px;\n  border-bottom: none !important;\n}\ntable[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  margin-top: auto;\n}\n/*# sourceMappingURL=grid-header-mapper.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GridHeaderMapperComponent, { className: "GridHeaderMapperComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\grid-header-mapper\\grid-header-mapper.component.ts", lineNumber: 16 });
})();

// src/app/admin/data-modeler1/components1/dependent-fields-mapper/dependent-fields-mapper.component.ts
var _c04 = () => ({ "transform": "translateY(-15px)" });
var _c12 = () => ({ "float": "right", "margin-bottom": "10px" });
var _c2 = () => ({ "font-size": "10px" });
function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "a", 12);
    \u0275\u0275listener("click", function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_2_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const row_r4 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.editRow(row_r4));
    });
    \u0275\u0275element(2, "i", 18);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 12);
    \u0275\u0275listener("click", function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_2_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r3);
      const i_r5 = \u0275\u0275nextContext().index;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteRow(i_r5));
    });
    \u0275\u0275element(4, "i", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
}
function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 12);
    \u0275\u0275listener("click", function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_3_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const row_r4 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.saveRow(row_r4));
    });
    \u0275\u0275element(1, "i", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "a", 12);
    \u0275\u0275listener("click", function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_3_Template_a_click_2_listener() {
      \u0275\u0275restoreView(_r6);
      const row_r4 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.cancelEdit(row_r4));
    });
    \u0275\u0275element(3, "i", 21);
    \u0275\u0275elementEnd();
  }
}
function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 22);
    \u0275\u0275twoWayListener("ngModelChange", function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_6_Template_ng_select_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r7);
      const row_r4 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(row_r4.objectKey, $event) || (row_r4.objectKey = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const row_r4 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("items", ctx_r1.columnNames);
    \u0275\u0275twoWayProperty("ngModel", row_r4.objectKey);
    \u0275\u0275property("readonly", !row_r4.isEditing)("searchable", true);
  }
}
function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(row_r4.objectKey);
  }
}
function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 23);
    \u0275\u0275twoWayListener("ngModelChange", function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_10_Template_ng_select_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r8);
      const row_r4 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(row_r4.mapDmoName, $event) || (row_r4.mapDmoName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const row_r4 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("items", ctx_r1.avaliableDMOs)("bindLabel", "DISPNAME")("bindValue", "NAM");
    \u0275\u0275twoWayProperty("ngModel", row_r4.mapDmoName);
    \u0275\u0275property("readonly", !row_r4.isEditing)("searchable", true);
  }
}
function DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r4 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.getDmoDisplayName(row_r4.mapDmoName));
  }
}
function DependentFieldsMapperComponent_ng_container_0_tr_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 16);
    \u0275\u0275template(2, DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_2_Template, 5, 0, "ng-container", 17)(3, DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_3_Template, 4, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td");
    \u0275\u0275template(6, DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_6_Template, 2, 4, "ng-container", 17)(7, DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_7_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "td");
    \u0275\u0275template(10, DependentFieldsMapperComponent_ng_container_0_tr_14_ng_container_10_Template, 2, 6, "ng-container", 17)(11, DependentFieldsMapperComponent_ng_container_0_tr_14_ng_template_11_Template, 2, 1, "ng-template", null, 2, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const row_r4 = ctx.$implicit;
    const editMode_r9 = \u0275\u0275reference(4);
    const objectKeyView_r10 = \u0275\u0275reference(8);
    const mapDmoNameView_r11 = \u0275\u0275reference(12);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !row_r4.isEditing)("ngIfElse", editMode_r9);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", row_r4.isEditing)("ngIfElse", objectKeyView_r10);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", row_r4.isEditing)("ngIfElse", mapDmoNameView_r11);
  }
}
function DependentFieldsMapperComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 4)(2, "button", 5);
    \u0275\u0275listener("click", function DependentFieldsMapperComponent_ng_container_0_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.getColumnsNames());
    });
    \u0275\u0275text(3, "Call API");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "table", 6)(5, "thead", 7)(6, "tr")(7, "th", 8);
    \u0275\u0275text(8, "Actions");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "th");
    \u0275\u0275text(10, "Column Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "th");
    \u0275\u0275text(12, "DMO Name");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "tbody");
    \u0275\u0275template(14, DependentFieldsMapperComponent_ng_container_0_tr_14_Template, 13, 6, "tr", 9);
    \u0275\u0275elementStart(15, "tr", 10)(16, "td", 11)(17, "a", 12);
    \u0275\u0275listener("click", function DependentFieldsMapperComponent_ng_container_0_Template_a_click_17_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addRow());
    });
    \u0275\u0275element(18, "i", 13);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(19, "td")(20, "ng-select", 14);
    \u0275\u0275twoWayListener("ngModelChange", function DependentFieldsMapperComponent_ng_container_0_Template_ng_select_ngModelChange_20_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.newRow.objectKey, $event) || (ctx_r1.newRow.objectKey = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(21, "td")(22, "ng-select", 15);
    \u0275\u0275twoWayListener("ngModelChange", function DependentFieldsMapperComponent_ng_container_0_Template_ng_select_ngModelChange_22_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.newRow.mapDmoName, $event) || (ctx_r1.newRow.mapDmoName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()()()()()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction0(13, _c04));
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction0(14, _c12))("disabled", !ctx_r1.shouldAllowCallAPI());
    \u0275\u0275advance(12);
    \u0275\u0275property("ngForOf", ctx_r1.mappingDmos);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction0(15, _c2));
    \u0275\u0275advance(2);
    \u0275\u0275property("items", ctx_r1.columnNames);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.newRow.objectKey);
    \u0275\u0275property("searchable", true);
    \u0275\u0275advance(2);
    \u0275\u0275property("items", ctx_r1.avaliableDMOs)("bindLabel", "DISPNAME")("bindValue", "NAM");
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.newRow.mapDmoName);
    \u0275\u0275property("searchable", true);
  }
}
var DependentFieldsMapperComponent = class _DependentFieldsMapperComponent {
  #ApiService;
  constructor(route) {
    this.route = route;
    this.#ApiService = inject(DataModelerApiService);
    this.columnNames = [];
    this.dataTypes = ["Text", "number"];
    this.newRow = { objectKey: null, mapDmoName: null };
    this.masterSelected = false;
    this.avaliableDMOs = [];
    this.bmId = this.route.snapshot.queryParams.BMID;
  }
  ngOnInit() {
    this.parentForm.valueChanges.subscribe(() => {
      this.shouldAllowCallAPI();
    });
  }
  addRow() {
    const shouldAdd = Object.values(this.newRow).every((val) => val === "" || val === null || val === void 0);
    if (shouldAdd) {
      return;
    }
    this.mappingDmos.push(__spreadProps(__spreadValues({}, this.newRow), {
      isEditing: false,
      selected: false
    }));
    this.newRow = { objectKey: null, mapDmoName: null };
  }
  editRow(row) {
    row.isEditing = true;
  }
  saveRow(row) {
    row.isEditing = false;
  }
  deleteRow(index) {
    this.mappingDmos.splice(index, 1);
  }
  deleteSelectedRows() {
    this.mappingDmos = this.mappingDmos.filter((row) => !row.selected);
  }
  cancelEdit(row) {
    row.isEditing = false;
  }
  checkUncheckAll() {
    this.mappingDmos.forEach((row) => {
      row.selected = this.masterSelected;
    });
  }
  isAllSelected() {
    this.masterSelected = this.mappingDmos.length > 0 && this.mappingDmos.every((row) => row.selected);
  }
  shouldAllowCallAPI() {
    const { data } = this.parentForm?.value || {};
    const requestBody = data?.dependentbody;
    return !!(data?.dependentdatasrc && data?.endpoint && data?.methodtype && requestBody && Object.keys(requestBody).length);
  }
  getColumnsNames() {
    const { data } = this.parentForm?.value || {};
    const requestBody = data?.dependentbody;
    const dataSource = data?.dependentdatasrc?.value || data?.dependentdatasrc;
    const endpoint = data?.endpoint;
    const methodtype = data?.methodtype?.key || data?.methodtype;
    const body = JSON.parse(requestBody);
    body.GridFilters = [];
    const columnsApi$ = this.#ApiService.callDynamicApi(dataSource, endpoint, methodtype, body);
    const dmosApi$ = this.#ApiService.getdmobybmid(this.bmId);
    forkJoin([columnsApi$, dmosApi$]).subscribe(([columnsResponse, dmosResponse]) => {
      columnsResponse = columnsResponse.Data;
      if (Array.isArray(columnsResponse.Data)) {
        const firstItem = columnsResponse.Data[0];
        if (firstItem) {
          this.columnNames = Object.keys(firstItem);
        }
      }
      this.avaliableDMOs = dmosResponse.Data || [];
    });
  }
  getDmoDisplayName(nam) {
    const dmo = this.avaliableDMOs?.find((d) => d.NAM === nam);
    return dmo ? `${dmo.DISPNAME} (${dmo.NAM})` : nam;
  }
  static {
    this.\u0275fac = function DependentFieldsMapperComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DependentFieldsMapperComponent)(\u0275\u0275directiveInject(ActivatedRoute));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DependentFieldsMapperComponent, selectors: [["app-dependent-fields-mapper"]], inputs: { parentForm: "parentForm", mappingDmos: "mappingDmos" }, standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [["editMode", ""], ["objectKeyView", ""], ["mapDmoNameView", ""], [4, "ngIf"], [1, "col-lg-12", 3, "ngStyle"], ["type", "button", 1, "btn", "btn-outline-primary", 3, "click", "ngStyle", "disabled"], [1, "table"], [1, "thead-light"], [1, "actions-cell"], [4, "ngFor", "ngForOf"], [1, "add_new"], [1, "actions", "d-flex", "justify-content-end", "align-items-center"], [3, "click"], ["title", "Add", 1, "fas", "fa-plus", "ml-2", 3, "ngStyle"], ["placeholder", "Select...", 3, "ngModelChange", "items", "ngModel", "searchable"], ["placeholder", "Select...", 3, "ngModelChange", "items", "bindLabel", "bindValue", "ngModel", "searchable"], [1, "actions"], [4, "ngIf", "ngIfElse"], ["title", "Edit", 1, "fas", "fa-edit", "ml-1"], ["title", "Delete", 1, "fas", "fa-trash-alt", "ml-3"], ["title", "Edit", 1, "fas", "fa-save", "ml-1"], ["title", "Delete", 1, "fas", "fa-times", "ml-3"], ["placeholder", "Select...", 3, "ngModelChange", "items", "ngModel", "readonly", "searchable"], ["placeholder", "Select...", 3, "ngModelChange", "items", "bindLabel", "bindValue", "ngModel", "readonly", "searchable"]], template: function DependentFieldsMapperComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, DependentFieldsMapperComponent_ng_container_0_Template, 23, 16, "ng-container", 3);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.parentForm);
      }
    }, dependencies: [CommonModule, NgForOf, NgIf, NgStyle, NgSelectModule, NgSelectComponent, FormsModule, NgControlStatus, NgModel, ReactiveFormsModule], styles: ["\n\n  .ng-select.ng-select-single .ng-select-container {\n  height: 24px !important;\n}\ntd[_ngcontent-%COMP%] {\n  vertical-align: middle;\n  padding: 0 0.75rem;\n}\ninput[_ngcontent-%COMP%]:read-only {\n  background-color: transparent;\n  border-color: transparent;\n  outline-color: transparent;\n}\nselect[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.form-control[_ngcontent-%COMP%] {\n  height: 28px;\n  border-radius: 3px;\n  font-size: 12px;\n}\n.actions[_ngcontent-%COMP%] {\n  margin-top: auto;\n  margin-right: 20px;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n.actions[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.tr[_ngcontent-%COMP%] {\n  display: table-row;\n}\n.td[_ngcontent-%COMP%] {\n  display: table-cell;\n}\n.table[_ngcontent-%COMP%] {\n  table-layout: fixed;\n  margin-bottom: 0;\n}\n.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  font-size: 12px;\n  font-weight: bold;\n  color: #4D4D51;\n  padding: 0.75rem;\n  text-align: left;\n  vertical-align: middle;\n}\n.table[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #4D4D51;\n}\ntable[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  height: 30px;\n  font-size: 10px;\n  font-weight: bold;\n  color: #4D4D51;\n  border-bottom-width: 0px;\n}\n.new[_ngcontent-%COMP%]   .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], \n.new[_ngcontent-%COMP%]   .table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  border-top: none;\n}\n.checkbox-cell[_ngcontent-%COMP%] {\n  width: 50px;\n}\n.actions-cell[_ngcontent-%COMP%] {\n  width: 70px;\n}\n.download[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.download[_ngcontent-%COMP%]:hover {\n  color: #226398;\n}\n.action[_ngcontent-%COMP%] {\n  width: 8%;\n}\n.deleteContainer[_ngcontent-%COMP%] {\n  height: 20px;\n}\n.deleteContainer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #4d4d51;\n  text-decoration: none;\n}\n.deleteContainer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  font-size: 12px;\n}\n.col-lg-2-5[_ngcontent-%COMP%] {\n  width: 22.833333%;\n}\ntable[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:last-child   td[_ngcontent-%COMP%] {\n  padding: 5px;\n  border: none !important;\n}\ntable[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:last-child {\n  margin-top: 5px;\n  border-bottom: none !important;\n}\ntable[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  margin-top: auto;\n}\n/*# sourceMappingURL=dependent-fields-mapper.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DependentFieldsMapperComponent, { className: "DependentFieldsMapperComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dependent-fields-mapper\\dependent-fields-mapper.component.ts", lineNumber: 16 });
})();

// src/app/admin/data-modeler1/components1/dmo-detail/dmo-detail.component.ts
var _c05 = (a0) => ({ controls: a0 });
function DmoDetailComponent_ng_container_0_h2_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275element(1, "i", 15);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275classMap(ctx_r1.uiData.class);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("New ", ctx_r1.uiData.name, "");
  }
}
function DmoDetailComponent_ng_container_0_h2_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275element(1, "i", 15);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275classMap(ctx_r1.uiData.class);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.uiData.name, " Details");
  }
}
function DmoDetailComponent_ng_container_0_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DmoDetailComponent_ng_container_0_app_tab_11_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DmoDetailComponent_ng_container_0_app_tab_11_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DmoDetailComponent_ng_container_0_app_tab_11_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmoDetailComponent_ng_container_0_app_tab_11_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext(3);
    const gridHeaderMapping_r3 = \u0275\u0275reference(4);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", gridHeaderMapping_r3);
  }
}
function DmoDetailComponent_ng_container_0_app_tab_11_ng_container_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DmoDetailComponent_ng_container_0_app_tab_11_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmoDetailComponent_ng_container_0_app_tab_11_ng_container_3_ng_container_1_Template, 1, 0, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext(3);
    const dependentFieldsMapper_r4 = \u0275\u0275reference(6);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", dependentFieldsMapper_r4);
  }
}
function DmoDetailComponent_ng_container_0_app_tab_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "app-tab", 9);
    \u0275\u0275template(1, DmoDetailComponent_ng_container_0_app_tab_11_ng_container_1_Template, 1, 0, "ng-container", 10)(2, DmoDetailComponent_ng_container_0_app_tab_11_ng_container_2_Template, 2, 1, "ng-container", 3)(3, DmoDetailComponent_ng_container_0_app_tab_11_ng_container_3_Template, 2, 1, "ng-container", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    const renderControls_r5 = \u0275\u0275reference(2);
    \u0275\u0275property("title", "Data")("hasInvalidForm", ctx_r1.submitted && ctx_r1.dataTabHasErrors);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", renderControls_r5)("ngTemplateOutletContext", \u0275\u0275pureFunction1(6, _c05, ctx_r1.dataControls));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.uiData.type === "datagrd");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.uiData.type === "keyvaluesearchbox" && ctx_r1.shouldShowDepMapper());
  }
}
function DmoDetailComponent_ng_container_0_app_tab_12_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DmoDetailComponent_ng_container_0_app_tab_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "app-tab", 9);
    \u0275\u0275template(1, DmoDetailComponent_ng_container_0_app_tab_12_ng_container_1_Template, 1, 0, "ng-container", 10);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    const renderControls_r5 = \u0275\u0275reference(2);
    \u0275\u0275property("title", "Validation")("hasInvalidForm", ctx_r1.submitted && ctx_r1.validationTabHasErrors);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", renderControls_r5)("ngTemplateOutletContext", \u0275\u0275pureFunction1(4, _c05, ctx_r1.validationControls));
  }
}
function DmoDetailComponent_ng_container_0_button_16_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Create");
    \u0275\u0275elementContainerEnd();
  }
}
function DmoDetailComponent_ng_container_0_button_16_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Update");
    \u0275\u0275elementContainerEnd();
  }
}
function DmoDetailComponent_ng_container_0_button_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 17);
    \u0275\u0275listener("click", function DmoDetailComponent_ng_container_0_button_16_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onSubmit());
    });
    \u0275\u0275template(1, DmoDetailComponent_ng_container_0_button_16_ng_container_1_Template, 2, 0, "ng-container", 3)(2, DmoDetailComponent_ng_container_0_button_16_ng_container_2_Template, 2, 0, "ng-container", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.newObject);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.newObject);
  }
}
function DmoDetailComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 4)(2, "div", 5);
    \u0275\u0275template(3, DmoDetailComponent_ng_container_0_h2_3_Template, 3, 3, "h2", 3)(4, DmoDetailComponent_ng_container_0_h2_4_Template, 3, 3, "h2", 3);
    \u0275\u0275elementStart(5, "span", 6)(6, "i", 7);
    \u0275\u0275listener("click", function DmoDetailComponent_ng_container_0_Template_i_click_6_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.ref.close());
    });
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(7, "form", 8)(8, "app-tabs")(9, "app-tab", 9);
    \u0275\u0275template(10, DmoDetailComponent_ng_container_0_ng_container_10_Template, 1, 0, "ng-container", 10);
    \u0275\u0275elementEnd();
    \u0275\u0275template(11, DmoDetailComponent_ng_container_0_app_tab_11_Template, 4, 8, "app-tab", 11)(12, DmoDetailComponent_ng_container_0_app_tab_12_Template, 2, 6, "app-tab", 11);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "div", 12)(14, "button", 13);
    \u0275\u0275listener("click", function DmoDetailComponent_ng_container_0_Template_button_click_14_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCancel());
    });
    \u0275\u0275text(15, "Cancel");
    \u0275\u0275elementEnd();
    \u0275\u0275template(16, DmoDetailComponent_ng_container_0_button_16_Template, 3, 2, "button", 14);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const renderControls_r5 = \u0275\u0275reference(2);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r1.newObject);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.newObject);
    \u0275\u0275advance(3);
    \u0275\u0275property("formGroup", ctx_r1.form);
    \u0275\u0275advance(2);
    \u0275\u0275property("title", "Display")("hasInvalidForm", ctx_r1.submitted && ctx_r1.displayTabHasErrors);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", renderControls_r5)("ngTemplateOutletContext", \u0275\u0275pureFunction1(10, _c05, ctx_r1.displayControls));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.uiData.hasData && ctx_r1.uiData.type !== "textarea");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.uiData.validate);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", !ctx_r1.parent.root.published && !ctx_r1.readonly);
  }
}
function DmoDetailComponent_ng_template_1_ng_container_1_app_object_control_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-object-control", 21);
  }
  if (rf & 2) {
    const control_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("submitted", ctx_r1.submitted)("parentForm", ctx_r1.form)("config", control_r7);
  }
}
function DmoDetailComponent_ng_template_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmoDetailComponent_ng_template_1_ng_container_1_app_object_control_1_Template, 1, 3, "app-object-control", 20);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r7 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(2, 1, control_r7.show));
  }
}
function DmoDetailComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 18);
    \u0275\u0275template(1, DmoDetailComponent_ng_template_1_ng_container_1_Template, 3, 3, "ng-container", 19);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const controls_r8 = ctx.controls;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("formGroup", ctx_r1.form);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", controls_r8);
  }
}
function DmoDetailComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid-header-mapper", 22);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("parentForm", ctx_r1.form)("headerMapping", ctx_r1.gridHeaderMapper);
  }
}
function DmoDetailComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-dependent-fields-mapper", 23);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("parentForm", ctx_r1.form)("mappingDmos", ctx_r1.gridHeaderMapper);
  }
}
var DmoDetailComponent = class _DmoDetailComponent extends ObjectDetail {
  constructor(ref, fb, api, toastr) {
    super(ref, fb);
    this.api = api;
    this.toastr = toastr;
    this.readonly = false;
    this.displayTabHasErrors = false;
    this.dataTabHasErrors = false;
    this.validationTabHasErrors = false;
    this.dataSources = enumToList(DataSource);
    this.GridViewDataSource = enumToList(GridViewDataSource);
    this.customDataSources = enumToList(CustomDataSource);
    this.regexTypes = enumToList(RegExType);
    this.storageProviders = enumToList(StorageProvider);
    this.status = enumToList(DMOStatus);
    this.uploadLimit = primitiveArrayToList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    this.dropDownTypeDMO = [];
    this.managedDDLTypedmo = [];
    this.gridHeaderMapper = [];
    this.keyValueConfig = {
      columns: [
        {
          key: "value",
          displayValue: "Value",
          validators: [Validators.required]
        }
      ],
      checkbox: true,
      actions: { add: true, edit: true, delete: true }
    };
    this.jsonConfig = {
      columns: [
        {
          key: "TextField",
          displayValue: "Text Field",
          validators: [Validators.required]
        },
        {
          key: "ValueField",
          displayValue: "Value Field",
          validators: [Validators.required]
        },
        {
          key: "ParentKey",
          displayValue: "Parent Key",
          validators: [Validators.required]
        }
      ],
      checkbox: true,
      actions: { add: true, edit: true, delete: true }
    };
    this.mappingConfig = {
      columns: [
        { key: "Name", displayValue: "Name", validators: [Validators.required] },
        { key: "GUID", displayValue: "GUID", validators: [Validators.required] }
      ],
      checkbox: true,
      actions: { add: true, edit: true, delete: true }
    };
    this.depConfig = {
      columns: [
        { key: "Name", type: ListColumnType.Dropdown, displayValue: "DMO Name", validators: [Validators.required] },
        { key: "Name", displayValue: "Column Name", validators: [Validators.required] }
      ],
      checkbox: true,
      actions: { add: true, edit: true, delete: true }
    };
    this.validateControl = (config) => {
      const { trackedControl, addValidation, validatedControl, validators } = config;
      return trackedControl.valueChanges.pipe(takeWhile((_) => this.componentActive), startWith(trackedControl.value), tap((val) => {
        if (addValidation(val)) {
          validatedControl.setValidators(validators);
        } else {
          validatedControl.clearValidators();
        }
        validatedControl.updateValueAndValidity();
      }));
    };
  }
  get f_form() {
    return this.form.controls;
  }
  beforeFormInit() {
    this.dataClass = new DMComponent(this.data, this.parent);
    console.log(this.data, this.dataClass);
    this.dataClass.type = this.uiData.type;
    this.colorCodes$ = this.api.getColorCodes().pipe(map((list) => arrayToList(list, "value", "value")));
    const { ProcessName } = this.parent.root;
    this.roles$ = this.api.getRoles(ProcessName).pipe(map((list) => arrayToList(list, "value", "label")));
    this.parent?.formData?.components.forEach((dmo) => {
      if (dmo.type === "select") {
        if (dmo.guid != this.dataClass.guid)
          this.dropDownTypeDMO.push({
            key: dmo.guid,
            dmoName: dmo.dmoName,
            value: dmo.label
          });
      }
      if (dmo.type === "manageddropdown") {
        if (dmo.guid != this.dataClass.guid)
          this.managedDDLTypedmo.push({
            key: dmo.guid,
            dmoName: dmo.dmoName,
            value: dmo.label
          });
      }
    });
  }
  initForm() {
    this.form = this.toFormGroup();
    this.runDynamicValidation();
    if (["datagrd", "keyvaluesearchbox"].includes(this.uiData.type) && !this.newObject && this.data.regxType) {
      try {
        this.gridHeaderMapper = JSON.parse(this.data.regxType);
      } catch {
        this.gridHeaderMapper = [];
      }
    }
    this.displayControls = [
      new ObjectControl({
        name: "dmoName",
        label: "Data Model Object Name",
        required: true,
        hint: "25 characters max",
        readonly: !this.newObject
      }),
      new ObjectControl({
        name: "label",
        label: "Friendly Name",
        hint: "The label for this field that will appear next to it"
      }),
      new ObjectControl({
        name: "description",
        label: "Short Description",
        type: "text",
        hint: "The description is text that will appear below the input field"
      }),
      new ObjectControl({
        name: "defaultValue",
        label: "Default Value",
        hint: `The will be the value for this field, before user interaction. 
        Having a default value will override the placeholder text. 
        Current Date for Date With Calendar DMO use xxxCurrentDatexxx in Default Value`
      }),
      new ObjectControl({
        name: "tooltip",
        label: "Long Description",
        class: "span-12",
        hint: "The description is text that will appear below the input field"
      }),
      new ObjectControl({
        name: "searchField",
        label: "Parent Control",
        show: of(this.uiData.type === "keyvaluesearchbox")
      }),
      new ObjectControl({
        name: "customDefaultValue",
        label: "Child Control",
        show: of(this.uiData.type === "keyvaluesearchbox")
      }),
      new ObjectControl({
        name: "compareOprator",
        label: "Operator",
        type: "dropdown",
        options: of(["GT", "GE", "LT", "LE"].map((key) => ({ key, value: key }))),
        show: of(["datetime", "staticdatebox"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "comparatorSelect",
        label: "Comparator",
        type: "dropdown",
        options: of(this.dataClass.dmoListByType(this.uiData.type)),
        hint: "Allow to load data on the basis of comparator control",
        show: of(["datetime", "staticdatebox"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "RangeCal",
        label: "Range",
        placeholder: "_-_",
        hint: "Put range to allow date before and after from current date",
        show: of(["datetime", "staticdatebox"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "showtooltip",
        label: "Show Long Description as Help",
        type: "switch"
      }),
      new ObjectControl({
        name: "is24hourformat",
        label: "24 Hour Format",
        type: "switch",
        show: of(this.uiData.type === "datetimebox")
      }),
      new ObjectControl({
        name: "parentDmo",
        label: "Parent Control",
        type: "dropdown",
        options: of(this.dropDownTypeDMO),
        show: of(["select", "multiselect"].includes(this.uiData.type))
      }),
      (() => {
        const ctrl = new ObjectControl({
          name: "parentDmo",
          label: "Parent Control",
          type: "dropdown",
          options: of(this.managedDDLTypedmo),
          show: of(this.uiData.type === "manageddropdown")
        });
        ctrl.clearable = true;
        return ctrl;
      })(),
      new ObjectControl({
        name: "status",
        label: "Status",
        type: "dropdown",
        options: of(this.status)
      }),
      new ObjectControl({
        name: "rte",
        label: "RTE Enabled",
        type: "switch",
        show: of(["textarea"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "Height",
        label: "No of Rows",
        required: true,
        hint: "No of lines",
        type: "text",
        show: this.form ? this.form.get("rte").valueChanges.pipe(startWith(this.form.get("rte").value), map((rte) => rte === true && this.uiData.type === "textarea")) : of(false)
      })
    ];
    this.dataControls = [
      new ObjectControl({
        name: "values",
        label: "Options",
        type: "list",
        required: true,
        config: this.keyValueConfig,
        show: of(["selectboxes", "radio"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "values",
        label: "Options",
        type: "list",
        group: this.f.data,
        config: this.keyValueConfig,
        required: this.uiData.type === "list",
        show: of(["datetimezone", "list"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "dataSrc",
        label: "Data Source",
        type: "dropdown",
        options: this.uiData.type === "datagrd" ? of(enumToList(GridViewDataSource)) : of(enumToList(DataSource)),
        show: of(["select", "multiselect", "datagrd"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "values",
        label: "Options",
        type: "list",
        group: this.f.data,
        config: this.keyValueConfig,
        required: true,
        show: this.show(this.form, "dataSrc", DataSource.Values, [
          "select",
          "multiselect"
        ])
      }),
      new ObjectControl({
        name: "fieldparams",
        label: "Response Parameter",
        group: this.f.data,
        show: this.show(this.form, "dataSrc", DataSource.WFApi, [
          "select",
          "multiselect"
        ])
      }),
      new ObjectControl({
        name: "modelbody",
        label: "Model Body",
        type: "textarea",
        group: this.f.data,
        show: this.show(this.form, "dataSrc", DataSource.WFApi, [
          "select",
          "multiselect"
        ])
      }),
      new ObjectControl({
        name: "values",
        label: "Color Codes",
        type: "dropdown",
        group: this.f.data,
        multiple: true,
        options: this.colorCodes$,
        show: of(this.uiData.type === "colorpicker")
      }),
      new ObjectControl({
        name: "startwith",
        label: "Start With",
        show: of(this.uiData.type === "id")
      }),
      new ObjectControl({
        name: "minlength",
        label: "Number of digits/characters",
        show: of(this.uiData.type === "id"),
        required: true
      }),
      new ObjectControl({
        name: "israndom",
        label: "Random (incremental if unchecked)",
        type: "switch",
        show: of(this.uiData.type === "id")
      }),
      new ObjectControl({
        name: "isalphanumeric",
        label: "Alphanumeric (numeric if unchecked)",
        type: "switch",
        show: of(this.uiData.type === "id")
      }),
      new ObjectControl({
        name: "values",
        label: "Data Source",
        type: "dropdown",
        multiple: true,
        group: this.f.data,
        options: this.roles$,
        show: of(this.uiData.type === "roletype")
      }),
      new ObjectControl({
        name: "regxType",
        label: "Regular Expression",
        type: "dropdown",
        options: of(enumToList(RegExType)),
        show: of(["textarea", "textfield", "url", "rangebox"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "expression",
        label: "Expression",
        hint: "Create your own regular expression",
        show: this.show(this.form, "regxType", RegExType.Custom, [
          "textarea",
          "textfield",
          "url",
          "rangebox"
        ])
      }),
      new ObjectControl({
        name: "expressionMessage",
        label: "Validation Message",
        hint: "Write your custom validation message if expression fail",
        show: of(["textarea", "textfield", "url", "rangebox"].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "isEncrypt",
        label: "Encrypt",
        type: "switch",
        show: of([
          "textarea",
          "textfield",
          "file",
          "uploadimage",
          "url",
          "rangebox"
        ].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "conditionNA",
        label: "Condition NA",
        type: "switch",
        show: of(this.uiData.type === "file")
      }),
      new ObjectControl({
        name: "isautoCrop",
        label: "Auto Crop",
        type: "switch",
        show: of(this.uiData.type === "uploadimage")
      }),
      new ObjectControl({
        name: "uploadLimit",
        label: "Number of files to be uploaded",
        type: "dropdown",
        options: of(this.uploadLimit),
        show: of(this.uiData.type === "uploadimage"),
        required: true
      }),
      new ObjectControl({
        name: "datasource",
        label: "Data Source",
        group: this.f.data,
        show: of([
          "keyvaluesearchbox",
          "keyvaluedropdownlist",
          "autocompletesearchbox"
        ].includes(this.uiData.type)),
        required: true,
        hint: "LMKAPI/WFAPI/ICEAPI/MethodName"
      }),
      new ObjectControl({
        name: "fieldparams",
        label: "Response Parameter",
        group: this.f.data,
        required: true,
        show: of([
          "keyvaluesearchbox",
          "keyvaluedropdownlist",
          "autocompletesearchbox"
        ].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "modelbody",
        label: "Model Body",
        type: "textarea",
        required: true,
        group: this.f.data,
        show: of([
          "keyvaluesearchbox",
          "keyvaluedropdownlist",
          "autocompletesearchbox"
        ].includes(this.uiData.type))
      }),
      new ObjectControl({
        name: "resource",
        label: "Display Value",
        group: this.f.data,
        required: true,
        show: of(this.uiData.type === "autocompletesearchbox")
      }),
      new ObjectControl({
        name: "mappings",
        label: "Mappings",
        type: "list",
        group: this.f.data,
        config: this.mappingConfig,
        show: of(this.uiData.type === "autocompletesearchbox")
      }),
      new ObjectControl({
        name: "dependencydmos",
        label: "Dependency Dmos",
        type: "list",
        group: this.f.data,
        config: this.mappingConfig,
        show: of(this.uiData.type === "autocompletesearchbox")
      }),
      new ObjectControl({
        name: "dependentdmos",
        label: "Dependent Dmos",
        type: "list",
        group: this.f.data,
        config: this.depConfig,
        show: of(this.uiData.type === "autocompletesearchbox")
      }),
      new ObjectControl({
        name: "emitonstart",
        label: "Emit On Start",
        type: "switch",
        group: this.f.data,
        show: of(this.uiData.type === "autocompletesearchbox")
      }),
      new ObjectControl({
        name: "kvboxmultiselect",
        label: "Multi-Select",
        type: "switch",
        group: this.f.data,
        show: of(this.uiData.type === "keyvaluesearchbox" || this.uiData.type === "roletype")
      }),
      new ObjectControl({
        name: "toggledepmapper",
        label: "Define Dependent Fields",
        type: "switch",
        group: this.f.data,
        show: of(this.uiData.type === "keyvaluesearchbox")
      }),
      new ObjectControl({
        name: "dependentdatasrc",
        label: "Data Source",
        type: "dropdown",
        group: this.f.data,
        options: of(enumToList(GridViewDataSource)),
        show: this.toggledepMapper()
      }),
      new ObjectControl({
        name: "endpoint",
        label: "Api Endpoint",
        group: this.f.data,
        show: this.checkVisibilityCondition()
      }),
      new ObjectControl({
        name: "methodtype",
        label: "Method Type",
        type: "dropdown",
        group: this.f.data,
        options: of(enumToList(MethodTypes)),
        show: this.checkVisibilityCondition()
      }),
      new ObjectControl({
        name: "dependentbody",
        label: "Request Body",
        type: "textarea",
        group: this.f.data,
        show: this.checkVisibilityCondition()
      })
    ];
    this.validationControls = [
      new ObjectControl({
        name: "required",
        label: "Required",
        type: "switch",
        hint: "A required field must be filled in before the form can be submitted",
        group: this.f.validate,
        show: of(!!this.uiData.validate)
      }),
      new ObjectControl({
        name: "disabled",
        label: "Read Only",
        type: "switch",
        group: this.f.validate,
        show: of(!!this.uiData.validate)
      }),
      new ObjectControl({
        name: "minLength",
        label: "Minimum Length",
        group: this.f.validate,
        hint: "The minimum length requirement this field must meet",
        show: of(this.uiData.validate?.minLength)
      }),
      new ObjectControl({
        name: "maxLength",
        label: "Maximum Length",
        group: this.f.validate,
        hint: "The maximum length requirement this field must meet",
        required: true,
        show: of(this.uiData.validate?.maxLength)
      })
    ];
    this.checkDmoNameValidity();
    this.form.get("dmoName").valueChanges.subscribe(() => {
      this.checkDmoNameValidity();
    });
    let cntrlRequired = this.form.controls["validate"]["controls"].required;
    let cntrlReadOnly = this.form.controls["validate"]["controls"].disabled;
    cntrlRequired.valueChanges.subscribe((val) => {
      if (val && cntrlReadOnly.value) {
        cntrlReadOnly.setValue(false);
      }
    });
    cntrlReadOnly.valueChanges.subscribe((val) => {
      if (val && cntrlReadOnly.value) {
        cntrlRequired.setValue(false);
      }
    });
    this.form.statusChanges.subscribe(() => {
      if (this.submitted) {
        this.checkTabErrors();
      }
    });
  }
  checkDmoNameValidity() {
    return __async(this, null, function* () {
      const name = this.form.get("dmoName").value;
      if (this.newObject && name && name.length >= 4 && !this.form.get("dmoName")?.hasError("maxlength") && !this.form.get("dmoName")?.hasError("pattern")) {
        this.api.checkNameValidity("dmo", 0, name, this.parent.root.Version, this.parent.root.ProcessName).subscribe((IsExits) => {
          if (IsExits) {
            this.form.get("dmoName")?.setErrors({
              nameExists: true,
              message: "Duplicate name"
            });
          }
        });
      }
    });
  }
  show(group, name, compareTo, type) {
    return group.get(name).valueChanges.pipe(startWith(group.get(name).value), map((v) => v?.key || v), map((v) => {
      const types = Array.isArray(type) ? type : [type];
      return v === compareTo && types.includes(this.uiData.type);
    }));
  }
  toggledepMapper() {
    const toggleControl = this.f.data.get("toggledepmapper");
    if (!toggleControl) {
      return of(false);
    }
    return toggleControl.valueChanges.pipe(startWith(toggleControl.value), map((value) => value === true));
  }
  shouldShowDepMapper() {
    return this.f.data.get("toggledepmapper")?.value === true;
  }
  checkVisibilityCondition() {
    const toggleControl = this.f.data.get("toggledepmapper");
    if (toggleControl == null) {
      console.log("toggledepmapper control not found");
      return of(false);
    }
    return toggleControl.valueChanges.pipe(startWith(toggleControl.value), map((toggleValue) => {
      if (this.uiData.type === "datagrd") {
        return true;
      }
      if (this.uiData.type === "keyvaluesearchbox") {
        return toggleValue === true;
      }
      return false;
    }));
  }
  toFormGroup() {
    const group = {};
    Object.entries(this.dataClass).forEach(([key, value]) => {
      if (key === "dataSrc" && this.uiData.type !== "datagrd") {
        value = this.dataSources.find(({ key: key2 }) => key2 === value);
      } else if (key === "dataSrc" && this.uiData.type === "datagrd") {
        value = this.GridViewDataSource.find(({ key: key2 }) => key2 === value);
      } else if (key === "regxType") {
        value = this.regexTypes.find(({ key: key2 }) => key2 === value);
      } else if (key === "uploadStorage") {
        value = this.storageProviders.find(({ key: key2 }) => key2 === value);
      }
      group[key] = this.fb.control(value);
    });
    const validators = [...NAME_VALIDATORS];
    group.dmoName = this.fb.control(this.dataClass.dmoName, {
      validators,
      updateOn: "blur"
    });
    group.rte = this.fb.control(this.dataClass.rte ?? false);
    group.Height = this.fb.control(this.dataClass.height ?? "");
    group.values = toFormArray(this.dataClass.values, { addCheckbox: true });
    group.status = this.fb.control(this.status.find((s) => s.key == this.dataClass.status));
    if (this.uiData.type === "uploadimage") {
      group.uploadLimit = this.fb.control(this.uploadLimit.find((limit) => limit.key === +this.dataClass.uploadLimit) || null, [Validators.required]);
    }
    const data = {};
    Object.entries(this.dataClass.data).forEach(([key, value]) => {
      if ([
        "apiurl",
        "apiparams",
        "fieldparams",
        "modelbody",
        "resource"
      ].includes(key)) {
        data[key] = this.fb.control(value);
        return;
      }
      if (key === "values") {
        if (this.uiData.type === "roletype") {
          value = arrayToList(value, "value", "label");
        } else {
          value = value.map(({ value: value2 }) => ({ key: value2, value: value2 }));
        }
        if (["datetimezone", "select", "list", "multiselect"].includes(this.uiData.type)) {
          data[key] = toFormArray(value, { addCheckbox: true });
          return;
        }
      } else if (key === "resource" || this.uiData.type === "select") {
        value = this.customDataSources.find(({ key: key2 }) => key2 === value);
      } else if (["json", "dependencydmos", "dependentdmos", "mappings"].includes(key)) {
        data[key] = toFormArray(value, { addCheckbox: true });
        return;
      }
      data[key] = this.fb.control(value);
    });
    group.data = this.fb.group(data);
    const validate = {};
    Object.entries(this.dataClass.validate).forEach(([key, value]) => {
      if (key === "maxLength" && this.uiData.validate?.maxLength) {
        validate[key] = this.fb.control(value, [Validators.required]);
      } else {
        validate[key] = this.fb.control(value);
      }
    });
    group.validate = this.fb.group(validate);
    group.rte.valueChanges.subscribe(() => {
      group.Height.reset("");
    });
    return this.fb.group(group);
  }
  runDynamicValidation() {
    if (["textarea"].includes(this.uiData.type)) {
      const rteControl = this.f.rte;
      const heightControl = this.f.Height;
      if (rteControl && heightControl) {
        this.validateControl({
          trackedControl: rteControl,
          addValidation: (val) => val === true,
          validatedControl: heightControl,
          validators: Validators.required
        }).subscribe();
      }
    }
    if (["select", "list", "multiselect"].includes(this.uiData.type)) {
      this.validateControl({
        trackedControl: this.f.dataSrc,
        addValidation: (src) => (src?.key || src) === DataSource.Values,
        validatedControl: this.f.data.get("values"),
        validators: Validators.required
      }).subscribe();
    }
    if (["selectboxes", "radio"].includes(this.uiData.type)) {
      this.validateControl({
        trackedControl: this.f.type,
        addValidation: (type) => type === this.uiData.type,
        validatedControl: this.f.values,
        validators: Validators.required
      }).subscribe();
    }
    if (["id"].includes(this.uiData.type)) {
      const controlsToValidate = ["minlength"];
      controlsToValidate.forEach((controlName) => {
        const control = this.f[controlName];
        if (control) {
          this.validateControl({
            trackedControl: this.f.type,
            addValidation: (type) => type === this.uiData.type,
            validatedControl: control,
            validators: Validators.required
          }).subscribe();
        }
      });
    }
    if (["autocompletesearchbox"].includes(this.uiData.type)) {
      const controlsToValidate = ["resource", "datasource", "fieldparams", "modelbody"];
      controlsToValidate.forEach((controlName) => {
        const control = this.f.data.get(controlName);
        if (control) {
          this.validateControl({
            trackedControl: this.f.type,
            addValidation: (type) => type === this.uiData.type,
            validatedControl: control,
            validators: Validators.required
          }).subscribe();
        }
      });
    }
    if (["keyvaluesearchbox", "keyvaluedropdownlist"].includes(this.uiData.type)) {
      const controlsToValidate = ["datasource", "fieldparams", "modelbody"];
      controlsToValidate.forEach((controlName) => {
        const control = this.f.data.get(controlName);
        if (control) {
          this.validateControl({
            trackedControl: this.f.type,
            addValidation: (type) => type === this.uiData.type,
            validatedControl: control,
            validators: Validators.required
          }).subscribe();
        }
      });
    }
  }
  checkTabErrors() {
    this.displayTabHasErrors = this.displayControls.some((control) => {
      const controlName = control.name;
      const formControl = this.form.get(controlName);
      return formControl?.invalid;
    });
    if (this.uiData.hasData) {
      this.dataTabHasErrors = this.dataControls.some((control) => {
        let formControl;
        const controlName = control.name;
        if (control.group) {
          formControl = control.group.get(controlName);
        } else if (controlName.includes(".")) {
          formControl = this.form.get(controlName);
        } else {
          formControl = this.form.get(controlName);
        }
        return formControl?.invalid;
      });
    }
    if (this.uiData.validate) {
      this.validationTabHasErrors = this.validationControls.some((control) => {
        let formControl;
        const controlName = control.name;
        if (control.group) {
          formControl = control.group.get(controlName);
        } else if (controlName.includes(".")) {
          formControl = this.form.get(controlName);
        } else {
          formControl = this.form.get(controlName);
        }
        return formControl?.invalid;
      });
    }
  }
  onSubmit() {
    if (this.isGridTypeWithInvalidUpload()) {
      this.toastr.warning("You can't create file upload and image upload type dmo for Grid type dmog", "Warning");
      return false;
    }
    this.submitted = true;
    this.checkTabErrors();
    if (!this.form.valid)
      return;
    const _a = this.form.value, { parent } = _a, f = __objRest(_a, ["parent"]);
    const dataValues = this.getDataValues(f);
    const dataResource = this.getDataResource(f);
    let APIURLOptions = "";
    if (this.uiData.type === "datagrd" && this.headerMapperComponent) {
      APIURLOptions = this.buildApiOptions(f, this.headerMapperComponent.headerMapping);
    } else if (this.uiData.type === "keyvaluesearchbox" && this.DependentFieldsMapperComponent) {
      APIURLOptions = this.buildApiOptionsForKeyVal(f, this.DependentFieldsMapperComponent.mappingDmos);
    } else if (this.uiData.type === "textarea") {
      const jsonPayload = {
        RTE: this.form.get("rte").value === true ? "Yes" : "No",
        Rows: this.form.get("rte").value === false ? "" : this.form.get("Height").value
      };
      APIURLOptions = JSON.stringify(jsonPayload);
    }
    const formValue = this.buildFormValue(f, dataValues, dataResource, APIURLOptions);
    this.output.emit(formValue);
    this.ref.close(formValue);
  }
  isGridTypeWithInvalidUpload() {
    return this.form?.value?.parent?.Type === "Grid" && ["uploadimage", "file"].includes(this.uiData.type);
  }
  getDataValues(f) {
    if (["roletype", "colorpicker"].includes(this.uiData.type)) {
      return listToTypeArray(f.data.values, "value", "label");
    }
    return f.data.values.map(({ value, key }) => ({
      label: value,
      value
    }));
  }
  getDataResource(f) {
    return f.data.resource?.key || f.data.resource || "";
  }
  buildFormValue(f, dataValues, dataResource, APIURLOptions) {
    return __spreadProps(__spreadValues({}, f), {
      type: this.uiData.type,
      default_Value: f.defaultValue,
      values: f.values.map(({ value }) => ({ label: value, value })),
      ApiUrlOptions: APIURLOptions,
      data: __spreadProps(__spreadValues({}, f.data), {
        values: dataValues,
        resource: dataResource,
        json: f.data.json?.key || f.data.json,
        methodtype: f.data?.methodtype?.key,
        toggledepmapper: f.data?.toggledepmapper || false,
        dependentdatasrc: f.data?.dependentdatasrc?.value || f.data?.dependentdatasrc,
        dependentbody: f.data?.dependentbody || ""
      }),
      dataSrc: f.dataSrc?.key || f.dataSrc,
      regxType: f.regxType?.key || f.regxType,
      status: f.status?.key || f.status,
      uploadLimit: f.uploadLimit?.key || f.uploadLimit,
      parentGuid: f.parentDmo?.key
    });
  }
  buildApiOptions(formData, headerMapping) {
    headerMapping.forEach((item) => {
      delete item.isEditing;
      delete item.selected;
    });
    const apiOptions = {
      Method_Type: formData.data?.methodtype?.key || formData.data?.methodtype || "",
      Api_Type: formData.dependentdatasrc?.value || formData.data?.dependentdatasrc || "",
      Api_Endpoint: formData.data?.endpoint || "",
      Header_Mapping: headerMapping || {},
      Request_Body: formData.data?.dependentbody || {}
    };
    return JSON.stringify(apiOptions);
  }
  buildApiOptionsForKeyVal(formData, json) {
    json.forEach((item) => {
      delete item.isEditing;
      delete item.selected;
    });
    const apiOptions = {
      Is_DependentField: formData.data?.toggledepmapper || false,
      Method_Type: formData.data?.methodtype?.key || formData.data?.methodtype || "",
      Api_Type: formData.data?.dependentdatasrc?.value || formData.data?.dependentdatasrc || "",
      Api_Endpoint: formData.data?.endpoint || "",
      Column_Mapping: json || {},
      Request_Body: formData.data?.dependentbody || {}
    };
    return JSON.stringify(apiOptions);
  }
  static {
    this.\u0275fac = function DmoDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmoDetailComponent)(\u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmoDetailComponent, selectors: [["app-dmo-detail"]], viewQuery: function DmoDetailComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(GridHeaderMapperComponent, 5);
        \u0275\u0275viewQuery(DependentFieldsMapperComponent, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.headerMapperComponent = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.DependentFieldsMapperComponent = _t.first);
      }
    }, inputs: { uiData: "uiData", readonly: "readonly" }, standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 7, vars: 1, consts: [["renderControls", ""], ["gridHeaderMapping", ""], ["dependentFieldsMapper", ""], [4, "ngIf"], [1, "popup"], [1, "popup__header"], [1, "popup__close"], [1, "fas", "fa-times-circle", "fa-fw", 3, "click"], [3, "formGroup"], [3, "title", "hasInvalidForm"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "title", "hasInvalidForm", 4, "ngIf"], [1, "popup__actions"], ["type", "button", 1, "btn", "btn-light", "btn-sm", 3, "click"], ["class", "btn btn-primary btn-sm", "type", "submit", 3, "click", 4, "ngIf"], [2, "margin-right", "5px"], [4, "ngTemplateOutlet"], ["type", "submit", 1, "btn", "btn-primary", "btn-sm", 3, "click"], [1, "double-column", "mt-3", 3, "formGroup"], [4, "ngFor", "ngForOf"], [3, "submitted", "parentForm", "config", 4, "ngIf"], [3, "submitted", "parentForm", "config"], [3, "parentForm", "headerMapping"], [3, "parentForm", "mappingDmos"]], template: function DmoDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, DmoDetailComponent_ng_container_0_Template, 17, 12, "ng-container", 3)(1, DmoDetailComponent_ng_template_1_Template, 2, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(3, DmoDetailComponent_ng_template_3_Template, 1, 2, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(5, DmoDetailComponent_ng_template_5_Template, 1, 2, "ng-template", null, 2, \u0275\u0275templateRefExtractor);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.dataClass);
      }
    }, dependencies: [NgIf, ReactiveFormsModule, \u0275NgNoValidate, NgControlStatusGroup, FormGroupDirective, TabsComponent, TabComponent, GridHeaderMapperComponent, NgTemplateOutlet, NgForOf, ObjectControlComponent, AsyncPipe, DependentFieldsMapperComponent], styles: ['\n\n  li.form-invalid a::after {\n  content: " \\26a0\\fe0f";\n  color: #ea485b;\n}\n/*# sourceMappingURL=dmo-detail.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmoDetailComponent, { className: "DmoDetailComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmo-detail\\dmo-detail.component.ts", lineNumber: 69 });
})();

// src/app/admin/data-modeler1/components1/dmo/dmo.component.ts
var _c06 = () => ["button", "roletypehidden"];
var _c13 = (a0) => ({ mask: a0 });
var _c22 = (a0, a1) => ({ mask: a0, keepCharPositions: true, pipe: a1 });
function DmoComponent_div_0_span_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 10);
    \u0275\u0275text(1, "*");
    \u0275\u0275elementEnd();
  }
}
function DmoComponent_div_0_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "button", 11);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.dmo.label);
  }
}
function DmoComponent_div_0_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "img", 12);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("src", ctx_r0.galleryImageUrl, \u0275\u0275sanitizeUrl)("id", ctx_r0.dmo.dmoName)("ngStyle", ctx_r0.formControlStyle());
  }
}
function DmoComponent_div_0_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 13);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("placeholder", ctx_r0.dmo.placeholder)("maxlength", ctx_r0.dmo.Length == null || ctx_r0.dmo.Length === 0 ? null : ctx_r0.dmo.Length);
  }
}
function DmoComponent_div_0_ng_container_9_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 17);
    \u0275\u0275elementStart(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r2 = ctx.item;
    const label_r3 = ctx.label;
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275styleProp("background-color", ctx_r0.getColor(item_r2));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(label_r3);
  }
}
function DmoComponent_div_0_ng_container_9_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 17);
    \u0275\u0275elementStart(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r4 = ctx.item;
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275styleProp("background-color", ctx_r0.getColor(item_r4));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r4.label);
  }
}
function DmoComponent_div_0_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 14);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_9_ng_template_2_Template, 3, 3, "ng-template", 15)(3, DmoComponent_div_0_ng_container_9_ng_template_3_Template, 3, 3, "ng-template", 16);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("items", ctx_r0.dmo == null ? null : ctx_r0.dmo.data == null ? null : ctx_r0.dmo.data.values)("searchable", true)("id", ctx_r0.dmo.dmoName)("ngStyle", ctx_r0.formControlStyle())("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
  }
}
function DmoComponent_div_0_ng_container_10_ng_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ng-option", 21);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const op_r5 = ctx.$implicit;
    \u0275\u0275property("value", op_r5.label);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(op_r5.label);
  }
}
function DmoComponent_div_0_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 19);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_10_ng_option_2_Template, 2, 2, "ng-option", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("searchable", true)("placeholder", "Select...")("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle());
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.dynamicOptions);
  }
}
function DmoComponent_div_0_ng_container_11_ng_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ng-option", 21);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const op_r6 = ctx.$implicit;
    \u0275\u0275property("value", op_r6.value);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(op_r6.label);
  }
}
function DmoComponent_div_0_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 22);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_11_ng_option_2_Template, 2, 2, "ng-option", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", ctx_r0.formControlStyle())("searchable", true)("virtualScroll", true)("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.dmo == null ? null : ctx_r0.dmo.data == null ? null : ctx_r0.dmo.data.values);
  }
}
function DmoComponent_div_0_ng_container_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "ng-select", 22);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", ctx_r0.formControlStyle())("searchable", true)("virtualScroll", true)("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
  }
}
function DmoComponent_div_0_ng_container_13_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const op_r7 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(op_r7.value);
  }
}
function DmoComponent_div_0_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "select", 23);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_13_option_2_Template, 2, 1, "option", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("disabled", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle());
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.dmo == null ? null : ctx_r0.dmo.data == null ? null : ctx_r0.dmo.data.values);
  }
}
function DmoComponent_div_0_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "p");
    \u0275\u0275element(2, "ngb-progressbar", 25);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("animated", true)("striped", true)("value", ctx_r0.dmo == null ? null : ctx_r0.dmo.defaultValue);
  }
}
function DmoComponent_div_0_ng_container_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "ng-select", 26);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("items", ctx_r0.dmo == null ? null : ctx_r0.dmo.data == null ? null : ctx_r0.dmo.data.values)("multiple", ctx_r0.dmo.multiple)("closeOnSelect", false)("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle());
  }
}
function DmoComponent_div_0_ng_container_16_div_5_li_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li")(1, "span", 33);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_16_div_5_li_2_Template_span_click_1_listener() {
      const file_r10 = \u0275\u0275restoreView(_r9).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r0.DownloadFile(file_r10));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 34);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_16_div_5_li_2_Template_a_click_3_listener() {
      const file_r10 = \u0275\u0275restoreView(_r9).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r0.DeleteFile(file_r10));
    });
    \u0275\u0275element(4, "i", 35);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const file_r10 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("title", file_r10.OldFileName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(file_r10.OldFileName);
  }
}
function DmoComponent_div_0_ng_container_16_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 32)(1, "ul");
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_16_div_5_li_2_Template, 5, 2, "li", 24);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.getFileList);
  }
}
function DmoComponent_div_0_ng_container_16_div_6_li_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li")(1, "span", 33);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_16_div_6_li_2_Template_span_click_1_listener() {
      const file_r12 = \u0275\u0275restoreView(_r11).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r0.DownloadFile(file_r12));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 34);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_16_div_6_li_2_Template_a_click_3_listener() {
      const file_r12 = \u0275\u0275restoreView(_r11).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r0.DeleteFile(file_r12));
    });
    \u0275\u0275element(4, "i", 35);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const file_r12 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("title", file_r12.OldFileName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(file_r12.OldFileName);
  }
}
function DmoComponent_div_0_ng_container_16_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 32)(1, "ul");
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_16_div_6_li_2_Template, 5, 2, "li", 24);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.fileInfoList);
  }
}
function DmoComponent_div_0_ng_container_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 27)(2, "input", 28);
    \u0275\u0275listener("change", function DmoComponent_div_0_ng_container_16_Template_input_change_2_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.upload($event, ctx_r0.dmo.id, ctx_r0.dmo.dmoName));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "input", 29)(4, "label", 30);
    \u0275\u0275elementEnd();
    \u0275\u0275template(5, DmoComponent_div_0_ng_container_16_div_5_Template, 3, 1, "div", 31)(6, DmoComponent_div_0_ng_container_16_div_6_Template, 3, 1, "div", 31);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275property("disabled", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("disabled", true);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("for", "TextBox_" + ctx_r0.dmo.id);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.fileList.length > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.fileList.length === 0);
  }
}
function DmoComponent_div_0_ng_container_17_li_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li")(1, "span", 33);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_17_li_8_Template_span_click_1_listener() {
      const file_r16 = \u0275\u0275restoreView(_r15).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.DownloadFile(file_r16));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 34);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_17_li_8_Template_a_click_3_listener() {
      const file_r16 = \u0275\u0275restoreView(_r15).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.DeleteFile(file_r16));
    });
    \u0275\u0275element(4, "i", 35);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const file_r16 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("title", file_r16.OldFileName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(file_r16.OldFileName);
  }
}
function DmoComponent_div_0_ng_container_17_div_9_li_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li")(1, "span", 33);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_17_div_9_li_2_Template_span_click_1_listener() {
      const file_r18 = \u0275\u0275restoreView(_r17).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r0.DownloadFile(file_r18));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 34);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_17_div_9_li_2_Template_a_click_3_listener() {
      const file_r18 = \u0275\u0275restoreView(_r17).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r0.DeleteFile(file_r18));
    });
    \u0275\u0275element(4, "i", 35);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const file_r18 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("title", file_r18.OldFileName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(file_r18.OldFileName);
  }
}
function DmoComponent_div_0_ng_container_17_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 32)(1, "ul");
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_17_div_9_li_2_Template, 5, 2, "li", 24);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.fileInfoList);
  }
}
function DmoComponent_div_0_ng_container_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 27)(2, "input", 36, 0);
    \u0275\u0275listener("click", function DmoComponent_div_0_ng_container_17_Template_input_click_2_listener() {
      \u0275\u0275restoreView(_r13);
      const fileInput_r14 = \u0275\u0275reference(3);
      return \u0275\u0275resetView(fileInput_r14.value = null);
    })("change", function DmoComponent_div_0_ng_container_17_Template_input_change_2_listener($event) {
      \u0275\u0275restoreView(_r13);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.uploadImage($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275element(4, "input", 37)(5, "label", 30);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 32)(7, "ul");
    \u0275\u0275template(8, DmoComponent_div_0_ng_container_17_li_8_Template, 5, 2, "li", 24);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(9, DmoComponent_div_0_ng_container_17_div_9_Template, 3, 1, "div", 31);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275property("disabled", true);
    \u0275\u0275advance(2);
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("disabled", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("for", "liUploadDiv_" + ctx_r0.dmo.id);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngForOf", ctx_r0.fileList);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.fileList.length === 0);
  }
}
function DmoComponent_div_0_ng_container_18_ng_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ng-option", 21);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const op_r19 = ctx.$implicit;
    \u0275\u0275property("value", op_r19.label);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(op_r19.label);
  }
}
function DmoComponent_div_0_ng_container_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 19);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_18_ng_option_2_Template, 2, 2, "ng-option", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("searchable", true)("placeholder", "Select...")("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle());
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.dynamicOptions);
  }
}
function DmoComponent_div_0_ng_container_19_ng_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ng-option", 21);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const op_r20 = ctx.$implicit;
    \u0275\u0275property("value", op_r20.value);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(op_r20.label);
  }
}
function DmoComponent_div_0_ng_container_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "ng-select", 38);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_19_ng_option_2_Template, 2, 2, "ng-option", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("searchable", true)("virtualScroll", true)("ngStyle", ctx_r0.formControlStyle())("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.dmo == null ? null : ctx_r0.dmo.data == null ? null : ctx_r0.dmo.data.values);
  }
}
function DmoComponent_div_0_ng_container_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div")(2, "span", 39);
    \u0275\u0275element(3, "input", 40);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("value", ctx_r0.dmo.default_Value)("ngStyle", ctx_r0.formControlStyle());
  }
}
function DmoComponent_div_0_ng_container_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 41);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("textMask", \u0275\u0275pureFunction1(6, _c13, ctx_r0.mask))("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("value", ctx_r0.dmo.default_Value)("ngStyle", ctx_r0.formControlStyle())("maxlength", ctx_r0.dmo.Length == null ? null : ctx_r0.dmo.Length);
  }
}
function DmoComponent_div_0_ng_container_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 42);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("ngStyle", ctx_r0.formControlStyle())("placeholder", ctx_r0.dmo.placeholder || "hidden");
  }
}
function DmoComponent_div_0_ng_container_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 43);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("value", ctx_r0.dmo.default_Value)("maxlength", ctx_r0.dmo.validate.maxLength == null ? null : ctx_r0.dmo.validate.maxLength);
  }
}
function DmoComponent_div_0_ng_container_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 44);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("value", ctx_r0.dmo.default_Value)("value", ctx_r0.dmo.default_Value)("maxlength", ctx_r0.dmo.validate.maxLength == null ? null : ctx_r0.dmo.validate.maxLength);
  }
}
function DmoComponent_div_0_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 45);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("disabled", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("value", ctx_r0.dmo.default_Value)("value", ctx_r0.dmo.default_Value)("maxlength", ctx_r0.dmo.Length == null ? null : ctx_r0.dmo.Length);
  }
}
function DmoComponent_div_0_ng_container_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "textarea", 46);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("value", ctx_r0.dmo.default_Value)("value", ctx_r0.dmo.default_Value)("maxlength", ctx_r0.dmo.Length == null || ctx_r0.dmo.Length === 0 ? null : ctx_r0.dmo.Length);
  }
}
function DmoComponent_div_0_ng_container_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 47);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("ngStyle", ctx_r0.formControlStyle())("maxLength", ctx_r0.dmo.Length == null ? null : ctx_r0.dmo.Length);
  }
}
function DmoComponent_div_0_ng_container_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "ng-select", 26);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("items", ctx_r0.dmo.data == null ? null : ctx_r0.dmo.data.values)("multiple", true)("closeOnSelect", false)("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle());
  }
}
function DmoComponent_div_0_ng_container_29_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "label", 49);
    \u0275\u0275text(2);
    \u0275\u0275element(3, "input", 50)(4, "span", 51);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const option_r21 = ctx.$implicit;
    const i_r22 = ctx.index;
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", option_r21.label, " ");
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r0.dmo.disabled)("value", option_r21.value)("id", ctx_r0.dmo.id + i_r22)("name", ctx_r0.dmo.dmoName);
    \u0275\u0275advance();
    \u0275\u0275styleProp("background-color", ctx_r0.dmo.disabled ? "#e9ecef" : "transparent");
  }
}
function DmoComponent_div_0_ng_container_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 48);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_29_ng_container_2_Template, 5, 7, "ng-container", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.dmo == null ? null : ctx_r0.dmo.values);
  }
}
function DmoComponent_div_0_ng_container_30_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "label", 52);
    \u0275\u0275element(2, "input", 53)(3, "i", 54);
    \u0275\u0275elementStart(4, "span");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r23 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275property("value", control_r23.value)("checked", control_r23.value === ctx_r0.dmo.default_Value)("id", ctx_r0.dmo.dmoName)("disabled", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
    \u0275\u0275advance();
    \u0275\u0275styleProp("background-color", (ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled) ? "#e9ecef" : "transparent");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(control_r23.value);
  }
}
function DmoComponent_div_0_ng_container_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 48);
    \u0275\u0275template(2, DmoComponent_div_0_ng_container_30_ng_container_2_Template, 6, 7, "ng-container", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.dmo == null ? null : ctx_r0.dmo.values);
  }
}
function DmoComponent_div_0_ng_container_31_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 55)(2, "div", 56)(3, "button", 57);
    \u0275\u0275element(4, "i", 58);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "input", 59, 1);
    \u0275\u0275listener("dateSelect", function DmoComponent_div_0_ng_container_31_Template_input_dateSelect_5_listener($event) {
      \u0275\u0275restoreView(_r24);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onDateSelect($event));
    })("keyup", function DmoComponent_div_0_ng_container_31_Template_input_keyup_5_listener($event) {
      \u0275\u0275restoreView(_r24);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.dateMasks($event));
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275styleProp("background-color", (ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled) ? "#e9ecef" : "transparent");
    \u0275\u0275advance(3);
    \u0275\u0275property("placeholder", ctx_r0.dateFormat)("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("minDate", ctx_r0.minDate)("value", ctx_r0.formatDate(ctx_r0.selectedDate))("maxDate", ctx_r0.maxDate)("ngStyle", ctx_r0.formControlStyle());
  }
}
function DmoComponent_div_0_ng_container_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 60);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("textMask", \u0275\u0275pureFunction2(4, _c22, ctx_r0.dateMask, ctx_r0.autoCorrectedDatePipe))("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle());
  }
}
function DmoComponent_div_0_ng_container_33_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 55)(2, "div", 56)(3, "button", 57);
    \u0275\u0275element(4, "i", 58);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "input", 61, 1);
    \u0275\u0275listener("dateSelect", function DmoComponent_div_0_ng_container_33_Template_input_dateSelect_5_listener($event) {
      \u0275\u0275restoreView(_r25);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onDateSelect($event));
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275styleProp("background-color", (ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled) ? "#e9ecef" : "transparent");
    \u0275\u0275advance(3);
    \u0275\u0275property("placeholder", ctx_r0.dateFormat)("id", ctx_r0.dmo.dmoName)("value", ctx_r0.formatDate(ctx_r0.selectedDate))("minDate", ctx_r0.minDate)("maxDate", ctx_r0.maxDate)("ngStyle", ctx_r0.formControlStyle())("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
  }
}
function DmoComponent_div_0_ng_container_34_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 62)(2, "div", 63)(3, "div", 56)(4, "button", 57);
    \u0275\u0275element(5, "i", 58);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "input", 64, 1);
    \u0275\u0275listener("dateSelect", function DmoComponent_div_0_ng_container_34_Template_input_dateSelect_6_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onDateSelect($event));
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275element(8, "ng-select", 65);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
    \u0275\u0275advance(2);
    \u0275\u0275styleProp("background-color", (ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled) ? "#e9ecef" : "transparent");
    \u0275\u0275advance(3);
    \u0275\u0275property("ngStyle", ctx_r0.formControlStyle())("placeholder", ctx_r0.dateFormat)("value", ctx_r0.formatDate(ctx_r0.selectedDate))("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
    \u0275\u0275advance(2);
    \u0275\u0275property("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("items", ctx_r0.timeOptions)("ngStyle", ctx_r0.formControlStyle())("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
  }
}
function DmoComponent_div_0_ng_container_35_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "img", 66);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("src", ctx_r0.gridViewImageUrl, \u0275\u0275sanitizeUrl);
  }
}
function DmoComponent_div_0_ng_container_36_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "img", 66);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("src", ctx_r0.gridViewImageUrl, \u0275\u0275sanitizeUrl);
  }
}
function DmoComponent_div_0_ng_container_37_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 55)(2, "div", 56)(3, "button", 67);
    \u0275\u0275element(4, "i", 68);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "input", 59, 1);
    \u0275\u0275listener("dateSelect", function DmoComponent_div_0_ng_container_37_Template_input_dateSelect_5_listener($event) {
      \u0275\u0275restoreView(_r27);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onDateSelect($event));
    })("keyup", function DmoComponent_div_0_ng_container_37_Template_input_keyup_5_listener($event) {
      \u0275\u0275restoreView(_r27);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.dateMasks($event));
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(5);
    \u0275\u0275property("placeholder", ctx_r0.dateTimeFormat)("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("minDate", ctx_r0.minDate)("value", ctx_r0.formatDate(ctx_r0.selectedDate))("maxDate", ctx_r0.maxDate)("ngStyle", ctx_r0.formControlStyle());
  }
}
function DmoComponent_div_0_ng_container_38_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 27);
    \u0275\u0275element(2, "input", 29);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
  }
}
function DmoComponent_div_0_ng_container_39_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 69);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("value", ctx_r0.dmo.default_Value);
  }
}
function DmoComponent_div_0_ng_container_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 69);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("readonly", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("value", ctx_r0.dmo.default_Value);
  }
}
function DmoComponent_div_0_ng_container_41_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "input", 70)(2, "mat-autocomplete", 71);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("disabled", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled)("ngStyle", ctx_r0.formControlStyle())("value", ctx_r0.dmo.default_Value);
    \u0275\u0275advance();
    \u0275\u0275property("displayWith", ctx_r0.displayWith);
  }
}
function DmoComponent_div_0_ng_container_42_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "mat-select", 72);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r0.dmo.dmoName)("ngStyle", ctx_r0.formControlStyle())("disabled", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.disabled);
  }
}
function DmoComponent_div_0_ng_container_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 48)(2, "mat-radio-group")(3, "mat-radio-button", 73)(4, "span", 74);
    \u0275\u0275text(5, "On");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "mat-radio-button", 75)(7, "span", 74);
    \u0275\u0275text(8, "Off");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementContainerEnd();
  }
}
function DmoComponent_div_0_ng_container_44_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DmoComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 3)(1, "label", 4);
    \u0275\u0275element(2, "i", 5);
    \u0275\u0275text(3);
    \u0275\u0275template(4, DmoComponent_div_0_span_4_Template, 2, 0, "span", 6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerStart(5, 7);
    \u0275\u0275template(6, DmoComponent_div_0_ng_container_6_Template, 3, 1, "ng-container", 8)(7, DmoComponent_div_0_ng_container_7_Template, 2, 3, "ng-container", 8)(8, DmoComponent_div_0_ng_container_8_Template, 2, 5, "ng-container", 8)(9, DmoComponent_div_0_ng_container_9_Template, 4, 5, "ng-container", 8)(10, DmoComponent_div_0_ng_container_10_Template, 3, 6, "ng-container", 8)(11, DmoComponent_div_0_ng_container_11_Template, 3, 6, "ng-container", 8)(12, DmoComponent_div_0_ng_container_12_Template, 2, 5, "ng-container", 8)(13, DmoComponent_div_0_ng_container_13_Template, 3, 4, "ng-container", 8)(14, DmoComponent_div_0_ng_container_14_Template, 3, 5, "ng-container", 8)(15, DmoComponent_div_0_ng_container_15_Template, 2, 6, "ng-container", 8)(16, DmoComponent_div_0_ng_container_16_Template, 7, 7, "ng-container", 8)(17, DmoComponent_div_0_ng_container_17_Template, 10, 6, "ng-container", 8)(18, DmoComponent_div_0_ng_container_18_Template, 3, 6, "ng-container", 8)(19, DmoComponent_div_0_ng_container_19_Template, 3, 6, "ng-container", 8)(20, DmoComponent_div_0_ng_container_20_Template, 4, 4, "ng-container", 8)(21, DmoComponent_div_0_ng_container_21_Template, 2, 8, "ng-container", 8)(22, DmoComponent_div_0_ng_container_22_Template, 2, 3, "ng-container", 8)(23, DmoComponent_div_0_ng_container_23_Template, 2, 5, "ng-container", 8)(24, DmoComponent_div_0_ng_container_24_Template, 2, 6, "ng-container", 8)(25, DmoComponent_div_0_ng_container_25_Template, 2, 6, "ng-container", 8)(26, DmoComponent_div_0_ng_container_26_Template, 2, 6, "ng-container", 8)(27, DmoComponent_div_0_ng_container_27_Template, 2, 3, "ng-container", 8)(28, DmoComponent_div_0_ng_container_28_Template, 2, 6, "ng-container", 8)(29, DmoComponent_div_0_ng_container_29_Template, 3, 1, "ng-container", 8)(30, DmoComponent_div_0_ng_container_30_Template, 3, 1, "ng-container", 8)(31, DmoComponent_div_0_ng_container_31_Template, 7, 9, "ng-container", 8)(32, DmoComponent_div_0_ng_container_32_Template, 2, 7, "ng-container", 8)(33, DmoComponent_div_0_ng_container_33_Template, 7, 9, "ng-container", 8)(34, DmoComponent_div_0_ng_container_34_Template, 9, 12, "ng-container", 8)(35, DmoComponent_div_0_ng_container_35_Template, 2, 1, "ng-container", 8)(36, DmoComponent_div_0_ng_container_36_Template, 2, 1, "ng-container", 8)(37, DmoComponent_div_0_ng_container_37_Template, 7, 7, "ng-container", 8)(38, DmoComponent_div_0_ng_container_38_Template, 3, 2, "ng-container", 8)(39, DmoComponent_div_0_ng_container_39_Template, 2, 4, "ng-container", 8)(40, DmoComponent_div_0_ng_container_40_Template, 2, 4, "ng-container", 8)(41, DmoComponent_div_0_ng_container_41_Template, 3, 5, "ng-container", 8)(42, DmoComponent_div_0_ng_container_42_Template, 2, 3, "ng-container", 8)(43, DmoComponent_div_0_ng_container_43_Template, 9, 0, "ng-container", 8)(44, DmoComponent_div_0_ng_container_44_Template, 1, 0, "ng-container", 9);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("id", "control_" + (ctx_r0.dmo == null ? null : ctx_r0.dmo.dmoName))("ngStyle", ctx_r0.BindStyle());
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", ctx_r0.labelControlStyle())("id", "label_" + (ctx_r0.dmo == null ? null : ctx_r0.dmo.dmoName))("hidden", \u0275\u0275pureFunction0(47, _c06).includes(ctx_r0.dmo == null ? null : ctx_r0.dmo.type));
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", ctx_r0.labelControlStyle2());
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.dmo.label, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.dmo.validate == null ? null : ctx_r0.dmo.validate.required);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitch", ctx_r0.dmo.type);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "button");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "mediagallery");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "textfield");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "colorpicker");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "countrylist");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "select");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "manageddropdown");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "list");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "progressbar");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "roletype");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "file");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "uploadimage");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "usstatelist");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "autocompletesearchbox");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "rangebox");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "phoneNumber");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "roletypehidden");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "email");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "usergroup");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "url");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "textarea");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "id");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "multiselect");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "radio");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "selectboxes");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "staticdatebox");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "day");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "datetime");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "datetimezone");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "datagrd");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "jsonstaticgrid");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "datetimebox");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "hidden");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "createdby");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "createddate");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "keyvaluesearchbox");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "keyvaluedropdownlist");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "notificationflag");
  }
}
var DmoComponent = class _DmoComponent {
  get getFileList() {
    if (this.dmoimage.ImagesRemoveFileList.length > 0) {
      this.dmoimage.ImagesRemoveFileList.forEach((element) => {
        if (this.fileList.length > 0) {
          const index = this.fileList.findIndex((x) => x["FileName"] === element.FileName);
          if (index !== -1) {
            this.fileList.splice(index, 1);
          }
        } else {
          if (this.fileInfoList.length > 0 && element.imgId !== void 0) {
            const index = this.fileInfoList.findIndex((x) => x["FileName"] === element.FileName);
            if (index !== -1) {
              this.fileInfoList.splice(index, 1);
            }
          }
        }
      });
    }
    return this.fileList.length > 0 ? this.fileList : this.fileInfoList;
  }
  constructor(elRef, dmoimage, ngbDateParserFormatter) {
    this.elRef = elRef;
    this.dmoimage = dmoimage;
    this.ngbDateParserFormatter = ngbDateParserFormatter;
    this.fileList = [];
    this.galleryImageUrl = UtilService.getUrlForImage("/assets/styles/images/dmo_gallery.png");
    this.gridViewImageUrl = UtilService.getUrlForImage("/assets/styles/images/gridView.jpg");
    this.maxDate = { year: 2199, month: 12, day: 31 };
    this.minDate = { year: 1990, month: 1, day: 1 };
    this.selectedDate = null;
    this.fileInfoList = [];
    this.dateTimePickerConfig = {
      format: "DD/MM/YYYY HH:mm:ss",
      showTwentyFourHours: environment.Setting.dateTimeFormat24,
      showSeconds: true,
      disableKeypress: true
    };
    this.dateFormat = environment.Setting.dateFormat;
    this.dateTimeFormat = environment.Setting.dateTimeFormat;
    this.maxDate = { year: 2199, month: 12, day: 31 };
    this.minDate = { year: 1990, month: 1, day: 1 };
  }
  ngOnInit() {
  }
  displayWith(lookup) {
    return lookup ? lookup.ddOptionValue + " (" + lookup.ddOptionKey + ")" : null;
  }
  getColor(color) {
    return color.label.toLowerCase();
  }
  BindStyle() {
    if (this.containerStyle) {
      if (this.containerStyle.dmolabel && this.containerStyle.dmolabel.label_position == "Left") {
        return {
          "display": "flex"
        };
      }
    }
  }
  labelControlStyle1() {
    if (this.containerStyle) {
      if (this.containerStyle.dmolabel && this.containerStyle.dmolabel.label_position == "Left") {
        const labelProps = this.containerStyle.dmolabel;
        if (labelProps.label_position === "Left") {
          const style2 = {
            width: "25%"
          };
          switch (labelProps.label_align) {
            case "Left":
              style2["text-align"] = "Left";
              break;
            case "Right":
              style2["text-align"] = "Right";
              break;
            case "Center":
              style2["text-align"] = "Center";
              break;
          }
          return style2;
        }
      }
      if (this.containerStyle.dmolabel && this.containerStyle.dmolabel.label_position == "Top") {
        const labelProps = this.containerStyle.dmolabel;
        if (labelProps.label_position === "Top") {
          const style2 = {
            width: "100% !important"
          };
          switch (labelProps.label_align) {
            case "Left":
              style2["text-align"] = "Left";
              break;
            case "Right":
              style2["text-align"] = "Right";
              break;
            case "Center":
              style2["text-align"] = "Center";
              break;
          }
          return style2;
        }
        ;
      }
    }
    ;
  }
  labelControlStyle() {
    let style2 = {};
    if (this.containerStyle && this.containerStyle.dmolabel) {
      const labelProps = this.containerStyle.dmolabel;
      if (labelProps.label_position === "Left") {
        style2["width"] = "25%";
      }
      if (labelProps.label_position === "Top") {
        style2["width"] = "100%";
      }
    }
    if (this.containerStyle && this.containerStyle.dmolabel) {
      const labelProps = this.containerStyle.dmolabel;
      switch (labelProps.label_align) {
        case "Left":
          style2["text-align"] = "left";
          break;
        case "Right":
          style2["text-align"] = "right";
          break;
        case "Center":
          style2["text-align"] = "center";
          break;
        case "justify":
          style2["text-align"] = "justify";
          break;
      }
      if (labelProps.label_color) {
        style2["color"] = labelProps.label_color;
      }
    }
    return style2;
  }
  labelControlStyle2() {
    let style2 = {};
    if (this.containerStyle && this.containerStyle.dmolabel) {
      const labelProps = this.containerStyle.dmolabel;
      switch (labelProps.label_align) {
        case "Left":
          style2["text-align"] = "left";
          break;
        case "Right":
          style2["text-align"] = "right";
          break;
        case "Center":
          style2["text-align"] = "center";
          break;
        case "justify":
          style2["text-align"] = "justify";
          break;
      }
      if (labelProps.label_color) {
        style2["color"] = labelProps.label_color;
      }
    }
    return style2;
  }
  formControlStyle() {
    if (this.containerStyle) {
      if (this.containerStyle.dmolabel && this.containerStyle.dmolabel.label_position == "Left") {
        return {
          width: "75%"
        };
      }
      return {
        width: "100%"
      };
    }
  }
  mask(rawValue) {
    if (rawValue && rawValue.replace(/\D+/g, "").length > 11) {
      return ["+", /\d/, /\d/, " ", /\d/, /\d/, /\d/, /\d/, /\d/, /\d/, /\d/, /\d/, /\d/, /\d/];
    } else if (rawValue && rawValue.replace(/\D+/g, "").length > 10) {
      return ["+", /\d/, /\d/, " ", /\d/, /\d/, /\d/, /\d/, /\d/, /\d/, /\d/, /\d/, /\d/];
    } else {
      return ["(", /[1-9]/, /\d/, /\d/, ")", " ", /\d/, /\d/, /\d/, "-", /\d/, /\d/, /\d/, /\d/];
    }
  }
  upload(UploadEvent, dmoGUID, dmoName, modal = void 0, cropedFile = void 0) {
    let fileName = "";
    this.dmoimage.index = this.dmoimage.index + 1;
    if (cropedFile) {
      fileName = cropedFile.ImgFileName;
      this.dmoimage.ImagesFileList.push({
        file: cropedFile.file,
        ImgFileName: cropedFile.ImgFileName,
        Guid: dmoGUID,
        imgId: this.dmoimage.index,
        dmoName
      });
    } else {
      fileName = UploadEvent.target.files[0].name;
      if (UploadEvent.currentTarget["files"].length === 0) {
        return;
      }
      if (UploadEvent.currentTarget["files"]["files"] != void 0) {
        this.dmoimage.ImagesFileList.push({
          file: { file: UploadEvent.currentTarget["files"]["files"][0] },
          ImgFileName: "",
          Guid: dmoGUID,
          imgId: this.dmoimage.index,
          dmoName
        });
      } else {
        this.dmoimage.ImagesFileList.push({
          file: { file: UploadEvent.currentTarget["files"][0] },
          ImgFileName: "",
          Guid: dmoGUID,
          imgId: this.dmoimage.index,
          dmoName
        });
      }
    }
    const img = {
      FileName: fileName,
      FileSize: "0 Kb",
      OldFileName: fileName,
      CreatedOn: null,
      CreatedBy: null,
      DISPNAME: null,
      UserFullName: null,
      IsEncrypted: false,
      Id: null,
      uId: this.dmoimage.index,
      dmoName
    };
    this.fileInfoList.push(img);
    this.fileList.push(img);
    if (modal) {
      modal.dismiss("Cross click");
    }
  }
  uploadImage(event) {
    if (+this.dmo.uploadLimit < this.fileList.length) {
      return;
    }
    const file = event.target.files.item(0);
    const ext = file.name.split(".").pop().toLowerCase();
    if (!["jpg", "jpeg", "png"].includes(ext)) {
      return;
    }
    this.upload(event, this.dmo.id, this.dmo.dmoName);
  }
  DeleteFile(objfile) {
    if (objfile.uId) {
      let ind = this.fileInfoList.findIndex((x) => x["uId"] === objfile.uId);
      if (ind > -1) {
        this.fileInfoList.splice(ind, 1);
      }
      ind = -1;
      ind = this.fileList.indexOf(objfile);
      if (ind > -1) {
        this.fileList.splice(ind, 1);
      }
      ind = -1;
      ind = this.dmoimage.ImagesFileList.findIndex((x) => x["imgId"] === objfile.uId);
      if (ind > -1) {
        this.dmoimage.ImagesFileList.splice(ind, 1);
      }
      return;
    }
    this.dmoimage.ImagesRemoveFileList.push(__spreadProps(__spreadValues({}, objfile), {
      IsPermanentFileDeletion: environment.Setting.IsPermanentFileDeletion.toString()
    }));
    const index = this.fileList.indexOf(objfile);
    const index1 = this.fileInfoList.indexOf(objfile);
    if (index > -1) {
      this.fileList.splice(index, 1);
      this.dmoimage.ImagesFileList.splice(index, 1);
    }
    if (index1 > -1) {
      this.fileInfoList.splice(index, 1);
    }
  }
  onDateSelect(date) {
    this.selectedDate = date;
  }
  formatDate(date) {
    if (!date)
      return "";
    const mm = String(date.month).padStart(2, "0");
    const dd = String(date.day).padStart(2, "0");
    const yyyy = date.year;
    return `${mm}/${dd}/${yyyy}`;
  }
  static {
    this.\u0275fac = function DmoComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmoComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DmoImageControlService), \u0275\u0275directiveInject(NgbDateParserFormatter));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmoComponent, selectors: [["app-dmo"]], inputs: { dmo: "dmo", containerStyle: "containerStyle" }, standalone: true, features: [\u0275\u0275ProvidersFeature([{ provide: NgbDateParserFormatter, useClass: NgbDateFRParserFormatter }]), \u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [["fileInput", ""], ["d", "ngbDatepicker"], ["class", "form-group", "style", "width: 100%", 3, "id", "ngStyle", 4, "ngIf"], [1, "form-group", 2, "width", "100%", 3, "id", "ngStyle"], [1, "input-label", "dragtitle", 3, "ngStyle", "id", "hidden"], [1, "fas", "fa-grip-lines", "dragicon", 3, "ngStyle"], ["style", "color: red", 4, "ngIf"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], [2, "color", "red"], [1, "btn", "btn-primary", "btn-sm", "btn-mb"], ["alt", "dmo.name", 3, "src", "id", "ngStyle"], ["type", "text", 1, "form-control", 3, "id", "readonly", "ngStyle", "placeholder", "maxlength"], [1, "form-control", 3, "items", "searchable", "id", "ngStyle", "readonly"], ["ng-label-tmp", ""], ["ng-option-tmp", ""], [1, "color-code-option"], [1, "ml-1"], [1, "form-control", 3, "searchable", "placeholder", "id", "readonly", "ngStyle"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "form-control", 3, "ngStyle", "searchable", "virtualScroll", "id", "readonly"], ["multiple", "", 1, "form-control", 2, "height", "auto", 3, "id", "disabled", "ngStyle"], [4, "ngFor", "ngForOf"], ["showValue", "true", "type", "success", 3, "id", "readonly", "animated", "striped", "value"], ["bindLabel", "label", "bindValue", "value", "placeholder", "Select...", 1, "form-control", 3, "items", "multiple", "closeOnSelect", "id", "readonly", "ngStyle"], [1, "custom-file"], ["type", "file", 1, "custom-file-input", 3, "change", "disabled"], ["type", "hidden", "name", "fileHidden", 3, "id", "readonly"], [1, "custom-file-label", 3, "for"], ["class", "uploadList", 4, "ngIf"], [1, "uploadList"], [3, "click", "title"], ["href", "javascript:void(0)", "title", "Delete", 3, "click"], [1, "fas", "fa-trash-alt"], ["type", "file", 1, "custom-file-input", 3, "click", "change", "disabled"], ["type", "text", 2, "display", "none", 3, "id", "disabled"], [1, "form-control", 3, "searchable", "virtualScroll", "ngStyle", "id", "readonly"], [1, "range-control"], ["type", "text", "appRange", "", 1, "form-control", "range-control__input", 3, "id", "readonly", "value", "ngStyle"], ["type", "tel", 1, "form-control", 3, "textMask", "id", "readonly", "value", "ngStyle", "maxlength"], ["type", "text", "readonly", "", 1, "form-control", 2, "border", "2px dashed lightgrey", 3, "id", "ngStyle", "placeholder"], ["type", "email", 1, "form-control", 3, "id", "readonly", "ngStyle", "value", "maxlength"], ["type", "text", 1, "form-control", 3, "id", "readonly", "ngStyle", "value", "maxlength"], ["type", "text", 1, "form-control", 3, "id", "disabled", "ngStyle", "value", "maxlength"], [1, "form-control", "textareaHeight", 3, "id", "readonly", "ngStyle", "value", "maxlength"], ["type", "text", "readonly", "", 1, "form-control", 3, "id", "ngStyle", "maxLength"], [1, "d-flex", "input-group"], [1, "radio-container"], ["type", "radio", 3, "disabled", "value", "id", "name"], [1, "checkmark"], [1, "form-checkbox", "mr-2"], ["type", "checkbox", 3, "value", "checked", "id", "disabled"], [1, "skin"], [1, "input-group"], [1, "input-group-prepend"], ["type", "button", "disabled", "dmo.validate?.disabled", 1, "btn", "btn-sm", "btn-outline-secondary"], ["aria-hidden", "true", 1, "far", "fa-calendar-alt"], ["type", "text", "ngbDatepicker", "", 1, "form-control", 3, "dateSelect", "keyup", "placeholder", "id", "readonly", "minDate", "value", "maxDate", "ngStyle"], ["type", "text", "pattern", "\\d{2}/\\d{2}/\\d{4}", 1, "form-control", 3, "textMask", "id", "readonly", "ngStyle"], ["type", "text", "ngbDatepicker", "", 1, "form-control", 3, "dateSelect", "placeholder", "id", "value", "minDate", "maxDate", "ngStyle", "readonly"], [1, "d-flex", "date-tz-picker", 3, "id", "readonly"], [1, "input-group", "flex-nowrap"], ["type", "text", "ngbDatepicker", "", 1, "form-control", "date-picker", 3, "dateSelect", "ngStyle", "placeholder", "value", "readonly"], [1, "form-control", 3, "readonly", "items", "ngStyle"], ["name", "dmo.dmoName", "type", "img", "lang", "en", "id", "dmo.dmoName", "disabled", "true", 1, "img-responsive", 2, "height", "30px", "width", "100%", 3, "src"], ["type", "button", 1, "btn", "btn-sm", "btn-outline-secondary"], ["aria-hidden", "true", 1, "far", "fa-calendar-alt", 2, "user-select", "none"], ["type", "text", "disabled", "", 1, "form-control", 3, "id", "readonly", "ngStyle", "value"], ["type", "text", "matInput", "", 1, "form-control", 3, "id", "disabled", "ngStyle", "value"], ["showPanel", "true", 3, "displayWith"], [1, "form-control", "input-group", 3, "id", "ngStyle", "disabled"], ["value", "On"], [2, "font-size", "12px"], ["value", "Off"]], template: function DmoComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, DmoComponent_div_0_Template, 45, 48, "div", 2);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.dmo);
      }
    }, dependencies: [
      NgIf,
      NgStyle,
      NgSwitch,
      NgSwitchCase,
      NgSelectComponent,
      NgLabelTemplateDirective,
      NgOptionTemplateDirective,
      NgForOf,
      NgOptionComponent,
      ReactiveFormsModule,
      NgSelectOption,
      \u0275NgSelectMultipleOption,
      NgbProgressbar,
      NgbInputDatepicker,
      MatInput,
      MatAutocomplete,
      MatSelect,
      NgSwitchDefault,
      MatRadioButton
    ], styles: ['\n\n.color-code-option[_ngcontent-%COMP%] {\n  height: 13px;\n  width: 13px;\n  border-radius: 13px;\n  margin: auto;\n  display: inline-block;\n  vertical-align: middle;\n  padding-left: 10px;\n  line-height: 22px;\n}\n.date-tz-picker[_ngcontent-%COMP%] {\n  display: flex;\n}\n.date-tz-picker[_ngcontent-%COMP%]   .date-picker[_ngcontent-%COMP%] {\n  width: 125px;\n}\n.date-tz-picker[_ngcontent-%COMP%]   .time-picker[_ngcontent-%COMP%] {\n  width: 90px;\n}\n.date-tz-picker[_ngcontent-%COMP%]   .tz-picker[_ngcontent-%COMP%] {\n  width: 90px;\n}\n.custom-file[_ngcontent-%COMP%]   .custom-file-label[_ngcontent-%COMP%] {\n  border: 1px solid #005996;\n  height: 24px;\n}\n.custom-file[_ngcontent-%COMP%]   .custom-file-label.is-invalid[_ngcontent-%COMP%] {\n  border: 1px solid red;\n}\n.custom-file[_ngcontent-%COMP%]   .custom-file-label.invalid-feedback[_ngcontent-%COMP%] {\n  display: block;\n  width: 100%;\n  margin-top: -0.75rem;\n  color: #EA485B;\n  font-size: 11px;\n  font-weight: bold;\n}\n.custom-file[_ngcontent-%COMP%]   .custom-file-label[_ngcontent-%COMP%]::after {\n  content: "Browse";\n  background-color: #005996;\n  color: white;\n  height: 23px;\n  line-height: 8px;\n}\n.uploadList[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\n  margin: 0;\n  padding: 0px;\n  list-style: none;\n}\n.uploadList[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px;\n  padding: 2px 2px 2px 20px;\n  display: block;\n  overflow: auto;\n  position: relative;\n}\n.uploadList[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  display: block;\n  position: absolute;\n  left: 2px;\n  top: 2px;\n  padding: 0px 3px;\n}\n.uploadList[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n}\n.ng-select.form-control[_ngcontent-%COMP%] {\n  padding: 0;\n  height: 100%;\n}\n.ng-select[_ngcontent-%COMP%]  .ng-select-container {\n  min-height: 22px !important;\n  height: 22px !important;\n  border-radius: 3px;\n  border: none;\n}\n.ng-select[_ngcontent-%COMP%]  .ng-select-container .ng-input {\n  top: 0 !important;\n}\n.ng-select[_ngcontent-%COMP%]  .ng-dropdown-panel .ng-dropdown-panel-items .ng-option {\n  height: 22px;\n  padding: 2px 12px;\n}\n.ng-select.ng-select-multiple[_ngcontent-%COMP%]  .ng-select-container {\n  height: 100%;\n}\n.ng-select.ng-select-disabled[_ngcontent-%COMP%]    >   .ng-select-container {\n  background-color: #e9ecef !important;\n}\n.input-label[_ngcontent-%COMP%] {\n  color: #4D4D51;\n  font-size: 12px;\n  font-weight: bold;\n  letter-spacing: 0.5px;\n}\n.dmo-tooltip[_ngcontent-%COMP%] {\n  color: #4C9E00 !important;\n  margin-left: 8px;\n  vertical-align: middle;\n  font-size: 14px;\n}\n.form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%] {\n  margin-top: 0.4rem;\n}\n.form-check[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\n  color: #4D4D51;\n  font-size: 12px;\n  font-weight: bold;\n  letter-spacing: 0.46px;\n}\n.form-control[_ngcontent-%COMP%] {\n  height: 24px;\n  border-radius: 3px;\n  font-size: 12px;\n}\n.input-group[_ngcontent-%COMP%] {\n  align-items: center;\n  flex-wrap: nowrap;\n}\n.input-group[_ngcontent-%COMP%]   .input-group-prepend[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\n  height: 24px;\n  display: flex;\n  outline: none;\n  box-shadow: none;\n  min-width: 10px;\n}\n.input-group.is-invalid[_ngcontent-%COMP%]   .input-group-prepend[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  border: 1px solid red;\n}\n.input-group.is-invalid[_ngcontent-%COMP%]   input.form-control[_ngcontent-%COMP%] {\n  border: 1px solid red;\n}\n.input-group.is-invalid[_ngcontent-%COMP%]    ~ .invalid-feedback[_ngcontent-%COMP%] {\n  display: block;\n}\n.invalid-feedback[_ngcontent-%COMP%] {\n  font-size: 11px;\n  font-weight: bold;\n}\n[_ngcontent-%COMP%]::-webkit-input-placeholder {\n  font-style: italic;\n}\n[_ngcontent-%COMP%]:-moz-placeholder {\n  font-style: italic;\n}\n[_ngcontent-%COMP%]::-moz-placeholder {\n  font-style: italic;\n}\n[_ngcontent-%COMP%]:-ms-input-placeholder {\n  font-style: italic;\n}\n.mat-option[_ngcontent-%COMP%] {\n  color: #4D4D51 !important;\n  font-size: 13px !important;\n  line-height: 1.8 !important;\n  height: 20px !important;\n  padding-left: 5px !important;\n  font-family: "Museo Sans", "sans-serif" !important;\n  margin: 0px !important;\n}\n.cstmBrdr[_ngcontent-%COMP%] {\n  width: 14px;\n  height: 14px;\n  border: 1px solid #4C9E00;\n  border-radius: 50%;\n  text-align: center;\n  font-size: 8px;\n  line-height: 12px;\n  vertical-align: text-top;\n}\ndp-date-picker[_ngcontent-%COMP%] {\n  display: block;\n  font-size: 12px;\n  width: 100%;\n  padding: 0;\n  border: 0;\n}\ndp-date-picker[_ngcontent-%COMP%]  .dp-picker-input {\n  height: 24px !important;\n  font-size: 12px !important;\n  width: 100% !important;\n  color: #495057 !important;\n  border: 1px solid #ced4da;\n  border-radius: 3px;\n  padding: 6px 12px !important;\n}\ndp-date-picker[_ngcontent-%COMP%]  .dp-picker-input[disabled] {\n  background-color: #e9ecef;\n}\ndp-date-picker[_ngcontent-%COMP%]  dp-day-calendar .dp-calendar-nav-container {\n  background-color: #f8f9fa !important;\n}\ndp-date-picker[_ngcontent-%COMP%]  dp-day-calendar .dp-calendar-nav-container .dp-calendar-nav-left, \ndp-date-picker[_ngcontent-%COMP%]  dp-day-calendar .dp-calendar-nav-container .dp-calendar-nav-right {\n  color: #4c9e00 !important;\n}\ndp-date-picker[_ngcontent-%COMP%]  dp-day-calendar .dp-calendar-nav-container .dp-current-location-btn {\n  background: #4c9e00;\n  border-color: #4c9e00;\n}\ndp-date-picker[_ngcontent-%COMP%]  dp-day-calendar .dp-weekdays {\n  font-size: 80% !important;\n}\ndp-date-picker[_ngcontent-%COMP%]  dp-day-calendar .dp-weekdays .dp-calendar-weekday {\n  color: #17a2b8 !important;\n  font-weight: 500 !important;\n  width: 1.6rem;\n  height: 1.6rem;\n  line-height: 2rem;\n  font-style: italic;\n}\ndp-date-picker[_ngcontent-%COMP%]  dp-day-calendar .dp-calendar-day {\n  width: 1.6rem;\n  height: 1.6rem;\n  border-radius: 0.25rem;\n}\ndp-date-picker[_ngcontent-%COMP%]  dp-month-calendar .dp-calendar-month {\n  width: 45px !important;\n  height: 45px !important;\n  border: none !important;\n  border-radius: 0.25rem !important;\n}\ndp-date-picker[_ngcontent-%COMP%]  .dp-selected {\n  background: #4c9e00 !important;\n}\ndp-date-picker[_ngcontent-%COMP%]  .dp-current-day {\n  border-color: #4C9E00 !important;\n}\n.form-control[_ngcontent-%COMP%]:disabled {\n  background-color: #e9ecef;\n  color: #495057;\n  opacity: 1;\n}\n.form-control[readonly][_ngcontent-%COMP%] {\n  background-color: white;\n  color: #495057;\n  opacity: 1;\n}\n.range-control[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n.d-flex.input-group[_ngcontent-%COMP%] {\n  flex-wrap: wrap;\n}\n.textareaHeight[_ngcontent-%COMP%] {\n  overflow-y: hidden;\n  min-height: 50px;\n}\n.invalid-feedback1[_ngcontent-%COMP%] {\n  font-size: 11px;\n  font-weight: bold;\n  letter-spacing: 0.3px;\n  color: rgba(234, 72, 91, 0.9294117647);\n}\n.btn-xxs[_ngcontent-%COMP%], \n.btn-group-xxs[_ngcontent-%COMP%]    > .btn[_ngcontent-%COMP%], \n.component-btn-group[_ngcontent-%COMP%]   .component-settings-button[_ngcontent-%COMP%] {\n  padding: 2px 2px;\n  font-size: 11px;\n  line-height: 1.2em;\n  border-radius: 0;\n  width: 18px;\n  height: 18px;\n}\n.custom-form-control[_ngcontent-%COMP%] {\n  width: 70% !important;\n}\n.form-group[_ngcontent-%COMP%] {\n  padding: 0 20px;\n}\nlabel[_ngcontent-%COMP%] {\n  margin-bottom: 0.5rem !important;\n}\n.mr-2[_ngcontent-%COMP%], \n.mx-2[_ngcontent-%COMP%] {\n  margin-right: 0.5rem !important;\n}\n.form-group[_ngcontent-%COMP%] {\n  vertical-align: middle;\n}\n.col-sm-12[_ngcontent-%COMP%], \n.col-sm-9[_ngcontent-%COMP%] {\n  position: relative;\n  width: 100%;\n  padding-right: 15px;\n}\n.custom-file[_ngcontent-%COMP%]   .custom-file-label[_ngcontent-%COMP%] {\n  border: 1px solid #005996;\n  height: 24px;\n}\n.custom-file[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: calc(1.5em + 0.75rem + 2px);\n  margin-bottom: 0;\n}\n.custom-file-input[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  height: calc(1.5em + 0.75rem + 2px);\n  margin: 0;\n  overflow: hidden;\n  opacity: 0;\n}\n.custom-file-label[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1;\n  height: calc(1.5em + 0.75rem + 2px);\n  padding: 0.375rem 0.75rem;\n  overflow: hidden;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n}\n.custom-file-label[_ngcontent-%COMP%]:after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 3;\n  display: block;\n  height: calc(1.5em + 0.75rem);\n  padding: 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  content: "Browse";\n  background-color: #e9ecef;\n  border-left: inherit;\n  border-radius: 0 0.25rem 0.25rem 0;\n}\n.btn-primary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #EB583B;\n  border-color: #EB583B;\n}\n.btn-mb[_ngcontent-%COMP%] {\n  margin-bottom: 2px !important;\n}\n.dragtitle[_ngcontent-%COMP%] {\n  cursor: move;\n  display: inline-block;\n}\n.dragicon[_ngcontent-%COMP%] {\n  color: gray;\n  display: none;\n}\n.dragtitle[_ngcontent-%COMP%]:hover   .dragicon[_ngcontent-%COMP%] {\n  margin-top: 3px;\n  display: inline-block;\n}\n.form-control[_ngcontent-%COMP%]:disabled, \n.form-control[readonly][_ngcontent-%COMP%] {\n  background-color: #e9ecef !important;\n  cursor: not-allowed !important;\n}\n/*# sourceMappingURL=dmo.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmoComponent, { className: "DmoComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmo\\dmo.component.ts", lineNumber: 44 });
})();

// src/app/admin/data-modeler1/components1/dmog-detail/dmog-detail.component.ts
function DmogDetailComponent_h2_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("New ", ctx_r0.title, "");
  }
}
function DmogDetailComponent_h2_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h2");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.title, " Details");
  }
}
function DmogDetailComponent_ng_container_9_app_object_control_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-object-control", 13);
  }
  if (rf & 2) {
    const control_r2 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMap(control_r2.class);
    \u0275\u0275property("config", control_r2)("parentForm", ctx_r0.form);
  }
}
function DmogDetailComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmogDetailComponent_ng_container_9_app_object_control_1_Template, 1, 4, "app-object-control", 12);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(2, 1, control_r2.show));
  }
}
function DmogDetailComponent_ng_container_11_app_object_control_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-object-control", 13);
  }
  if (rf & 2) {
    const control_r3 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMap(control_r3.class);
    \u0275\u0275property("config", control_r3)("parentForm", ctx_r0.form);
  }
}
function DmogDetailComponent_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmogDetailComponent_ng_container_11_app_object_control_1_Template, 1, 4, "app-object-control", 12);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const control_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(2, 1, control_r3.show));
  }
}
function DmogDetailComponent_div_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 14)(1, "div", 15)(2, "label", 16);
    \u0275\u0275text(3, "Available Cards");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "label", 16);
    \u0275\u0275text(5, "Selected Cards");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "app-association", 17);
    \u0275\u0275listener("add", function DmogDetailComponent_div_13_Template_app_association_add_6_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onShareAdd($event));
    })("remove", function DmogDetailComponent_div_13_Template_app_association_remove_6_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onShareRemove($event));
    })("reorder", function DmogDetailComponent_div_13_Template_app_association_reorder_6_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onShareReorder($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(6);
    \u0275\u0275property("items", ctx_r0.allNormalDmogs)("associatedItems", ctx_r0.associatedSharedItems)("displayWith", ctx_r0.displayShare)("uniqueWith", ctx_r0.uniqueShare)("checkAll", false);
  }
}
function DmogDetailComponent_button_17_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Create");
    \u0275\u0275elementContainerEnd();
  }
}
function DmogDetailComponent_button_17_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1, "Update");
    \u0275\u0275elementContainerEnd();
  }
}
function DmogDetailComponent_button_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 18);
    \u0275\u0275listener("click", function DmogDetailComponent_button_17_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onSubmit());
    });
    \u0275\u0275template(1, DmogDetailComponent_button_17_ng_container_1_Template, 2, 0, "ng-container", 2)(2, DmogDetailComponent_button_17_ng_container_2_Template, 2, 0, "ng-container", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.newObject);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.newObject);
  }
}
var DmogDetailComponent = class _DmogDetailComponent extends ObjectDetail {
  constructor(ref, fb, api, toastr, changeDetectorRef) {
    super(ref, fb);
    this.api = api;
    this.toastr = toastr;
    this.changeDetectorRef = changeDetectorRef;
    this.title = "Card";
    this.dmogTypeList = enumToList(DMOGType).filter((x) => x.key !== "CardGroup");
    this.status = enumToList(Status);
    this.availableDmoToShare = [];
    this.IsReordring = false;
    this.allDmos = [];
    this.allNormalDmogs = [];
    this.leftSelectedSharedItems = [];
    this.rightSelectedSharedItems = [];
    this.leftSharedChanged = false;
    this.rightSharedChanged = false;
    this.allDmogs = [];
    this.associatedSharedItems = [];
    this.sharedChanged = false;
    this.updatedlistDmogGroups = [];
    this.displayShare = (item) => item.value;
    this.uniqueShare = (item) => item.value;
    this.shouldAdd = (item) => this.api.checkDmogInBmo(item.dmogId.toString(), item.bmogId.toString()).pipe(tap((success) => {
      if (!success) {
        this.toastr.warning("This card cannot be shared");
      }
    }));
    this.onShareReorder = (items) => {
      this.updatedlistDmogGroups = items;
      this.sharedChanged = true;
      this.IsReordring = true;
    };
    this.refreshAllDmogs = () => {
      this.allDmogs.forEach((dmog) => {
        const rightCheck = this.associatedSharedItems.some((item) => item.key === dmog.key);
        dmog.selected = rightCheck;
        dmog.disabled = rightCheck;
      });
    };
    this.formActions = [{ controlName: "Type", handler: (type) => this.onDmogTypeChange(type) }];
  }
  ngAfterViewChecked() {
    this.changeDetectorRef.detectChanges();
  }
  beforeFormInit() {
    if (this.data.Type === "CardGroup") {
      this.title = "Card Group";
      this.allNormalDmogs = this.getNormalRootDMOGs();
      this.associatedSharedItems = this.allNormalDmogs.filter((dmog) => dmog.PrntDmogIDs?.split(",").includes(this.data.DMOGID.toString()));
      this.updatedlistDmogGroups = this.associatedSharedItems;
    }
    const { ProcessName } = this.parent.root;
    this.roles$ = this.api.getRoles(ProcessName).pipe(map((list) => arrayToList(list, "value", "label")));
  }
  getChildDMOGs() {
    const result = [];
    Object.values(this.parent.childrenMap).forEach((dmog) => {
      const isNormal = dmog.Type === "Normal";
      const matchesSelf = dmog.PrntDmogIDs?.split(",").includes(this.data.DMOGID.toString());
      if (isNormal && matchesSelf) {
        result.push({
          key: dmog.id,
          dmogId: dmog.DMOGID,
          value: `${dmog.DisplayName} (${dmog.Name})`,
          bmogId: this.parent.parent.BMOGID,
          parent: `${this.parent.Name} / ${this.parent.DisplayName}`,
          parentId: this.parent.id,
          selected: true,
          disabled: true
        });
      }
    });
    return result;
  }
  getNormalRootDMOGs() {
    const result = [];
    Object.values(this.parent.childrenMap).forEach((dmog) => {
      const isNormal = dmog.Type === "Normal";
      const hasNoParent = dmog.PrntDmogIDs === null || dmog.PrntDmogIDs === "" || typeof dmog.PrntDmogIDs === "undefined";
      if (isNormal && hasNoParent) {
        const item = {
          key: dmog.id,
          dmogId: dmog.DMOGID,
          value: `${dmog.DisplayName} (${dmog.Name})`,
          bmogId: this.parent.parent.BMOGID,
          parent: `${this.parent.Name} / ${this.parent.DisplayName}`,
          parentId: this.parent.id
        };
        result.push(item);
      }
      const parentId = dmog.PrntDmogIDs?.trim();
      if (parentId) {
        let parentIds = parentId.split(",");
        const matchesSelf = parentIds.includes(this.data.DMOGID.toString());
        if (isNormal && matchesSelf) {
          const item = {
            key: dmog.id,
            dmogId: dmog.DMOGID,
            value: `${dmog.DisplayName} (${dmog.Name})`,
            bmogId: this.parent.parent.BMOGID,
            parent: `${this.parent.Name} / ${this.parent.DisplayName}`,
            parentId: this.parent.id,
            PrntDmogIDs: dmog.PrntDmogIDs,
            isAdded: true,
            selected: true
          };
          result.push(item);
        }
      }
    });
    return result;
  }
  initForm() {
    const validators = [...NAME_VALIDATORS];
    if (this.newObject) {
      const allDmogs = Object.values(this.parent.root.childrenMap).flatMap((bmog) => Object.values(bmog.childrenMap).flatMap((bmo) => Object.values(bmo.childrenMap)));
    }
    this.form = this.fb.group({
      Name: [this.data.Name, { validators, updateOn: "blur" }],
      DefCollapsed: [+this.data.DefCollapsed || 0],
      DisplayName: [this.data.DisplayName, [Validators.required]],
      IsCollapsed: [+this.data.IsCollapsed || 0],
      IsHidden: [+this.data.IsHidden || 0],
      LongDesc: [this.data.LongDesc],
      Roles: [arrayToList(this.data.Roles, "Value", "Key")],
      // Share: [this.selectedSharedItems()],
      Status: [this.status.find((s) => s.key == this.data.Status), [Validators.required]],
      Type: [this.dmogTypeList.find((t) => t.key === this.data.Type), [Validators.required]],
      Version: [this.data.Version || this.parent.Version, [Validators.required]],
      showHelp: [+this.data.showHelp || 0]
    });
    this.controls = this.data.Type === "CardGroup" ? [
      new ObjectControl({ name: "Name", label: "Name", readonly: !this.newObject, required: true }),
      new ObjectControl({ name: "DisplayName", label: "Friendly Name", required: true })
    ] : [
      new ObjectControl({ name: "Name", label: "Name", readonly: !this.newObject, required: true }),
      new ObjectControl({ name: "DisplayName", label: "Friendly Name", required: true }),
      new ObjectControl({ name: "Version", label: "Version", readonly: true }),
      new ObjectControl({ name: "Status", label: "Status", type: "dropdown", required: true, options: of(this.status) }),
      new ObjectControl({ name: "Type", label: "Type", type: "dropdown", required: true, options: of(this.dmogTypeList) }),
      new ObjectControl({
        name: "Roles",
        label: "Roles",
        type: "dropdown",
        required: true,
        options: this.roles$,
        show: this.show("Type", DMOGType.Grid),
        multiple: true
      }),
      new ObjectControl({ name: "LongDesc", label: "Long Description", type: "rich", class: "span-12" }),
      new ObjectControl({ name: "showHelp", label: "Show Long Description as Help", type: "switch" }),
      new ObjectControl({ name: "IsCollapsed", label: "Is Collapsible", type: "switch" }),
      new ObjectControl({
        name: "DefCollapsed",
        label: "Is Collapsed",
        type: "switch",
        show: this.show("IsCollapsed", true)
      }),
      new ObjectControl({ name: "IsHidden", label: "Is Hidden", type: "switch" })
    ];
    this.form.get("Name").valueChanges.subscribe((name) => {
      if (this.newObject && name && name.length >= 4 && !this.form.get("Name").hasError("maxlength") && !this.form.get("Name").hasError("pattern")) {
        this.api.checkNameValidity("dmog", 0, name, this.parent.root.Version, this.parent.root.ProcessName).subscribe((IsExits) => {
          if (IsExits) {
            const nameControl = this.form.get("Name");
            nameControl.setErrors({
              nameExists: true,
              message: "Duplicate name"
            });
          }
        });
      }
    });
  }
  afterFormInit() {
    const val = this.dmogTypeList.find(({ key }) => this.data.Type === key);
    this.f.Type.patchValue(val);
  }
  onSubmit() {
    if (this.data.Type === "CardGroup") {
      const val = this.form.value;
      const model = {
        Name: val.Name,
        DisplayName: val.DisplayName,
        BMOID: this.parent.BMOID,
        DMOGID: this.data.DMOGID,
        DmogIds: this.updatedlistDmogGroups.map((item) => item.dmogId).join(","),
        IsAdded: this.updatedlistDmogGroups.map((item) => item.isAdded ? "true" : "false").join(","),
        PrntDmogIds: this.updatedlistDmogGroups.map((item) => item.PrntDmogIDs ?? "NULL").join(","),
        Orders: "1,2,3,4",
        IsPopupOrdering: this.IsReordring
      };
      this.ref.close({ "model": model, "Type": this.data.Type });
    } else {
      this.submitted = true;
      if (this.form.valid) {
        const val = this.form.value;
        const payload = __spreadProps(__spreadValues({}, val), {
          Parent: this.data.Parent || this.parent.id,
          DMOGID: this.data.DMOGID,
          id: this.data.id || val.Name,
          GUID: (this.data.GUID || val.Name).replace("`", ""),
          LnkBmoDmogID: this.data.LnkBmoDmogID,
          Type: val.Type?.key || val.Type,
          Status: val.Status?.key || val.Status,
          DefCollapsed: (+val.DefCollapsed).toString(),
          IsCollapsed: (+val.IsCollapsed).toString(),
          IsHidden: (+val.IsHidden).toString(),
          showHelp: (+val.showHelp).toString(),
          Roles: listToTypeArray(val.Roles, "value", "key"),
          PrntDmogIDs: this.data.PrntDmogIDs || ""
        });
        const shared = {
          processName: this.parent.root.ProcessName,
          bmName: this.parent.root.Name,
          bmVersion: this.parent.root.Version,
          dmogName: val.Name,
          leftDMOGuids: this.leftSharedChanged ? this.leftSelectedSharedItems.map(({ key }) => key).toString() : "-1",
          rightDMOGuids: this.rightSharedChanged ? this.rightSelectedSharedItems.map(({ key }) => key).toString() : "-1"
        };
        this.output.emit(payload);
        this.ref.close({ payload, shared });
      }
    }
  }
  onDmogTypeChange(val) {
    val = val?.key || val;
    if (val === DMOGType.Grid) {
      this.f.Roles.setValidators(Validators.required);
    } else {
      this.f.Roles.clearValidators();
    }
    this.f.Roles.updateValueAndValidity();
  }
  show(controlName, compareTo) {
    return this.form.get(controlName).valueChanges.pipe(startWith(this.form.get(controlName).value), map((v) => v?.key || v), map((v) => v == compareTo));
  }
  onShareAdd(item) {
    item.isAdded = true;
    item.PrntDmogIDs = this.data.DMOGID.toString();
    this.updatedlist(item);
    this.associatedSharedItems = this.associatedSharedItems.concat(item);
    this.sharedChanged = true;
    this.refreshAllDmogs();
  }
  onShareRemove(item) {
    item.isAdded = false;
    item.PrntDmogIDs = this.data.DMOGID.toString();
    this.updatedlist(item);
    this.associatedSharedItems = this.associatedSharedItems.filter((dmog) => dmog.dmogId !== item.dmogId);
    this.sharedChanged = true;
    this.refreshAllDmogs();
  }
  updatedlist(item) {
    const updatedItem = __spreadProps(__spreadValues({}, item), { isAdded: item.isAdded, PrntDmogIDs: this.data.DMOGID.toString() });
    const index = this.updatedlistDmogGroups.findIndex((dmog) => dmog.dmogId === item.dmogId);
    if (index > -1) {
      this.updatedlistDmogGroups[index] = updatedItem;
    } else {
      this.updatedlistDmogGroups = [...this.updatedlistDmogGroups, updatedItem];
    }
  }
  static {
    this.\u0275fac = function DmogDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmogDetailComponent)(\u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmogDetailComponent, selectors: [["app-dmog-detail"]], standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 18, vars: 14, consts: [[1, "popup"], [1, "popup__header"], [4, "ngIf"], [1, "popup__close"], [1, "fas", "fa-times-circle", "fa-fw", 3, "click"], [3, "formGroup"], [1, "double-column"], [4, "ngFor", "ngForOf"], ["class", "span-12", 4, "ngIf"], [1, "popup__actions"], ["type", "button", 1, "btn", "btn-light", "btn-sm", 3, "click"], ["class", "btn btn-primary btn-sm", "type", "submit", 3, "click", 4, "ngIf"], [3, "config", "parentForm", "class", 4, "ngIf"], [3, "config", "parentForm"], [1, "span-12"], [1, "double-column", 2, "margin", "0"], ["for", "", 1, "span-6"], ["checkBy", "selected", "disableBy", "disabled", 3, "add", "remove", "reorder", "items", "associatedItems", "displayWith", "uniqueWith", "checkAll"], ["type", "submit", 1, "btn", "btn-primary", "btn-sm", 3, "click"]], template: function DmogDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275template(2, DmogDetailComponent_h2_2_Template, 2, 1, "h2", 2)(3, DmogDetailComponent_h2_3_Template, 2, 1, "h2", 2);
        \u0275\u0275elementStart(4, "span", 3)(5, "i", 4);
        \u0275\u0275listener("click", function DmogDetailComponent_Template_i_click_5_listener() {
          return ctx.ref.close();
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(6, "hr");
        \u0275\u0275elementStart(7, "form", 5)(8, "div", 6);
        \u0275\u0275template(9, DmogDetailComponent_ng_container_9_Template, 3, 3, "ng-container", 7);
        \u0275\u0275pipe(10, "slice");
        \u0275\u0275template(11, DmogDetailComponent_ng_container_11_Template, 3, 3, "ng-container", 7);
        \u0275\u0275pipe(12, "slice");
        \u0275\u0275template(13, DmogDetailComponent_div_13_Template, 7, 5, "div", 8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(14, "div", 9)(15, "button", 10);
        \u0275\u0275listener("click", function DmogDetailComponent_Template_button_click_15_listener() {
          return ctx.onCancel();
        });
        \u0275\u0275text(16, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275template(17, DmogDetailComponent_button_17_Template, 3, 2, "button", 11);
        \u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.newObject);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.newObject);
        \u0275\u0275advance(4);
        \u0275\u0275property("formGroup", ctx.form);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", \u0275\u0275pipeBind3(10, 7, ctx.controls, 0, 7));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", \u0275\u0275pipeBind2(12, 11, ctx.controls, 7));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.data.Type === "CardGroup");
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !ctx.parent.root.published);
      }
    }, dependencies: [
      NgIf,
      ReactiveFormsModule,
      \u0275NgNoValidate,
      NgControlStatusGroup,
      FormGroupDirective,
      NgForOf,
      ObjectControlComponent,
      AssociationComponent,
      AsyncPipe,
      SlicePipe
    ], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmogDetailComponent, { className: "DmogDetailComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-detail\\dmog-detail.component.ts", lineNumber: 33 });
})();

// src/app/admin/data-modeler1/components1/dmog-form-view/dmog-form-view.component.ts
var import_lodash3 = __toESM(require_lodash());

// src/app/admin/data-modeler1/const1/dmo.ts
var DMOS2 = {
  jsonstaticgrid: { name: "JSON Static Grid", type: "jsonstaticgrid", inputType: "text", class: "fa fa-th-list" },
  button: { name: "Button", type: "button", inputType: "button", class: "fa fa-stop" },
  selectboxes: { name: "Checkbox List", type: "selectboxes", inputType: "checkbox", class: "fa fa-plus-square", hasData: true, validate: {} },
  colorpicker: { name: "Color Code Status", type: "colorpicker", inputType: "text", class: "fas fa-palette", hasData: true, validate: {} },
  countrylist: { name: "Country List", type: "countrylist", inputType: "text", class: "fa fa-globe-americas", validate: {} },
  day: { name: "Date Edit", type: "day", inputType: "date", class: "fa fa-calendar-alt", validate: {} },
  datetime: { name: "Date With Calendar", type: "datetime", inputType: "date", class: "fa fa-calendar-plus", validate: {} },
  datetimezone: { name: "Date Time Zone", type: "datetimezone", inputType: "date", class: "fa fa-calendar", hasData: true, validate: {} },
  select: { name: "Drop Down List", type: "select", inputType: "text", class: "fa fa-th-list", hasData: true, validate: {} },
  email: { name: "Email Edit Box", type: "email", inputType: "email", class: "fa fa-at", validate: { minLength: true, maxLength: true } },
  datagrd: { name: "Grid View", type: "datagrd", inputType: "date", class: "fa fa-th", hasData: true },
  hidden: { name: "Hidden", type: "hidden", inputType: "hidden", class: "fa fa-user-secret" },
  label: { name: "Label", type: "label", inputType: "text", class: "fa fa-tag" },
  list: { name: "List Box", type: "list", inputType: "text", class: "fa fa-th-list", hasData: true, validate: {} },
  id: { name: "ID", type: "id", inputType: "text", class: "fa fa-terminal", hasData: true, validate: {} },
  phoneNumber: { name: "Phone Text Box", type: "phoneNumber", inputType: "tel", class: "fa fa-phone-square", validate: {} },
  progressbar: { name: "Progress Bar", type: "progressbar", inputType: "date", class: "fas fa-spinner" },
  radio: { name: "Radio Button List", type: "radio", inputType: "radio", class: "fa-solid fa-circle-dot", hasData: true, validate: {} },
  roletype: { name: "Role Type", type: "roletype", inputType: "text", class: "fas fa-user-lock", hasData: true, validate: {} },
  roletypehidden: { name: "Role Type Hidden", type: "roletypehidden", inputType: "hidden", class: "fa fa-user-secret" },
  textarea: { name: "Text Area", type: "textarea", inputType: "text", class: "fa fa-font", hasData: true, validate: { maxLength: true } },
  textfield: { name: "Text Box", type: "textfield", inputType: "text", class: "fa fa-terminal", hasData: true, validate: { maxLength: true } },
  file: { name: "Upload Document", type: "file", inputType: "text", class: "fa fa-upload", hasData: true, validate: {} },
  uploadimage: { name: "Upload Image", type: "uploadimage", inputType: "text", class: "fa fa-file-upload", hasData: true, validate: {} },
  url: { name: "Url Text Box", type: "url", inputType: "url", class: "fa fa-link", hasData: true, validate: { minLength: true, maxLength: true } },
  usstatelist: { name: "USA States List", type: "usstatelist", inputType: "text", class: "fa fa-globe-americas", validate: {} },
  usergroup: { name: "User Group", type: "usergroup", inputType: "text", class: "fa fa-users", validate: {} },
  createdby: { name: "Created By", type: "createdby", inputType: "text", class: "fa fa-terminal" },
  createddate: { name: "Created Date", type: "createddate", inputType: "text", class: "fa fa-terminal" },
  keyvaluesearchbox: { name: "KeyValue Search Box", type: "keyvaluesearchbox", inputType: "text", class: "fa fa-th-list", hasData: true, validate: {} },
  keyvaluedropdownlist: { name: "KeyValue DropdownList", type: "keyvaluedropdownlist", inputType: "text", class: "fa fa-th-list", hasData: true, validate: {} },
  datetimebox: { name: "DateTime Box", type: "datetimebox", inputType: "text", class: "fa fa-calendar-alt", validate: {} },
  rangebox: { name: "RangeBox", type: "rangebox", inputType: "text", class: "fa fa-terminal", hasData: true, validate: { minLength: true, maxLength: true } },
  autocompletesearchbox: { name: "AutoComplete Search Box", type: "autocompletesearchbox", inputType: "text", class: "fa fa-th-list", hasData: true, validate: {} },
  staticdatebox: { name: "StaticDateBox", type: "staticdatebox", inputType: "date", class: "fa fa-calendar-plus", validate: {} },
  multiselect: { name: "MultiSelect DropDownList", type: "multiselect", inputType: "text", class: "fa fa-th-list", hasData: true, validate: {} },
  manageddropdown: { name: "Managed DropDownList", type: "manageddropdown", inputType: "text", class: "fa fa-th-list", validate: {} },
  mediagallery: { name: "Media Gallery", type: "mediagallery", inputType: "media", class: "fa fa-play" },
  notificationflag: { name: "Notification Flag", type: "notificationflag", inputType: "media", class: "fa fa-bell", validate: {} }
};
var DMOSLayout = [
  { name: "Panel", class: "fa fa-th-list" }
  //  { name: 'Column', class: 'fa fa-columns'},
];
var BorderStyle = [
  //{ name: 'default'},
  { name: "Solid" },
  { name: "Dotted" },
  { name: "Dashed" },
  { name: "Groove" },
  { name: "Inset" },
  { name: "Outset" },
  { name: "None" }
];

// src/app/admin/data-modeler1/components1/contextMenu/contextMenu.datatypes.ts
var ContextMenuPosition = class {
  constructor() {
    this.rightClickMenuPositionX = 0;
    this.rightClickMenuPositionY = 0;
    this.left = 0;
    this.right = 0;
    this.top = 0;
    this.bottom = 0;
    this.width = 0;
    this.height = 0;
    this.centerX = 0;
    this.centerY = 0;
  }
};

// src/app/admin/data-modeler1/components1/share-dmo/share-dmo.component.ts
function ShareDmoComponent_div_0_li_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 6);
    \u0275\u0275listener("click", function ShareDmoComponent_div_0_li_4_Template_li_click_0_listener() {
      const item_r4 = \u0275\u0275restoreView(_r3).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.DmoSelect(item_r4));
    });
    \u0275\u0275element(1, "i", 7);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r4 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate2("", item_r4.label, " (", item_r4.dmoName, ") ");
  }
}
function ShareDmoComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "input", 4);
    \u0275\u0275listener("input", function ShareDmoComponent_div_0_Template_input_input_3_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.searchDmo($event.target.value));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(4, ShareDmoComponent_div_0_li_4_Template, 3, 2, "li", 5);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("left", ctx_r1.contextMenuPositiontest.x)("top", ctx_r1.contextMenuPositiontest.y);
    \u0275\u0275property("ngStyle", ctx_r1.style)("@enterAnimation", void 0);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", ctx_r1.shareDmoList);
  }
}
var ShareDmoComponent = class _ShareDmoComponent {
  constructor() {
    this.shareDmoList = [];
    this.CopyshareDmoList = [];
    this.showContextMenuFor = null;
    this.contextMenuPosition = null;
    this.shareDmoSelect = new EventEmitter();
    this.contextMenuPositiontest = { x: "0px", y: "0px" };
    this.style = {};
    this.showContextMenu = false;
    this.rows = [];
  }
  ngOnInit() {
    if (this.rows.length && this.shareDmoList && this.shareDmoList.length > 0) {
      for (let index = 0; index < this.rows.length; index++) {
        const r = this.rows[index];
        for (let c = 0; c < r.columns.length; c++) {
          const col = r.columns[c];
          if (col.dmoguid != null) {
            for (let inguid = 0; inguid < col.dmoguid.length; inguid++) {
              const element = col.dmoguid[inguid];
              if (element) {
                this.shareDmoList = this.shareDmoList.filter((a) => a.guid != element.toLowerCase());
              }
            }
          }
          for (let cr = 0; cr < col.rows.length; cr++) {
            const crc = col.rows[cr];
            for (let icrc = 0; icrc < crc.columns.length; icrc++) {
              const cColumn = crc.columns[icrc];
              if (cColumn.dmoguid != null) {
                for (let inguid = 0; inguid < cColumn.dmoguid.length; inguid++) {
                  const element = cColumn.dmoguid[inguid];
                  if (element) {
                    this.shareDmoList = this.shareDmoList.filter((a) => a.guid != element.toLowerCase());
                  }
                }
              }
            }
          }
        }
      }
    }
    this.CopyshareDmoList = this.shareDmoList;
  }
  DmoSelect(type) {
    this.showContextMenu = false;
    this.shareDmoSelect.emit(type);
  }
  searchDmo(key) {
    if (this.shareDmoList.length > 0) {
      if (key && key != "" && key.length > 0) {
        this.shareDmoList = this.CopyshareDmoList.filter((a) => a.guid.toLowerCase().includes(key.toLowerCase()) || a.dmoName.toLowerCase().includes(key.toLowerCase()));
      } else {
        this.shareDmoList = this.CopyshareDmoList;
      }
    } else {
      this.shareDmoList = this.CopyshareDmoList;
    }
  }
  ngOnChanges() {
    if (this.contextMenuPosition) {
      this.contextMenuPositiontest.x = this.contextMenuPosition.rightClickMenuPositionX - 150 + "px";
      this.contextMenuPositiontest.y = this.contextMenuPosition.rightClickMenuPositionY - 100 + "px";
    }
  }
  onWindowScroll() {
    this.showContextMenu = false;
  }
  static {
    this.\u0275fac = function ShareDmoComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ShareDmoComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ShareDmoComponent, selectors: [["app-sharedmo-controls"]], hostBindings: function ShareDmoComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("scroll", function ShareDmoComponent_scroll_HostBindingHandler() {
          return ctx.onWindowScroll();
        }, false, \u0275\u0275resolveWindow);
      }
    }, inputs: { shareDmoList: "shareDmoList", showContextMenuFor: "showContextMenuFor", contextMenuPosition: "contextMenuPosition", showContextMenu: "showContextMenu", rows: "rows" }, outputs: { shareDmoSelect: "shareDmoSelect" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [["class", "contextMenuContainer", 3, "ngStyle", "left", "top", 4, "ngIf"], [1, "contextMenuContainer", 3, "ngStyle"], [1, "formcomponents"], ["id", "form-controls", 1, "list-group", "drag-list"], ["type", "text", "placeholder", "Search...", 1, "form-control", "sticky-search", 2, "font-size", "13px", 3, "input"], ["class", "list-group-item list-group-item-action list-group-item-success drag-list-item", 3, "click", 4, "ngFor", "ngForOf"], [1, "list-group-item", "list-group-item-action", "list-group-item-success", "drag-list-item", 3, "click"], [2, "margin-right", "5px"]], template: function ShareDmoComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, ShareDmoComponent_div_0_Template, 5, 7, "div", 0);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.showContextMenu);
      }
    }, dependencies: [
      NgIf,
      NgStyle,
      NgForOf
    ], styles: ['\n\n.contextMenuContainer[_ngcontent-%COMP%] {\n  background: #fff;\n  height: 350px;\n  overflow: auto;\n  display: flex;\n  position: fixed;\n  border-radius: 8px;\n  transform-origin: top left;\n  z-index: 10000;\n  border: 1px solid #ddd;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n.contextMenuContainer.visible[_ngcontent-%COMP%] {\n  transition: transform 200ms ease-in-out;\n}\n.menu-link[_ngcontent-%COMP%] {\n  cursor: pointer;\n  height: 23px;\n  background: #559000;\n  color: #fff;\n  font-size: 11px;\n  font-family: "Museo Sans", sans-serif;\n}\n.menu-link[_ngcontent-%COMP%]:hover {\n}\n.menuIcon[_ngcontent-%COMP%] {\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.form-view[_ngcontent-%COMP%] {\n  position: relative;\n}\n.leftcol[_ngcontent-%COMP%] {\n  min-height: 550px;\n  float: left;\n  padding: 0px;\n  position: sticky;\n  top: 0;\n}\n.leftlayout[_ngcontent-%COMP%] {\n  height: 30px;\n  border: 1px solid #ddd;\n  margin-left: 7px;\n  padding: 4px;\n  font-size: 13px;\n  margin-right: 7px;\n}\n.leftlayoutdmotyp[_ngcontent-%COMP%] {\n  height: 415px;\n  border: 1px solid #ddd;\n  margin-right: 5px;\n  padding: 6px;\n  font-size: 15px;\n}\n.leftlayout1[_ngcontent-%COMP%] {\n  height: 30px;\n  border-bottom: 1px solid #ddd;\n  font-size: 13px;\n}\n.formcomponents[_ngcontent-%COMP%] {\n  width: 250px;\n  overflow-y: auto;\n  max-height: 358px;\n  overflow-x: hidden;\n  border-bottom: 2px solid green;\n  padding-bottom: 2px;\n}\ndiv.scroll-list[_ngcontent-%COMP%] {\n  overflow: auto;\n  max-height: 70vh;\n}\n.close[_ngcontent-%COMP%] {\n  color: white;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n.close[_ngcontent-%COMP%]:hover, \n.close[_ngcontent-%COMP%]:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px !important;\n  cursor: pointer;\n  padding: 10px 15px !important;\n  border: none;\n  border-left: 3px solid transparent;\n  transition: border-left 0.3s, background-color 0.3s;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:hover {\n  border-left: 3px solid #559000;\n  background-color: #f0f9f0;\n  border-radius: 5px;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:last-child {\n  margin-bottom: 0;\n}\n.formarea[_ngcontent-%COMP%] {\n  visibility: visible;\n  position: relative;\n  min-height: 450px;\n  padding: 10px;\n  border: dotted 2px #e8e8e8;\n  float: right;\n}\n.col[_ngcontent-%COMP%] {\n  float: left;\n}\n.alert[_ngcontent-%COMP%] {\n  border-radius: 0;\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  text-align: center;\n  font-size: 12px;\n}\n.alert-info[_ngcontent-%COMP%] {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  margin: 10px 20px;\n}\n.dmo-columns[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 5px;\n  margin-bottom: 5px;\n}\n.dmo-columns[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  align-self: self-start;\n}\n.dmo-columns[_ngcontent-%COMP%]   .span-2[_ngcontent-%COMP%] {\n  grid-column: span 2;\n}\n.cdk-drop-list[_ngcontent-%COMP%]:not(#form-controls) {\n  border: 2px dotted #e8e8e8;\n  transform: translate3d(0, 0, 0);\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  transform: translate3d(0, 0, 0);\n}\n.drag-list-item[_ngcontent-%COMP%]:last-child {\n  border: none;\n}\n.drag-list-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  cursor: move;\n  background: white;\n  padding: 0 20px;\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drop-list-receiving[_ngcontent-%COMP%]:not(#form-controls) {\n  border: #4c9e00 dotted 2px;\n}\n.drag-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-list-item[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  min-width: 250px;\n  transform: translate3d(0, 0, 0);\n}\n.item-actions[_ngcontent-%COMP%] {\n  background-color: #fff;\n  position: absolute;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  display: none;\n}\n.item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.form-control[_ngcontent-%COMP%] {\n  height: 28px !important;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n}\n.sticky-search[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 0;\n  z-index: 9;\n  background-color: white;\n  border-radius: 8px 8px 0 0;\n  padding: 6px 12px;\n}\n/*# sourceMappingURL=share-dmo.component.css.map */'], data: { animation: [
      trigger("enterAnimation", [
        transition(":enter", [
          style({ transform: "translateY(1%)", opacity: 0 }),
          animate("200ms", style({ transform: "translateY(0)", opacity: 1 }))
        ]),
        transition(":leave", [
          style({ transform: "translateY(0)", opacity: 1 }),
          animate("200ms", style({ transform: "translateY(1%)", opacity: 0 }))
        ])
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ShareDmoComponent, { className: "ShareDmoComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\share-dmo\\share-dmo.component.ts", lineNumber: 30 });
})();

// src/app/admin/data-modeler1/components1/contextMenu/contextMenu.component.ts
function ContextMenuComponent_div_0_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 3);
    \u0275\u0275listener("click", function ContextMenuComponent_div_0_div_2_Template_div_click_0_listener($event) {
      const menuItem_r4 = \u0275\u0275restoreView(_r3).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onContextMenuClick($event, menuItem_r4.menuEvent));
    });
    \u0275\u0275element(1, "i", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const menuItem_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", menuItem_r4.menuIcon, " menuIcon");
    \u0275\u0275propertyInterpolate("ngbTooltip", menuItem_r4.menuText);
  }
}
function ContextMenuComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275listener("click", function ContextMenuComponent_div_0_Template_div_click_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.clickout($event));
    }, false, \u0275\u0275resolveDocument);
    \u0275\u0275elementContainerStart(1);
    \u0275\u0275template(2, ContextMenuComponent_div_0_div_2_Template, 2, 4, "div", 2);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("left", ctx_r1.contextMenuPosition.centerX, "px")("top", ctx_r1.contextMenuPosition.centerY, "px")("transform", "translate(-50%, -100%)");
    \u0275\u0275classProp("context-menu-visible", ctx_r1.showContextMenu);
    \u0275\u0275property("ngStyle", ctx_r1.style);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r1.contextMenuItems);
  }
}
var ContextMenuComponent = class _ContextMenuComponent {
  get isPositionValid() {
    return !!(this.contextMenuPosition && (this.contextMenuPosition.centerX !== 0 || this.contextMenuPosition.centerY !== 0));
  }
  constructor(eRef, service, cdref, renderer) {
    this.eRef = eRef;
    this.service = service;
    this.cdref = cdref;
    this.renderer = renderer;
    this.object = null;
    this.showContextMenuFor = null;
    this.contextMenuPosition = null;
    this.type = "";
    this.contextMenuPositiontest = { x: "0px", y: "0px" };
    this.style = {};
    this.contextMenuSelected = new EventEmitter();
    this.formsControls = Object.values(DMOS2).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));
    this.contextMenuItems = [];
    this.showContextMenu = false;
    this.isDmoExist = false;
    this.contextMenuItems = [];
    service.getHideContextMenu().subscribe((result) => {
      if (!result.dmogId) {
        this.showContextMenu = result;
      }
    });
  }
  ngOnChanges() {
    let rowhasColumn = false;
    if (this.type == "dmo")
      this.style = {
        // left: `${this.left}px`,
        // top: `${this.top}px`,
        width: `150px`,
        display: `block`
      };
    if (this.showContextMenuFor) {
      this.contextMenuItems = [];
      if (this.showContextMenuFor.type === "parentRow") {
        let dmoExists = false;
        let rows = this.showContextMenuFor.r;
        for (let index = 0; index < rows.columns.length; index++) {
          rowhasColumn = true;
          const rc = rows.columns[index];
          if (rc.dmoguid && rc.dmoguid.length > 0 && this.isDmoExist) {
            dmoExists = true;
            break;
          } else if (rc.rows) {
            for (let index2 = 0; index2 < rc.rows.length; index2++) {
              const element = rc.rows[index2];
              let existingColumn = element.columns.filter((a) => a.dmoguid.length > 0);
              if (existingColumn.length > 0 && this.isDmoExist) {
                dmoExists = true;
                break;
              }
            }
          }
        }
        if (!dmoExists) {
          this.contextMenuItems = [
            //     {
            //     menuText: 'Add Column',
            //     menuIcon: 'fa fa-plus',
            //     menuEvent:'AddColumn'
            //   }]
            // }else{
            // this.contextMenuItems=[ 
            //   {
            //   menuText: 'Add Column',
            //   menuIcon: 'fa fa-plus',
            //   menuEvent:'AddColumn'
            // },
            {
              menuText: "Remove Row",
              menuIcon: "fa fa-trash-alt",
              menuEvent: "RemoveRow"
            }
          ];
        }
      } else if (this.showContextMenuFor.type === "column") {
        let dmoExists = false;
        let columnOnly = false;
        let hasChild = false;
        let rows = this.showContextMenuFor.r;
        let item = { "rowIndex": this.showContextMenuFor.rowIndex, "colIndex": this.showContextMenuFor.colIndex };
        let rowIndex = item.rowIndex;
        let colIndex = item.colIndex;
        let column = rows.columns[colIndex];
        if (column) {
          hasChild = column.rows.length > 0;
          if (column.dmoguid.length > 0 && this.isDmoExist) {
            dmoExists = true;
            columnOnly = column.rows.length == 0;
          }
          for (let index = 0; index < column.rows.length; index++) {
            const element = column.rows[index];
            let existingColumn = element.columns.filter((a) => a.dmoguid.length > 0);
            if (existingColumn.length > 0 && this.isDmoExist) {
              dmoExists = true;
              break;
            }
          }
        }
        if (dmoExists) {
          if (columnOnly) {
            this.contextMenuItems = [
              {
                menuText: "Edit DMO",
                menuIcon: "fa fa-wrench",
                menuEvent: "EditDMO"
              },
              {
                menuText: "Conditions",
                menuIcon: "fa fa-cogs",
                menuEvent: "ConditionsDMO"
              },
              {
                menuText: "Clone",
                menuIcon: "fa fa-copy",
                menuEvent: "CloneDMO"
              },
              {
                menuText: "Unshare DMO",
                menuIcon: "fas fa-unlink",
                menuEvent: "DeleteDMO"
              }
            ];
          } else {
          }
        } else {
          if (!hasChild) {
            this.contextMenuItems = [
              //   {
              //   menuText: 'Add Row',
              //   menuIcon: 'fa fa-plus',
              //   menuEvent:'AddRow'
              // },
              {
                menuText: "Remove Column",
                menuIcon: "fa fa-trash-alt",
                menuEvent: "RemoveColumn"
              }
              // {
              //   menuText: 'DMO',
              //   menuIcon: 'fa fa-users',
              //   menuEvent:'AddDMO'
              // },{
              //   menuText: 'share DMO',
              //   menuIcon: 'fa fa-share',
              //   menuEvent:'shareDMO'
              // }
            ];
          }
        }
      } else if (this.showContextMenuFor.type === "columnRow") {
        let dmoExists = false;
        let rows = this.showContextMenuFor.r;
        let item = { "rowIndex": this.showContextMenuFor.rowIndex, "colIndex": this.showContextMenuFor.colIndex, "ColumnRowIndex": this.showContextMenuFor.colRowIndex, "colRowcolumnIndex": this.showContextMenuFor.colRowcolumnIndex };
        let rowIndex = item.rowIndex;
        let colIndex = item.colIndex;
        let column = rows.columns[colIndex];
        if (column) {
          const existingColumn = column?.rows?.[item.ColumnRowIndex];
          const dmoGuid = existingColumn?.columns?.[item.colRowcolumnIndex]?.dmoguid;
          if (dmoGuid?.length > 0 && this.isDmoExist) {
            dmoExists = true;
          }
        }
        if (dmoExists) {
          this.contextMenuItems = [
            {
              menuText: "Edit DMO",
              menuIcon: "fa fa-wrench",
              menuEvent: "EditDMO"
            },
            {
              menuText: "Conditions",
              menuIcon: "fa fa-cogs",
              menuEvent: "ConditionsDMO"
            },
            {
              menuText: "Clone",
              menuIcon: "fa fa-copy",
              menuEvent: "CloneDMO"
            },
            {
              menuText: "Unshare DMO",
              menuIcon: "fas fa-unlink",
              menuEvent: "DeleteDMO"
            }
          ];
        } else {
          this.contextMenuItems = [
            //   {
            //   menuText: 'Add Column',
            //   menuIcon: 'fa fa-plus',
            //   menuEvent:'AddColumn'
            // },
            {
              menuText: "Remove Column",
              menuIcon: "fa fa-trash-alt",
              menuEvent: "RemoveColumn"
            }
            // {
            //   menuText: 'DMO',
            //   menuIcon: 'fa fa-users',
            //   menuEvent:'AddDMO'
            // },
            // {
            //   menuText: 'share DMO',
            //   menuIcon: 'fa fa-share',
            //   menuEvent:'shareDMO'
            // }
          ];
        }
      } else if (this.showContextMenuFor.type === "NestedcolumnRow") {
        let dmoExists = false;
        let rows = this.showContextMenuFor.r;
        let item = { "rowIndex": this.showContextMenuFor.rowIndex, "colIndex": this.showContextMenuFor.colIndex, "ColumnRowIndex": this.showContextMenuFor.colRowIndex };
        let rowIndex = item.rowIndex;
        let colIndex = item.colIndex;
        let column = rows.columns[colIndex];
        if (column) {
          const existingColumn = column?.rows?.[item.ColumnRowIndex];
          if (existingColumn?.columns?.length > 0 && this.isDmoExist) {
            dmoExists = true;
          }
        }
        if (!dmoExists) {
          this.contextMenuItems = [
            {
              menuText: "Remove Row",
              menuIcon: "fa fa-trash-alt",
              menuEvent: "RemoveRow"
            }
          ];
        }
      }
    }
    if (this.contextMenuPosition) {
      if (!this.contextMenuPosition.centerX || !this.contextMenuPosition.centerY) {
        if (this.contextMenuPosition.left !== void 0 && this.contextMenuPosition.width !== void 0) {
          this.contextMenuPosition.centerX = this.contextMenuPosition.left + this.contextMenuPosition.width / 2;
        } else {
          this.contextMenuPosition.centerX = this.contextMenuPosition.rightClickMenuPositionX;
        }
        if (this.contextMenuPosition.top !== void 0 && this.contextMenuPosition.height !== void 0) {
          this.contextMenuPosition.centerY = this.contextMenuPosition.top + this.contextMenuPosition.height / 2;
        } else {
          this.contextMenuPosition.centerY = this.contextMenuPosition.rightClickMenuPositionY;
        }
        this.showContextMenu = true;
      }
      if (rowhasColumn) {
        const targetDiv = document.getElementById(this.selectedDivId);
        if (targetDiv) {
          const divWidth = targetDiv.offsetWidth;
          const rect = targetDiv.getBoundingClientRect();
          const clickX = this.contextMenuPosition.rightClickMenuPositionX;
          this.contextMenuPosition.centerX = clickX + divWidth / 2;
          this.contextMenuPosition.centerY = rect.top;
          this.showContextMenu = true;
        }
      }
    }
  }
  ngAfterViewInit() {
    setTimeout(() => {
      const container = document.querySelector(".form-view");
      if (container) {
        this.renderer.listen(container, "scroll", () => {
          this.showContextMenu = false;
        });
      } else {
        console.warn("Scrollable container not found!");
      }
    });
  }
  //clickout(event) {
  // if (event.target.classList.contains('menu-link')) {
  //   this.showContextMenu = false;
  // }
  // if (event.target.classList.contains('holiday')) {
  //   this.showContextMenu = event.target.closest('.shiftDay').contains(this.eRef.nativeElement)
  // }
  // else if (!event.target.classList.contains("shiftLabel"))
  // {
  //   this.showContextMenu = event.target.contains(this.eRef.nativeElement)
  // }
  // }
  onContextMenuClick(event, data) {
    this.contextMenuSelected.emit({ option: data, showContextMenuFor: this.showContextMenuFor, position: this.contextMenuPositiontest });
    setTimeout(() => {
      this.showContextMenu = false;
      this.service.setSidebarclose(true);
    }, 250);
  }
  onWindowScroll() {
    this.showContextMenu = false;
  }
  clickout(event) {
    this.showContextMenu = false;
  }
  static {
    this.\u0275fac = function ContextMenuComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ContextMenuComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ContextMenuComponent, selectors: [["app-contextMenu"]], hostBindings: function ContextMenuComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("scroll", function ContextMenuComponent_scroll_HostBindingHandler() {
          return ctx.onWindowScroll();
        }, false, \u0275\u0275resolveWindow)("click", function ContextMenuComponent_click_HostBindingHandler($event) {
          return ctx.clickout($event);
        }, false, \u0275\u0275resolveDocument);
      }
    }, inputs: { readonly: "readonly", object: "object", showContextMenuFor: "showContextMenuFor", contextMenuPosition: "contextMenuPosition", type: "type", selectedDivId: "selectedDivId", isDmoExist: "isDmoExist" }, outputs: { contextMenuSelected: "contextMenuSelected" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [["class", "contextMenuContainer", 3, "ngStyle", "context-menu-visible", "left", "top", "transform", "click", 4, "ngIf"], [1, "contextMenuContainer", 3, "click", "ngStyle"], ["class", "menu-link click_input item-action", 3, "click", 4, "ngFor", "ngForOf"], [1, "menu-link", "click_input", "item-action", 3, "click"], [3, "ngbTooltip"]], template: function ContextMenuComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, ContextMenuComponent_div_0_Template, 3, 10, "div", 0);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.showContextMenu);
      }
    }, dependencies: [NgIf, NgStyle, NgForOf, NgbTooltip], styles: ['\n\n.contextMenuContainer[_ngcontent-%COMP%] {\n  display: block;\n  position: fixed;\n  border-radius: 5px 5px 0px 0px;\n  transform-origin: top left;\n  background: rgb(0, 89, 150);\n  z-index: 10000;\n}\n.contextMenuContainer.visible[_ngcontent-%COMP%] {\n  transition: transform 200ms ease-in-out;\n}\n.menu-link[_ngcontent-%COMP%] {\n  cursor: pointer;\n  height: 23px;\n  color: #fff;\n  font-size: 11px;\n  font-family: "Roboto", sans-serif;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.context-menu-visible[_ngcontent-%COMP%] {\n  display: block !important;\n}\n/*# sourceMappingURL=contextMenu.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ContextMenuComponent, { className: "ContextMenuComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\contextMenu\\contextMenu.component.ts", lineNumber: 17 });
})();

// src/app/admin/data-modeler1/decorators/skipIfDisabled.decorator.ts
var skipIfDisabled = (target, propertyKey, descriptor) => {
  const originalMethod = descriptor.value;
  descriptor.value = function(...args) {
    if (!this.columnResizeEnabled)
      return;
    return originalMethod.apply(this, args);
  };
  return descriptor;
};

// src/app/admin/data-modeler1/directives/resize-columns.directive.ts
var ResizeColumnsDirective = class _ResizeColumnsDirective {
  constructor(el) {
    this.el = el;
    this.rowIndex = -1;
    this.columnResizeEnabled = true;
    this.onResize = new EventEmitter();
    this.isResizing = false;
    this.currentBoxIndex = 0;
    this.startX = 0;
    this.startWidth = 0;
    this.animationFrameId = null;
    this.containerWidth = 0;
  }
  ngAfterViewInit() {
    this.childDivs = this.el.nativeElement.querySelectorAll(".box");
    if (this.childDivs.length > 0) {
      this.childDivs.forEach((childDiv, index) => {
        childDiv.addEventListener("mousedown", (event) => this.mousedownHandler(event, index));
      });
    }
    this.containerWidth = this.el.nativeElement.offsetWidth;
  }
  stopResize() {
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    this.isResizing = false;
  }
  mousedownHandler(event, colIndex) {
    const isResizeHandle = event.target?.classList.contains("resizer");
    if (isResizeHandle) {
      this.isResizing = true;
      this.currentBoxIndex = colIndex;
      this.startX = event.clientX;
      this.startWidth = this.rows[this.rowIndex].columns[colIndex]?.width;
      this.containerWidth = this.el.nativeElement.offsetWidth;
      event.preventDefault();
    }
  }
  onMouseLeave(event) {
    this.stopResize();
  }
  onMouseUp(event) {
    if (this.isResizing) {
      this.onResize.emit({
        columns: this.rows[this.rowIndex].columns,
        rowIndex: this.rowIndex
      });
    }
    this.stopResize();
  }
  onMouseMove(event) {
    if (!this.isResizing)
      return;
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
    }
    this.animationFrameId = requestAnimationFrame(() => {
      const minWidth = 10;
      const dx = event.clientX - this.startX;
      const newWidthPx = this.startWidth * this.containerWidth / 100 + dx;
      const newWidth = newWidthPx / this.containerWidth * 100;
      let rightBoxesWidth = 0;
      for (let i = this.currentBoxIndex + 1; i < this.rows[this.rowIndex].columns.length; i++) {
        rightBoxesWidth += this.rows[this.rowIndex].columns[i]?.width;
      }
      const maxWidth = 100 - this.rows[this.rowIndex].columns.slice(0, this.currentBoxIndex).reduce((sum, box) => sum + box.width, 0) - (this.rows[this.rowIndex].columns.length - this.currentBoxIndex - 1) * 10;
      const constrainedWidth = Math.max(minWidth, Math.min(newWidth, maxWidth));
      const delta = constrainedWidth - this.rows[this.rowIndex].columns[this.currentBoxIndex]?.width;
      this.rows[this.rowIndex].columns[this.currentBoxIndex] ??= {};
      this.rows[this.rowIndex].columns[this.currentBoxIndex].width = constrainedWidth;
      if (rightBoxesWidth > 0) {
        for (let i = this.currentBoxIndex + 1; i < this.rows[this.rowIndex].columns.length; i++) {
          this.rows[this.rowIndex].columns[i] ??= {};
          const ratio = this.rows[this.rowIndex].columns[i]?.width / rightBoxesWidth;
          this.rows[this.rowIndex].columns[i].width = Math.max(minWidth, this.rows[this.rowIndex].columns[i]?.width - delta * ratio);
        }
      }
    });
  }
  static {
    this.\u0275fac = function ResizeColumnsDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ResizeColumnsDirective)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({ type: _ResizeColumnsDirective, selectors: [["", "columnResize", ""]], hostBindings: function ResizeColumnsDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("mouseleave", function ResizeColumnsDirective_mouseleave_HostBindingHandler($event) {
          return ctx.onMouseLeave($event);
        })("mouseup", function ResizeColumnsDirective_mouseup_HostBindingHandler($event) {
          return ctx.onMouseUp($event);
        })("mousemove", function ResizeColumnsDirective_mousemove_HostBindingHandler($event) {
          return ctx.onMouseMove($event);
        });
      }
    }, inputs: { rows: "rows", rowIndex: "rowIndex", columnResizeEnabled: "columnResizeEnabled" }, outputs: { onResize: "onResize" }, exportAs: ["columnResize"], standalone: true });
  }
};
__decorate([
  skipIfDisabled
], ResizeColumnsDirective.prototype, "ngAfterViewInit", null);
__decorate([
  skipIfDisabled
], ResizeColumnsDirective.prototype, "stopResize", null);
__decorate([
  skipIfDisabled
], ResizeColumnsDirective.prototype, "onMouseMove", null);

// node_modules/@angular/material/fesm2022/menu.mjs
var _c07 = ["mat-menu-item", ""];
var _c14 = [[["mat-icon"], ["", "matMenuItemIcon", ""]], "*"];
var _c23 = ["mat-icon, [matMenuItemIcon]", "*"];
function MatMenuItem_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 2);
    \u0275\u0275element(1, "polygon", 3);
    \u0275\u0275elementEnd();
  }
}
var _c3 = ["*"];
function MatMenu_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275listener("keydown", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1._handleKeydown($event));
    })("click", function MatMenu_ng_template_0_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.closed.emit("click"));
    })("@transformMenu.start", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1._onAnimationStart($event));
    })("@transformMenu.done", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1._onAnimationDone($event));
    });
    \u0275\u0275elementStart(1, "div", 1);
    \u0275\u0275projection(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1._classList);
    \u0275\u0275property("id", ctx_r1.panelId)("@transformMenu", ctx_r1._panelAnimationState);
    \u0275\u0275attribute("aria-label", ctx_r1.ariaLabel || null)("aria-labelledby", ctx_r1.ariaLabelledby || null)("aria-describedby", ctx_r1.ariaDescribedby || null);
  }
}
var MAT_MENU_PANEL = new InjectionToken("MAT_MENU_PANEL");
var MatMenuItem = class _MatMenuItem {
  constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {
    this._elementRef = _elementRef;
    this._document = _document;
    this._focusMonitor = _focusMonitor;
    this._parentMenu = _parentMenu;
    this._changeDetectorRef = _changeDetectorRef;
    this.role = "menuitem";
    this.disabled = false;
    this.disableRipple = false;
    this._hovered = new Subject();
    this._focused = new Subject();
    this._highlighted = false;
    this._triggersSubmenu = false;
    _parentMenu?.addItem?.(this);
  }
  /** Focuses the menu item. */
  focus(origin, options) {
    if (this._focusMonitor && origin) {
      this._focusMonitor.focusVia(this._getHostElement(), origin, options);
    } else {
      this._getHostElement().focus(options);
    }
    this._focused.next(this);
  }
  ngAfterViewInit() {
    if (this._focusMonitor) {
      this._focusMonitor.monitor(this._elementRef, false);
    }
  }
  ngOnDestroy() {
    if (this._focusMonitor) {
      this._focusMonitor.stopMonitoring(this._elementRef);
    }
    if (this._parentMenu && this._parentMenu.removeItem) {
      this._parentMenu.removeItem(this);
    }
    this._hovered.complete();
    this._focused.complete();
  }
  /** Used to set the `tabindex`. */
  _getTabIndex() {
    return this.disabled ? "-1" : "0";
  }
  /** Returns the host DOM element. */
  _getHostElement() {
    return this._elementRef.nativeElement;
  }
  /** Prevents the default element actions if it is disabled. */
  _checkDisabled(event) {
    if (this.disabled) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  /** Emits to the hover stream. */
  _handleMouseEnter() {
    this._hovered.next(this);
  }
  /** Gets the label to be used when determining whether the option should be focused. */
  getLabel() {
    const clone = this._elementRef.nativeElement.cloneNode(true);
    const icons = clone.querySelectorAll("mat-icon, .material-icons");
    for (let i = 0; i < icons.length; i++) {
      icons[i].remove();
    }
    return clone.textContent?.trim() || "";
  }
  _setHighlighted(isHighlighted) {
    this._highlighted = isHighlighted;
    this._changeDetectorRef?.markForCheck();
  }
  _setTriggersSubmenu(triggersSubmenu) {
    this._triggersSubmenu = triggersSubmenu;
    this._changeDetectorRef?.markForCheck();
  }
  _hasFocus() {
    return this._document && this._document.activeElement === this._getHostElement();
  }
  static {
    this.\u0275fac = function MatMenuItem_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatMenuItem)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(MAT_MENU_PANEL, 8), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatMenuItem,
      selectors: [["", "mat-menu-item", ""]],
      hostAttrs: [1, "mat-mdc-menu-item", "mat-mdc-focus-indicator"],
      hostVars: 8,
      hostBindings: function MatMenuItem_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("click", function MatMenuItem_click_HostBindingHandler($event) {
            return ctx._checkDisabled($event);
          })("mouseenter", function MatMenuItem_mouseenter_HostBindingHandler() {
            return ctx._handleMouseEnter();
          });
        }
        if (rf & 2) {
          \u0275\u0275attribute("role", ctx.role)("tabindex", ctx._getTabIndex())("aria-disabled", ctx.disabled)("disabled", ctx.disabled || null);
          \u0275\u0275classProp("mat-mdc-menu-item-highlighted", ctx._highlighted)("mat-mdc-menu-item-submenu-trigger", ctx._triggersSubmenu);
        }
      },
      inputs: {
        role: "role",
        disabled: [2, "disabled", "disabled", booleanAttribute],
        disableRipple: [2, "disableRipple", "disableRipple", booleanAttribute]
      },
      exportAs: ["matMenuItem"],
      standalone: true,
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275StandaloneFeature],
      attrs: _c07,
      ngContentSelectors: _c23,
      decls: 5,
      vars: 3,
      consts: [[1, "mat-mdc-menu-item-text"], ["matRipple", "", 1, "mat-mdc-menu-ripple", 3, "matRippleDisabled", "matRippleTrigger"], ["viewBox", "0 0 5 10", "focusable", "false", "aria-hidden", "true", 1, "mat-mdc-menu-submenu-icon"], ["points", "0,0 5,5 0,10"]],
      template: function MatMenuItem_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef(_c14);
          \u0275\u0275projection(0);
          \u0275\u0275elementStart(1, "span", 0);
          \u0275\u0275projection(2, 1);
          \u0275\u0275elementEnd();
          \u0275\u0275element(3, "div", 1);
          \u0275\u0275template(4, MatMenuItem_Conditional_4_Template, 2, 0, ":svg:svg", 2);
        }
        if (rf & 2) {
          \u0275\u0275advance(3);
          \u0275\u0275property("matRippleDisabled", ctx.disableRipple || ctx.disabled)("matRippleTrigger", ctx._getHostElement());
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx._triggersSubmenu ? 4 : -1);
        }
      },
      dependencies: [MatRipple],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatMenuItem, [{
    type: Component,
    args: [{
      selector: "[mat-menu-item]",
      exportAs: "matMenuItem",
      host: {
        "[attr.role]": "role",
        "class": "mat-mdc-menu-item mat-mdc-focus-indicator",
        "[class.mat-mdc-menu-item-highlighted]": "_highlighted",
        "[class.mat-mdc-menu-item-submenu-trigger]": "_triggersSubmenu",
        "[attr.tabindex]": "_getTabIndex()",
        "[attr.aria-disabled]": "disabled",
        "[attr.disabled]": "disabled || null",
        "(click)": "_checkDisabled($event)",
        "(mouseenter)": "_handleMouseEnter()"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [MatRipple],
      template: '<ng-content select="mat-icon, [matMenuItemIcon]"></ng-content>\n<span class="mat-mdc-menu-item-text"><ng-content></ng-content></span>\n<div class="mat-mdc-menu-ripple" matRipple\n     [matRippleDisabled]="disableRipple || disabled"\n     [matRippleTrigger]="_getHostElement()">\n</div>\n\n@if (_triggersSubmenu) {\n     <svg\n       class="mat-mdc-menu-submenu-icon"\n       viewBox="0 0 5 10"\n       focusable="false"\n       aria-hidden="true"><polygon points="0,0 5,5 0,10"/></svg>\n}\n'
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: FocusMonitor
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_MENU_PANEL]
    }, {
      type: Optional
    }]
  }, {
    type: ChangeDetectorRef
  }], {
    role: [{
      type: Input
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    disableRipple: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
function throwMatMenuInvalidPositionX() {
  throw Error(`xPosition value must be either 'before' or after'.
      Example: <mat-menu xPosition="before" #menu="matMenu"></mat-menu>`);
}
function throwMatMenuInvalidPositionY() {
  throw Error(`yPosition value must be either 'above' or below'.
      Example: <mat-menu yPosition="above" #menu="matMenu"></mat-menu>`);
}
function throwMatMenuRecursiveError() {
  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is not a parent of the trigger or move the trigger outside of the menu.`);
}
var MAT_MENU_CONTENT = new InjectionToken("MatMenuContent");
var MatMenuContent = class _MatMenuContent {
  constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {
    this._template = _template;
    this._componentFactoryResolver = _componentFactoryResolver;
    this._appRef = _appRef;
    this._injector = _injector;
    this._viewContainerRef = _viewContainerRef;
    this._document = _document;
    this._changeDetectorRef = _changeDetectorRef;
    this._attached = new Subject();
  }
  /**
   * Attaches the content with a particular context.
   * @docs-private
   */
  attach(context = {}) {
    if (!this._portal) {
      this._portal = new TemplatePortal(this._template, this._viewContainerRef);
    }
    this.detach();
    if (!this._outlet) {
      this._outlet = new DomPortalOutlet(this._document.createElement("div"), this._componentFactoryResolver, this._appRef, this._injector);
    }
    const element = this._template.elementRef.nativeElement;
    element.parentNode.insertBefore(this._outlet.outletElement, element);
    this._changeDetectorRef?.markForCheck();
    this._portal.attach(this._outlet, context);
    this._attached.next();
  }
  /**
   * Detaches the content.
   * @docs-private
   */
  detach() {
    if (this._portal.isAttached) {
      this._portal.detach();
    }
  }
  ngOnDestroy() {
    if (this._outlet) {
      this._outlet.dispose();
    }
  }
  static {
    this.\u0275fac = function MatMenuContent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatMenuContent)(\u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(ComponentFactoryResolver$1), \u0275\u0275directiveInject(ApplicationRef), \u0275\u0275directiveInject(Injector), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _MatMenuContent,
      selectors: [["ng-template", "matMenuContent", ""]],
      standalone: true,
      features: [\u0275\u0275ProvidersFeature([{
        provide: MAT_MENU_CONTENT,
        useExisting: _MatMenuContent
      }])]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatMenuContent, [{
    type: Directive,
    args: [{
      selector: "ng-template[matMenuContent]",
      providers: [{
        provide: MAT_MENU_CONTENT,
        useExisting: MatMenuContent
      }],
      standalone: true
    }]
  }], () => [{
    type: TemplateRef
  }, {
    type: ComponentFactoryResolver$1
  }, {
    type: ApplicationRef
  }, {
    type: Injector
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: ChangeDetectorRef
  }], null);
})();
var matMenuAnimations = {
  /**
   * This animation controls the menu panel's entry and exit from the page.
   *
   * When the menu panel is added to the DOM, it scales in and fades in its border.
   *
   * When the menu panel is removed from the DOM, it simply fades out after a brief
   * delay to display the ripple.
   */
  transformMenu: trigger("transformMenu", [state("void", style({
    opacity: 0,
    transform: "scale(0.8)"
  })), transition("void => enter", animate("120ms cubic-bezier(0, 0, 0.2, 1)", style({
    opacity: 1,
    transform: "scale(1)"
  }))), transition("* => void", animate("100ms 25ms linear", style({
    opacity: 0
  })))]),
  /**
   * This animation fades in the background color and content of the menu panel
   * after its containing element is scaled in.
   */
  fadeInItems: trigger("fadeInItems", [
    // TODO(crisbeto): this is inside the `transformMenu`
    // now. Remove next time we do breaking changes.
    state("showing", style({
      opacity: 1
    })),
    transition("void => *", [style({
      opacity: 0
    }), animate("400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)")])
  ])
};
var fadeInItems = matMenuAnimations.fadeInItems;
var transformMenu = matMenuAnimations.transformMenu;
var menuPanelUid = 0;
var MAT_MENU_DEFAULT_OPTIONS = new InjectionToken("mat-menu-default-options", {
  providedIn: "root",
  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY
});
function MAT_MENU_DEFAULT_OPTIONS_FACTORY() {
  return {
    overlapTrigger: false,
    xPosition: "after",
    yPosition: "below",
    backdropClass: "cdk-overlay-transparent-backdrop"
  };
}
var MatMenu = class _MatMenu {
  /** Position of the menu in the X axis. */
  get xPosition() {
    return this._xPosition;
  }
  set xPosition(value) {
    if (value !== "before" && value !== "after" && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throwMatMenuInvalidPositionX();
    }
    this._xPosition = value;
    this.setPositionClasses();
  }
  /** Position of the menu in the Y axis. */
  get yPosition() {
    return this._yPosition;
  }
  set yPosition(value) {
    if (value !== "above" && value !== "below" && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throwMatMenuInvalidPositionY();
    }
    this._yPosition = value;
    this.setPositionClasses();
  }
  /**
   * This method takes classes set on the host mat-menu element and applies them on the
   * menu template that displays in the overlay container.  Otherwise, it's difficult
   * to style the containing menu from outside the component.
   * @param classes list of class names
   */
  set panelClass(classes) {
    const previousPanelClass = this._previousPanelClass;
    const newClassList = __spreadValues({}, this._classList);
    if (previousPanelClass && previousPanelClass.length) {
      previousPanelClass.split(" ").forEach((className) => {
        newClassList[className] = false;
      });
    }
    this._previousPanelClass = classes;
    if (classes && classes.length) {
      classes.split(" ").forEach((className) => {
        newClassList[className] = true;
      });
      this._elementRef.nativeElement.className = "";
    }
    this._classList = newClassList;
  }
  /**
   * This method takes classes set on the host mat-menu element and applies them on the
   * menu template that displays in the overlay container.  Otherwise, it's difficult
   * to style the containing menu from outside the component.
   * @deprecated Use `panelClass` instead.
   * @breaking-change 8.0.0
   */
  get classList() {
    return this.panelClass;
  }
  set classList(classes) {
    this.panelClass = classes;
  }
  constructor(_elementRef, _unusedNgZone, defaultOptions, _changeDetectorRef) {
    this._elementRef = _elementRef;
    this._changeDetectorRef = _changeDetectorRef;
    this._elevationPrefix = "mat-elevation-z";
    this._baseElevation = null;
    this._directDescendantItems = new QueryList();
    this._classList = {};
    this._panelAnimationState = "void";
    this._animationDone = new Subject();
    this.closed = new EventEmitter();
    this.close = this.closed;
    this.panelId = `mat-menu-panel-${menuPanelUid++}`;
    this._injector = inject(Injector);
    this.overlayPanelClass = defaultOptions.overlayPanelClass || "";
    this._xPosition = defaultOptions.xPosition;
    this._yPosition = defaultOptions.yPosition;
    this.backdropClass = defaultOptions.backdropClass;
    this.overlapTrigger = defaultOptions.overlapTrigger;
    this.hasBackdrop = defaultOptions.hasBackdrop;
  }
  ngOnInit() {
    this.setPositionClasses();
  }
  ngAfterContentInit() {
    this._updateDirectDescendants();
    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();
    this._keyManager.tabOut.subscribe(() => this.closed.emit("tab"));
    this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap((items) => merge(...items.map((item) => item._focused)))).subscribe((focusedItem) => this._keyManager.updateActiveItem(focusedItem));
    this._directDescendantItems.changes.subscribe((itemsList) => {
      const manager = this._keyManager;
      if (this._panelAnimationState === "enter" && manager.activeItem?._hasFocus()) {
        const items = itemsList.toArray();
        const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));
        if (items[index] && !items[index].disabled) {
          manager.setActiveItem(index);
        } else {
          manager.setNextItemActive();
        }
      }
    });
  }
  ngOnDestroy() {
    this._keyManager?.destroy();
    this._directDescendantItems.destroy();
    this.closed.complete();
    this._firstItemFocusRef?.destroy();
  }
  /** Stream that emits whenever the hovered menu item changes. */
  _hovered() {
    const itemChanges = this._directDescendantItems.changes;
    return itemChanges.pipe(startWith(this._directDescendantItems), switchMap((items) => merge(...items.map((item) => item._hovered))));
  }
  /*
   * Registers a menu item with the menu.
   * @docs-private
   * @deprecated No longer being used. To be removed.
   * @breaking-change 9.0.0
   */
  addItem(_item) {
  }
  /**
   * Removes an item from the menu.
   * @docs-private
   * @deprecated No longer being used. To be removed.
   * @breaking-change 9.0.0
   */
  removeItem(_item) {
  }
  /** Handle a keyboard event from the menu, delegating to the appropriate action. */
  _handleKeydown(event) {
    const keyCode = event.keyCode;
    const manager = this._keyManager;
    switch (keyCode) {
      case ESCAPE:
        if (!hasModifierKey(event)) {
          event.preventDefault();
          this.closed.emit("keydown");
        }
        break;
      case LEFT_ARROW:
        if (this.parentMenu && this.direction === "ltr") {
          this.closed.emit("keydown");
        }
        break;
      case RIGHT_ARROW:
        if (this.parentMenu && this.direction === "rtl") {
          this.closed.emit("keydown");
        }
        break;
      default:
        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
          manager.setFocusOrigin("keyboard");
        }
        manager.onKeydown(event);
        return;
    }
    event.stopPropagation();
  }
  /**
   * Focus the first item in the menu.
   * @param origin Action from which the focus originated. Used to set the correct styling.
   */
  focusFirstItem(origin = "program") {
    this._firstItemFocusRef?.destroy();
    this._firstItemFocusRef = afterNextRender(() => {
      let menuPanel = null;
      if (this._directDescendantItems.length) {
        menuPanel = this._directDescendantItems.first._getHostElement().closest('[role="menu"]');
      }
      if (!menuPanel || !menuPanel.contains(document.activeElement)) {
        const manager = this._keyManager;
        manager.setFocusOrigin(origin).setFirstItemActive();
        if (!manager.activeItem && menuPanel) {
          menuPanel.focus();
        }
      }
    }, {
      injector: this._injector
    });
  }
  /**
   * Resets the active item in the menu. This is used when the menu is opened, allowing
   * the user to start from the first option when pressing the down arrow.
   */
  resetActiveItem() {
    this._keyManager.setActiveItem(-1);
  }
  /**
   * Sets the menu panel elevation.
   * @param depth Number of parent menus that come before the menu.
   */
  setElevation(depth) {
    if (this._baseElevation === null) {
      const styles = typeof getComputedStyle === "function" ? getComputedStyle(this._elementRef.nativeElement) : null;
      const value = styles?.getPropertyValue("--mat-menu-base-elevation-level") || "8";
      this._baseElevation = parseInt(value);
    }
    const elevation = Math.min(this._baseElevation + depth, 24);
    const newElevation = `${this._elevationPrefix}${elevation}`;
    const customElevation = Object.keys(this._classList).find((className) => {
      return className.startsWith(this._elevationPrefix);
    });
    if (!customElevation || customElevation === this._previousElevation) {
      const newClassList = __spreadValues({}, this._classList);
      if (this._previousElevation) {
        newClassList[this._previousElevation] = false;
      }
      newClassList[newElevation] = true;
      this._previousElevation = newElevation;
      this._classList = newClassList;
    }
  }
  /**
   * Adds classes to the menu panel based on its position. Can be used by
   * consumers to add specific styling based on the position.
   * @param posX Position of the menu along the x axis.
   * @param posY Position of the menu along the y axis.
   * @docs-private
   */
  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {
    this._classList = __spreadProps(__spreadValues({}, this._classList), {
      ["mat-menu-before"]: posX === "before",
      ["mat-menu-after"]: posX === "after",
      ["mat-menu-above"]: posY === "above",
      ["mat-menu-below"]: posY === "below"
    });
    this._changeDetectorRef?.markForCheck();
  }
  /** Starts the enter animation. */
  _startAnimation() {
    this._panelAnimationState = "enter";
  }
  /** Resets the panel animation to its initial state. */
  _resetAnimation() {
    this._panelAnimationState = "void";
  }
  /** Callback that is invoked when the panel animation completes. */
  _onAnimationDone(event) {
    this._animationDone.next(event);
    this._isAnimating = false;
  }
  _onAnimationStart(event) {
    this._isAnimating = true;
    if (event.toState === "enter" && this._keyManager.activeItemIndex === 0) {
      event.element.scrollTop = 0;
    }
  }
  /**
   * Sets up a stream that will keep track of any newly-added menu items and will update the list
   * of direct descendants. We collect the descendants this way, because `_allItems` can include
   * items that are part of child menus, and using a custom way of registering items is unreliable
   * when it comes to maintaining the item order.
   */
  _updateDirectDescendants() {
    this._allItems.changes.pipe(startWith(this._allItems)).subscribe((items) => {
      this._directDescendantItems.reset(items.filter((item) => item._parentMenu === this));
      this._directDescendantItems.notifyOnChanges();
    });
  }
  static {
    this.\u0275fac = function MatMenu_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatMenu)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(MAT_MENU_DEFAULT_OPTIONS), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatMenu,
      selectors: [["mat-menu"]],
      contentQueries: function MatMenu_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, MAT_MENU_CONTENT, 5);
          \u0275\u0275contentQuery(dirIndex, MatMenuItem, 5);
          \u0275\u0275contentQuery(dirIndex, MatMenuItem, 4);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.lazyContent = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._allItems = _t);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.items = _t);
        }
      },
      viewQuery: function MatMenu_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(TemplateRef, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.templateRef = _t.first);
        }
      },
      hostVars: 3,
      hostBindings: function MatMenu_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275attribute("aria-label", null)("aria-labelledby", null)("aria-describedby", null);
        }
      },
      inputs: {
        backdropClass: "backdropClass",
        ariaLabel: [0, "aria-label", "ariaLabel"],
        ariaLabelledby: [0, "aria-labelledby", "ariaLabelledby"],
        ariaDescribedby: [0, "aria-describedby", "ariaDescribedby"],
        xPosition: "xPosition",
        yPosition: "yPosition",
        overlapTrigger: [2, "overlapTrigger", "overlapTrigger", booleanAttribute],
        hasBackdrop: [2, "hasBackdrop", "hasBackdrop", (value) => value == null ? null : booleanAttribute(value)],
        panelClass: [0, "class", "panelClass"],
        classList: "classList"
      },
      outputs: {
        closed: "closed",
        close: "close"
      },
      exportAs: ["matMenu"],
      standalone: true,
      features: [\u0275\u0275ProvidersFeature([{
        provide: MAT_MENU_PANEL,
        useExisting: _MatMenu
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275StandaloneFeature],
      ngContentSelectors: _c3,
      decls: 1,
      vars: 0,
      consts: [["tabindex", "-1", "role", "menu", 1, "mat-mdc-menu-panel", "mat-mdc-elevation-specific", 3, "keydown", "click", "id"], [1, "mat-mdc-menu-content"]],
      template: function MatMenu_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, MatMenu_ng_template_0_Template, 3, 7, "ng-template");
        }
      },
      styles: ['mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-app-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-app-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-app-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-app-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-app-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-app-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-app-surface-container));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-app-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing);margin-top:var(--mat-menu-divider-top-spacing)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:var(--mat-menu-item-leading-spacing);padding-right:var(--mat-menu-item-trailing-spacing);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px}[dir=rtl] .mat-mdc-menu-item{padding-right:var(--mat-menu-item-leading-spacing);padding-left:var(--mat-menu-item-trailing-spacing)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing);padding-right:var(--mat-menu-item-with-icon-trailing-spacing)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-right:var(--mat-menu-item-with-icon-leading-spacing);padding-left:var(--mat-menu-item-with-icon-trailing-spacing)}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-app-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:"";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing);height:var(--mat-menu-item-icon-size);width:var(--mat-menu-item-icon-size)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}'],
      encapsulation: 2,
      data: {
        animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatMenu, [{
    type: Component,
    args: [{
      selector: "mat-menu",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      exportAs: "matMenu",
      host: {
        "[attr.aria-label]": "null",
        "[attr.aria-labelledby]": "null",
        "[attr.aria-describedby]": "null"
      },
      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],
      providers: [{
        provide: MAT_MENU_PANEL,
        useExisting: MatMenu
      }],
      standalone: true,
      template: `<ng-template>
  <div
    class="mat-mdc-menu-panel mat-mdc-elevation-specific"
    [id]="panelId"
    [class]="_classList"
    (keydown)="_handleKeydown($event)"
    (click)="closed.emit('click')"
    [@transformMenu]="_panelAnimationState"
    (@transformMenu.start)="_onAnimationStart($event)"
    (@transformMenu.done)="_onAnimationDone($event)"
    tabindex="-1"
    role="menu"
    [attr.aria-label]="ariaLabel || null"
    [attr.aria-labelledby]="ariaLabelledby || null"
    [attr.aria-describedby]="ariaDescribedby || null">
    <div class="mat-mdc-menu-content">
      <ng-content></ng-content>
    </div>
  </div>
</ng-template>
`,
      styles: ['mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-app-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-app-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-app-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-app-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-app-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-app-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-app-surface-container));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-app-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing);margin-top:var(--mat-menu-divider-top-spacing)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:var(--mat-menu-item-leading-spacing);padding-right:var(--mat-menu-item-trailing-spacing);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px}[dir=rtl] .mat-mdc-menu-item{padding-right:var(--mat-menu-item-leading-spacing);padding-left:var(--mat-menu-item-trailing-spacing)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing);padding-right:var(--mat-menu-item-with-icon-trailing-spacing)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-right:var(--mat-menu-item-with-icon-leading-spacing);padding-left:var(--mat-menu-item-with-icon-trailing-spacing)}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-app-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:"";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing);height:var(--mat-menu-item-icon-size);width:var(--mat-menu-item-icon-size)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}']
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_MENU_DEFAULT_OPTIONS]
    }]
  }, {
    type: ChangeDetectorRef
  }], {
    _allItems: [{
      type: ContentChildren,
      args: [MatMenuItem, {
        descendants: true
      }]
    }],
    backdropClass: [{
      type: Input
    }],
    ariaLabel: [{
      type: Input,
      args: ["aria-label"]
    }],
    ariaLabelledby: [{
      type: Input,
      args: ["aria-labelledby"]
    }],
    ariaDescribedby: [{
      type: Input,
      args: ["aria-describedby"]
    }],
    xPosition: [{
      type: Input
    }],
    yPosition: [{
      type: Input
    }],
    templateRef: [{
      type: ViewChild,
      args: [TemplateRef]
    }],
    items: [{
      type: ContentChildren,
      args: [MatMenuItem, {
        descendants: false
      }]
    }],
    lazyContent: [{
      type: ContentChild,
      args: [MAT_MENU_CONTENT]
    }],
    overlapTrigger: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    hasBackdrop: [{
      type: Input,
      args: [{
        transform: (value) => value == null ? null : booleanAttribute(value)
      }]
    }],
    panelClass: [{
      type: Input,
      args: ["class"]
    }],
    classList: [{
      type: Input
    }],
    closed: [{
      type: Output
    }],
    close: [{
      type: Output
    }]
  });
})();
var MAT_MENU_SCROLL_STRATEGY = new InjectionToken("mat-menu-scroll-strategy", {
  providedIn: "root",
  factory: () => {
    const overlay = inject(Overlay);
    return () => overlay.scrollStrategies.reposition();
  }
});
function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {
  return () => overlay.scrollStrategies.reposition();
}
var MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {
  provide: MAT_MENU_SCROLL_STRATEGY,
  deps: [Overlay],
  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY
};
var passiveEventListenerOptions = normalizePassiveListenerOptions({
  passive: true
});
var MatMenuTrigger = class _MatMenuTrigger {
  /**
   * @deprecated
   * @breaking-change 8.0.0
   */
  get _deprecatedMatMenuTriggerFor() {
    return this.menu;
  }
  set _deprecatedMatMenuTriggerFor(v) {
    this.menu = v;
  }
  /** References the menu instance that the trigger is associated with. */
  get menu() {
    return this._menu;
  }
  set menu(menu) {
    if (menu === this._menu) {
      return;
    }
    this._menu = menu;
    this._menuCloseSubscription.unsubscribe();
    if (menu) {
      if (menu === this._parentMaterialMenu && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throwMatMenuRecursiveError();
      }
      this._menuCloseSubscription = menu.close.subscribe((reason) => {
        this._destroyMenu(reason);
        if ((reason === "click" || reason === "tab") && this._parentMaterialMenu) {
          this._parentMaterialMenu.closed.emit(reason);
        }
      });
    }
    this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());
  }
  constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, _menuItemInstance, _dir, _focusMonitor, _ngZone) {
    this._overlay = _overlay;
    this._element = _element;
    this._viewContainerRef = _viewContainerRef;
    this._menuItemInstance = _menuItemInstance;
    this._dir = _dir;
    this._focusMonitor = _focusMonitor;
    this._ngZone = _ngZone;
    this._overlayRef = null;
    this._menuOpen = false;
    this._closingActionsSubscription = Subscription.EMPTY;
    this._hoverSubscription = Subscription.EMPTY;
    this._menuCloseSubscription = Subscription.EMPTY;
    this._changeDetectorRef = inject(ChangeDetectorRef);
    this._handleTouchStart = (event) => {
      if (!isFakeTouchstartFromScreenReader(event)) {
        this._openedBy = "touch";
      }
    };
    this._openedBy = void 0;
    this.restoreFocus = true;
    this.menuOpened = new EventEmitter();
    this.onMenuOpen = this.menuOpened;
    this.menuClosed = new EventEmitter();
    this.onMenuClose = this.menuClosed;
    this._scrollStrategy = scrollStrategy;
    this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : void 0;
    _element.nativeElement.addEventListener("touchstart", this._handleTouchStart, passiveEventListenerOptions);
  }
  ngAfterContentInit() {
    this._handleHover();
  }
  ngOnDestroy() {
    if (this._overlayRef) {
      this._overlayRef.dispose();
      this._overlayRef = null;
    }
    this._element.nativeElement.removeEventListener("touchstart", this._handleTouchStart, passiveEventListenerOptions);
    this._menuCloseSubscription.unsubscribe();
    this._closingActionsSubscription.unsubscribe();
    this._hoverSubscription.unsubscribe();
  }
  /** Whether the menu is open. */
  get menuOpen() {
    return this._menuOpen;
  }
  /** The text direction of the containing app. */
  get dir() {
    return this._dir && this._dir.value === "rtl" ? "rtl" : "ltr";
  }
  /** Whether the menu triggers a sub-menu or a top-level one. */
  triggersSubmenu() {
    return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);
  }
  /** Toggles the menu between the open and closed states. */
  toggleMenu() {
    return this._menuOpen ? this.closeMenu() : this.openMenu();
  }
  /** Opens the menu. */
  openMenu() {
    const menu = this.menu;
    if (this._menuOpen || !menu) {
      return;
    }
    const overlayRef = this._createOverlay(menu);
    const overlayConfig = overlayRef.getConfig();
    const positionStrategy = overlayConfig.positionStrategy;
    this._setPosition(menu, positionStrategy);
    overlayConfig.hasBackdrop = menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;
    overlayRef.attach(this._getPortal(menu));
    if (menu.lazyContent) {
      menu.lazyContent.attach(this.menuData);
    }
    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());
    this._initMenu(menu);
    if (menu instanceof MatMenu) {
      menu._startAnimation();
      menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {
        positionStrategy.withLockedPosition(false).reapplyLastPosition();
        positionStrategy.withLockedPosition(true);
      });
    }
  }
  /** Closes the menu. */
  closeMenu() {
    this.menu?.close.emit();
  }
  /**
   * Focuses the menu trigger.
   * @param origin Source of the menu trigger's focus.
   */
  focus(origin, options) {
    if (this._focusMonitor && origin) {
      this._focusMonitor.focusVia(this._element, origin, options);
    } else {
      this._element.nativeElement.focus(options);
    }
  }
  /**
   * Updates the position of the menu to ensure that it fits all options within the viewport.
   */
  updatePosition() {
    this._overlayRef?.updatePosition();
  }
  /** Closes the menu and does the necessary cleanup. */
  _destroyMenu(reason) {
    if (!this._overlayRef || !this.menuOpen) {
      return;
    }
    const menu = this.menu;
    this._closingActionsSubscription.unsubscribe();
    this._overlayRef.detach();
    if (this.restoreFocus && (reason === "keydown" || !this._openedBy || !this.triggersSubmenu())) {
      this.focus(this._openedBy);
    }
    this._openedBy = void 0;
    if (menu instanceof MatMenu) {
      menu._resetAnimation();
      if (menu.lazyContent) {
        menu._animationDone.pipe(
          filter((event) => event.toState === "void"),
          take(1),
          // Interrupt if the content got re-attached.
          takeUntil(menu.lazyContent._attached)
        ).subscribe({
          next: () => menu.lazyContent.detach(),
          // No matter whether the content got re-attached, reset the menu.
          complete: () => this._setIsMenuOpen(false)
        });
      } else {
        this._setIsMenuOpen(false);
      }
    } else {
      this._setIsMenuOpen(false);
      menu?.lazyContent?.detach();
    }
  }
  /**
   * This method sets the menu state to open and focuses the first item if
   * the menu was opened via the keyboard.
   */
  _initMenu(menu) {
    menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : void 0;
    menu.direction = this.dir;
    this._setMenuElevation(menu);
    menu.focusFirstItem(this._openedBy || "program");
    this._setIsMenuOpen(true);
  }
  /** Updates the menu elevation based on the amount of parent menus that it has. */
  _setMenuElevation(menu) {
    if (menu.setElevation) {
      let depth = 0;
      let parentMenu = menu.parentMenu;
      while (parentMenu) {
        depth++;
        parentMenu = parentMenu.parentMenu;
      }
      menu.setElevation(depth);
    }
  }
  // set state rather than toggle to support triggers sharing a menu
  _setIsMenuOpen(isOpen) {
    if (isOpen !== this._menuOpen) {
      this._menuOpen = isOpen;
      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
      if (this.triggersSubmenu()) {
        this._menuItemInstance._setHighlighted(isOpen);
      }
      this._changeDetectorRef.markForCheck();
    }
  }
  /**
   * This method creates the overlay from the provided menu's template and saves its
   * OverlayRef so that it can be attached to the DOM when openMenu is called.
   */
  _createOverlay(menu) {
    if (!this._overlayRef) {
      const config = this._getOverlayConfig(menu);
      this._subscribeToPositions(menu, config.positionStrategy);
      this._overlayRef = this._overlay.create(config);
      this._overlayRef.keydownEvents().subscribe();
    }
    return this._overlayRef;
  }
  /**
   * This method builds the configuration object needed to create the overlay, the OverlayState.
   * @returns OverlayConfig
   */
  _getOverlayConfig(menu) {
    return new OverlayConfig({
      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn(".mat-menu-panel, .mat-mdc-menu-panel"),
      backdropClass: menu.backdropClass || "cdk-overlay-transparent-backdrop",
      panelClass: menu.overlayPanelClass,
      scrollStrategy: this._scrollStrategy(),
      direction: this._dir
    });
  }
  /**
   * Listens to changes in the position of the overlay and sets the correct classes
   * on the menu based on the new position. This ensures the animation origin is always
   * correct, even if a fallback position is used for the overlay.
   */
  _subscribeToPositions(menu, position) {
    if (menu.setPositionClasses) {
      position.positionChanges.subscribe((change) => {
        const posX = change.connectionPair.overlayX === "start" ? "after" : "before";
        const posY = change.connectionPair.overlayY === "top" ? "below" : "above";
        if (this._ngZone) {
          this._ngZone.run(() => menu.setPositionClasses(posX, posY));
        } else {
          menu.setPositionClasses(posX, posY);
        }
      });
    }
  }
  /**
   * Sets the appropriate positions on a position strategy
   * so the overlay connects with the trigger correctly.
   * @param positionStrategy Strategy whose position to update.
   */
  _setPosition(menu, positionStrategy) {
    let [originX, originFallbackX] = menu.xPosition === "before" ? ["end", "start"] : ["start", "end"];
    let [overlayY, overlayFallbackY] = menu.yPosition === "above" ? ["bottom", "top"] : ["top", "bottom"];
    let [originY, originFallbackY] = [overlayY, overlayFallbackY];
    let [overlayX, overlayFallbackX] = [originX, originFallbackX];
    let offsetY = 0;
    if (this.triggersSubmenu()) {
      overlayFallbackX = originX = menu.xPosition === "before" ? "start" : "end";
      originFallbackX = overlayX = originX === "end" ? "start" : "end";
      if (this._parentMaterialMenu) {
        if (this._parentInnerPadding == null) {
          const firstItem = this._parentMaterialMenu.items.first;
          this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;
        }
        offsetY = overlayY === "bottom" ? this._parentInnerPadding : -this._parentInnerPadding;
      }
    } else if (!menu.overlapTrigger) {
      originY = overlayY === "top" ? "bottom" : "top";
      originFallbackY = overlayFallbackY === "top" ? "bottom" : "top";
    }
    positionStrategy.withPositions([{
      originX,
      originY,
      overlayX,
      overlayY,
      offsetY
    }, {
      originX: originFallbackX,
      originY,
      overlayX: overlayFallbackX,
      overlayY,
      offsetY
    }, {
      originX,
      originY: originFallbackY,
      overlayX,
      overlayY: overlayFallbackY,
      offsetY: -offsetY
    }, {
      originX: originFallbackX,
      originY: originFallbackY,
      overlayX: overlayFallbackX,
      overlayY: overlayFallbackY,
      offsetY: -offsetY
    }]);
  }
  /** Returns a stream that emits whenever an action that should close the menu occurs. */
  _menuClosingActions() {
    const backdrop = this._overlayRef.backdropClick();
    const detachments = this._overlayRef.detachments();
    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();
    const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter((active) => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();
    return merge(backdrop, parentClose, hover, detachments);
  }
  /** Handles mouse presses on the trigger. */
  _handleMousedown(event) {
    if (!isFakeMousedownFromScreenReader(event)) {
      this._openedBy = event.button === 0 ? "mouse" : void 0;
      if (this.triggersSubmenu()) {
        event.preventDefault();
      }
    }
  }
  /** Handles key presses on the trigger. */
  _handleKeydown(event) {
    const keyCode = event.keyCode;
    if (keyCode === ENTER || keyCode === SPACE) {
      this._openedBy = "keyboard";
    }
    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === "ltr" || keyCode === LEFT_ARROW && this.dir === "rtl")) {
      this._openedBy = "keyboard";
      this.openMenu();
    }
  }
  /** Handles click events on the trigger. */
  _handleClick(event) {
    if (this.triggersSubmenu()) {
      event.stopPropagation();
      this.openMenu();
    } else {
      this.toggleMenu();
    }
  }
  /** Handles the cases where the user hovers over the trigger. */
  _handleHover() {
    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {
      return;
    }
    this._hoverSubscription = this._parentMaterialMenu._hovered().pipe(filter((active) => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {
      this._openedBy = "mouse";
      if (this.menu instanceof MatMenu && this.menu._isAnimating) {
        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());
      } else {
        this.openMenu();
      }
    });
  }
  /** Gets the portal that should be attached to the overlay. */
  _getPortal(menu) {
    if (!this._portal || this._portal.templateRef !== menu.templateRef) {
      this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);
    }
    return this._portal;
  }
  static {
    this.\u0275fac = function MatMenuTrigger_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatMenuTrigger)(\u0275\u0275directiveInject(Overlay), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(MAT_MENU_SCROLL_STRATEGY), \u0275\u0275directiveInject(MAT_MENU_PANEL, 8), \u0275\u0275directiveInject(MatMenuItem, 10), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(NgZone));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _MatMenuTrigger,
      selectors: [["", "mat-menu-trigger-for", ""], ["", "matMenuTriggerFor", ""]],
      hostAttrs: [1, "mat-mdc-menu-trigger"],
      hostVars: 3,
      hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("click", function MatMenuTrigger_click_HostBindingHandler($event) {
            return ctx._handleClick($event);
          })("mousedown", function MatMenuTrigger_mousedown_HostBindingHandler($event) {
            return ctx._handleMousedown($event);
          })("keydown", function MatMenuTrigger_keydown_HostBindingHandler($event) {
            return ctx._handleKeydown($event);
          });
        }
        if (rf & 2) {
          \u0275\u0275attribute("aria-haspopup", ctx.menu ? "menu" : null)("aria-expanded", ctx.menuOpen)("aria-controls", ctx.menuOpen ? ctx.menu.panelId : null);
        }
      },
      inputs: {
        _deprecatedMatMenuTriggerFor: [0, "mat-menu-trigger-for", "_deprecatedMatMenuTriggerFor"],
        menu: [0, "matMenuTriggerFor", "menu"],
        menuData: [0, "matMenuTriggerData", "menuData"],
        restoreFocus: [0, "matMenuTriggerRestoreFocus", "restoreFocus"]
      },
      outputs: {
        menuOpened: "menuOpened",
        onMenuOpen: "onMenuOpen",
        menuClosed: "menuClosed",
        onMenuClose: "onMenuClose"
      },
      exportAs: ["matMenuTrigger"],
      standalone: true
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatMenuTrigger, [{
    type: Directive,
    args: [{
      selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,
      host: {
        "class": "mat-mdc-menu-trigger",
        "[attr.aria-haspopup]": 'menu ? "menu" : null',
        "[attr.aria-expanded]": "menuOpen",
        "[attr.aria-controls]": "menuOpen ? menu.panelId : null",
        "(click)": "_handleClick($event)",
        "(mousedown)": "_handleMousedown($event)",
        "(keydown)": "_handleKeydown($event)"
      },
      exportAs: "matMenuTrigger",
      standalone: true
    }]
  }], () => [{
    type: Overlay
  }, {
    type: ElementRef
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_MENU_SCROLL_STRATEGY]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_MENU_PANEL]
    }, {
      type: Optional
    }]
  }, {
    type: MatMenuItem,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }]
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: FocusMonitor
  }, {
    type: NgZone
  }], {
    _deprecatedMatMenuTriggerFor: [{
      type: Input,
      args: ["mat-menu-trigger-for"]
    }],
    menu: [{
      type: Input,
      args: ["matMenuTriggerFor"]
    }],
    menuData: [{
      type: Input,
      args: ["matMenuTriggerData"]
    }],
    restoreFocus: [{
      type: Input,
      args: ["matMenuTriggerRestoreFocus"]
    }],
    menuOpened: [{
      type: Output
    }],
    onMenuOpen: [{
      type: Output
    }],
    menuClosed: [{
      type: Output
    }],
    onMenuClose: [{
      type: Output
    }]
  });
})();
var MatMenuModule = class _MatMenuModule {
  static {
    this.\u0275fac = function MatMenuModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatMenuModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _MatMenuModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],
      imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule, MatCommonModule]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatMenuModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],
      exports: [CdkScrollableModule, MatMenu, MatCommonModule, MatMenuItem, MatMenuContent, MatMenuTrigger],
      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]
    }]
  }], null, null);
})();

// src/app/admin/data-modeler1/components1/dmo-form-controls/dmo-form-controls.component.ts
function DmoFormControlsComponent_div_0_li_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 5);
    \u0275\u0275listener("click", function DmoFormControlsComponent_div_0_li_3_Template_li_click_0_listener() {
      const item_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.FormControlSelect(item_r2));
    });
    \u0275\u0275element(1, "i", 6);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275classMap(item_r2.class);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", item_r2.name, " ");
  }
}
function DmoFormControlsComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3);
    \u0275\u0275template(3, DmoFormControlsComponent_div_0_li_3_Template, 3, 3, "li", 4);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("left", ctx_r2.contextMenuPositiontest.x)("top", ctx_r2.contextMenuPositiontest.y);
    \u0275\u0275property("ngStyle", ctx_r2.style)("@enterAnimation", void 0);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngForOf", ctx_r2.formsControls);
  }
}
var DmoFormControlsComponent = class _DmoFormControlsComponent {
  constructor() {
    this.formsControls = Object.values(DMOS2).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));
    this.showContextMenuFor = null;
    this.contextMenuPosition = null;
    this.formControlSelect = new EventEmitter();
    this.contextMenuPositiontest = { x: "0px", y: "0px" };
    this.style = {};
    this.showContextMenu = false;
  }
  ngOnInit() {
  }
  FormControlSelect(type) {
    this.showContextMenu = false;
    this.formControlSelect.emit(type);
  }
  ngOnChanges() {
    if (this.contextMenuPosition) {
      this.contextMenuPositiontest.x = this.contextMenuPosition.rightClickMenuPositionX - 150 + "px";
      this.contextMenuPositiontest.y = this.contextMenuPosition.rightClickMenuPositionY - 100 + "px";
    }
  }
  static {
    this.\u0275fac = function DmoFormControlsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmoFormControlsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmoFormControlsComponent, selectors: [["app-dmo-form-controls"]], inputs: { showContextMenuFor: "showContextMenuFor", contextMenuPosition: "contextMenuPosition", showContextMenu: "showContextMenu" }, outputs: { formControlSelect: "formControlSelect" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [["class", "contextMenuContainer", 3, "ngStyle", "left", "top", 4, "ngIf"], [1, "contextMenuContainer", 3, "ngStyle"], [1, "formcomponents"], ["id", "form-controls", 1, "list-group", "drag-list"], ["class", "list-group-item list-group-item-action list-group-item-success drag-list-item", 3, "click", 4, "ngFor", "ngForOf"], [1, "list-group-item", "list-group-item-action", "list-group-item-success", "drag-list-item", 3, "click"], [2, "margin-right", "5px"]], template: function DmoFormControlsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, DmoFormControlsComponent_div_0_Template, 4, 7, "div", 0);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.showContextMenu);
      }
    }, dependencies: [
      NgIf,
      NgStyle,
      NgForOf
    ], styles: ['\n\n.contextMenuContainer[_ngcontent-%COMP%] {\n  height: calc(100vh - 600px);\n  overflow: auto;\n  display: flex;\n  position: fixed;\n  border-radius: 5px;\n  transform-origin: top left;\n  z-index: 10000;\n}\n.contextMenuContainer.visible[_ngcontent-%COMP%] {\n  transition: transform 200ms ease-in-out;\n}\n.menu-link[_ngcontent-%COMP%] {\n  cursor: pointer;\n  height: 23px;\n  background: #559000;\n  color: #fff;\n  font-size: 11px;\n  font-family: "Museo Sans", sans-serif;\n}\n.menu-link[_ngcontent-%COMP%]:hover {\n}\n.menuIcon[_ngcontent-%COMP%] {\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.form-view[_ngcontent-%COMP%] {\n  position: relative;\n}\n.leftcol[_ngcontent-%COMP%] {\n  min-height: 550px;\n  float: left;\n  padding: 0px;\n  position: sticky;\n  top: 0;\n}\n.leftlayout[_ngcontent-%COMP%] {\n  height: 30px;\n  border: 1px solid #ddd;\n  margin-left: 7px;\n  padding: 4px;\n  font-size: 13px;\n  margin-right: 7px;\n}\n.leftlayoutdmotyp[_ngcontent-%COMP%] {\n  height: 415px;\n  border: 1px solid #ddd;\n  margin-right: 5px;\n  padding: 6px;\n  font-size: 15px;\n}\n.leftlayout1[_ngcontent-%COMP%] {\n  height: 30px;\n  border-bottom: 1px solid #ddd;\n  font-size: 13px;\n}\n.formcomponents[_ngcontent-%COMP%] {\n  overflow-y: auto;\n  max-height: 358px;\n  overflow-x: hidden;\n}\ndiv.scroll-list[_ngcontent-%COMP%] {\n  overflow: auto;\n  max-height: 70vh;\n}\n.close[_ngcontent-%COMP%] {\n  color: white;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n.close[_ngcontent-%COMP%]:hover, \n.close[_ngcontent-%COMP%]:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px !important;\n  padding: 7px !important;\n  cursor: pointer;\n}\n.formarea[_ngcontent-%COMP%] {\n  visibility: visible;\n  position: relative;\n  min-height: 450px;\n  padding: 10px;\n  border: dotted 2px #e8e8e8;\n  float: right;\n}\n.col[_ngcontent-%COMP%] {\n  float: left;\n}\n.alert[_ngcontent-%COMP%] {\n  border-radius: 0;\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  text-align: center;\n  font-size: 12px;\n}\n.alert-info[_ngcontent-%COMP%] {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  margin: 10px 20px;\n}\n.dmo-columns[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 5px;\n  margin-bottom: 5px;\n}\n.dmo-columns[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  align-self: self-start;\n}\n.dmo-columns[_ngcontent-%COMP%]   .span-2[_ngcontent-%COMP%] {\n  grid-column: span 2;\n}\n.cdk-drop-list[_ngcontent-%COMP%]:not(#form-controls) {\n  border: 2px dotted #e8e8e8;\n  transform: translate3d(0, 0, 0);\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  transform: translate3d(0, 0, 0);\n}\n.drag-list-item[_ngcontent-%COMP%]:last-child {\n  border: none;\n}\n.drag-list-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  cursor: move;\n  background: white;\n  padding: 0 20px;\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drop-list-receiving[_ngcontent-%COMP%]:not(#form-controls) {\n  border: #4c9e00 dotted 2px;\n}\n.drag-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-list-item[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  min-width: 250px;\n  transform: translate3d(0, 0, 0);\n}\n.item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  position: absolute;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  display: none;\n}\n.item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n/*# sourceMappingURL=dmo-form-controls.component.css.map */'], data: { animation: [
      trigger("enterAnimation", [
        transition(":enter", [
          style({ transform: "translateY(1%)", opacity: 0 }),
          animate("200ms", style({ transform: "translateY(0)", opacity: 1 }))
        ]),
        transition(":leave", [
          style({ transform: "translateY(0)", opacity: 1 }),
          animate("200ms", style({ transform: "translateY(1%)", opacity: 0 }))
        ])
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmoFormControlsComponent, { className: "DmoFormControlsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmo-form-controls\\dmo-form-controls.component.ts", lineNumber: 30 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/dmog-container/dmog-container.component.ts
var _c08 = ["parentResizeDir"];
var _c15 = ["childResizeDir"];
var _c24 = ["*"];
var _c32 = (a0) => ({ "width": true, "word-break": true, "margtop": a0, "margbottom": true });
var _c4 = (a0) => ({ "width": true, "word-break": true, "margtop": a0 });
function DmogContainerComponent_span_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275element(1, "i", 18);
    \u0275\u0275elementEnd();
  }
}
function DmogContainerComponent_div_8_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 26);
    \u0275\u0275element(3, "path", 27)(4, "path", 28)(5, "path", 29)(6, "path", 30)(7, "path", 31)(8, "path", 32);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "div", 33)(10, "div", 34);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_1_Template_div_click_10_listener($event) {
      \u0275\u0275restoreView(_r7);
      const r_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddRowAfter($event, r_r5, "above"));
    })("keydown", function DmogContainerComponent_div_8_div_1_Template_div_keydown_10_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(11, "svg", 35);
    \u0275\u0275element(12, "path", 36)(13, "path", 37);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(14, "div", 38);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_1_Template_div_click_14_listener($event) {
      \u0275\u0275restoreView(_r7);
      const r_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddRowAfter($event, r_r5, "below"));
    })("keydown", function DmogContainerComponent_div_8_div_1_Template_div_keydown_14_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(15, "svg", 35);
    \u0275\u0275element(16, "path", 36)(17, "path", 39);
    \u0275\u0275elementEnd()()()()();
  }
}
function DmogContainerComponent_div_8_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 40);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_2_Template_div_click_0_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r8 = \u0275\u0275nextContext();
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.rowSetting($event, r_r5, ctx_r2.data.id + "_row_" + rowIndex_r6, { "type": "parentRow", r: r_r5, rowIndex: rowIndex_r6 }));
    })("keydown", function DmogContainerComponent_div_8_div_2_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275text(1, "\xA0");
    \u0275\u0275elementEnd();
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_2_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 50);
    \u0275\u0275listener("drop", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_1_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r16);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("dragenter", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_1_Template_div_dragenter_0_listener($event) {
      \u0275\u0275restoreView(_r16);
      const ctx_r16 = \u0275\u0275nextContext(2);
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragEnter($event, { "type": "column", r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }, ctx_r2.data.id + "_parent_column_" + rowIndex_r6 + "_" + colIndex_r14));
    })("dragleave", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_1_Template_div_dragleave_0_listener($event) {
      \u0275\u0275restoreView(_r16);
      const ctx_r16 = \u0275\u0275nextContext(2);
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragLeave($event, { "type": "column", r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }, ctx_r2.data.id + "_parent_column_" + rowIndex_r6 + "_" + colIndex_r14));
    })("dragover", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_1_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r16);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 51);
    \u0275\u0275element(2, "path", 52);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const colIndex_r14 = \u0275\u0275nextContext(2).index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate3("id", "", ctx_r2.data.id, "_column_", rowIndex_r6, "_", colIndex_r14, "");
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 53);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_div_click_0_listener($event) {
      const rdmg_r19 = \u0275\u0275restoreView(_r18).$implicit;
      const ctx_r16 = \u0275\u0275nextContext(2);
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.removeOrphanedDmos(c_r13.dmoguid) ? ctx_r2.showContextMenu($event, { "type": "column", "dmoguid": rdmg_r19, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }, rdmg_r19 + "_column_" + rowIndex_r6 + "_" + colIndex_r14) : null);
    })("dragenter", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_div_dragenter_0_listener($event) {
      const rdmg_r19 = \u0275\u0275restoreView(_r18).$implicit;
      const ctx_r16 = \u0275\u0275nextContext(2);
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragEnter($event, { "type": "column", "dmoguid": rdmg_r19, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }));
    })("dragleave", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_div_dragleave_0_listener($event) {
      const rdmg_r19 = \u0275\u0275restoreView(_r18).$implicit;
      const ctx_r16 = \u0275\u0275nextContext(2);
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragLeave($event, { "type": "column", "dmoguid": rdmg_r19, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r18);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275elementStart(1, "app-dmo", 54);
    \u0275\u0275listener("dragover", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_app_dmo_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r18);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("dragstart", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_app_dmo_dragstart_1_listener($event) {
      const rdmg_r19 = \u0275\u0275restoreView(_r18).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.dragdmo($event, rdmg_r19, ctx_r2.data.id));
    })("dragend", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_app_dmo_dragend_1_listener($event) {
      const rdmg_r19 = \u0275\u0275restoreView(_r18).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onInnerDragEnded($event, rdmg_r19));
    })("mouseenter", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_app_dmo_mouseenter_1_listener($event) {
      const rdmg_r19 = \u0275\u0275restoreView(_r18).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onMouseEnterInnerDragEnded($event, rdmg_r19));
    })("mouseleave", function DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template_app_dmo_mouseleave_1_listener($event) {
      const rdmg_r19 = \u0275\u0275restoreView(_r18).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onMouseLeaveInnerDragEnded($event, rdmg_r19));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const rdmg_r19 = ctx.$implicit;
    const ctx_r16 = \u0275\u0275nextContext(2);
    const c_r13 = ctx_r16.$implicit;
    const colIndex_r14 = ctx_r16.index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275classProp("active-container", ctx_r2.isCurrentActive(rdmg_r19 + "_column_" + rowIndex_r6 + "_" + colIndex_r14));
    \u0275\u0275propertyInterpolate3("id", "", rdmg_r19, "_column_", rowIndex_r6, "_", colIndex_r14, "");
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(11, _c32, (c_r13.dmoguid == null ? null : c_r13.dmoguid.length) > 1));
    \u0275\u0275advance();
    \u0275\u0275property("containerStyle", ctx_r2.containerStyle)("dmo", ctx_r2.getCurrentDMO(rdmg_r19));
    \u0275\u0275attribute("data-dmo", true)("data-dmoguid", rdmg_r19);
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275listener("dragover", function DmogContainerComponent_div_8_div_3_div_2_div_2_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r15);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("drop", function DmogContainerComponent_div_8_div_3_div_2_div_2_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r15);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    });
    \u0275\u0275template(1, DmogContainerComponent_div_8_div_3_div_2_div_2_div_1_Template, 3, 4, "div", 48)(2, DmogContainerComponent_div_8_div_3_div_2_div_2_div_2_Template, 2, 13, "div", 49);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r16 = \u0275\u0275nextContext();
    const c_r13 = ctx_r16.$implicit;
    const colIndex_r14 = ctx_r16.index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate3("id", "", ctx_r2.data.id, "_column_", rowIndex_r6, "_", colIndex_r14, "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.removeOrphanedDmos(c_r13.dmoguid));
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.filterDmoguidList(c_r13.dmoguid));
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 60);
    \u0275\u0275listener("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    })("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_click_0_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r24 = \u0275\u0275nextContext(2);
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "NestedcolumnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23 }, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "+" + colRowIndex_r23));
    });
    \u0275\u0275text(1, " \xA0 ");
    \u0275\u0275elementStart(2, "div", 61)(3, "div", 62);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_click_3_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r8 = \u0275\u0275nextContext(5);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "parentRow", r: r_r5, rowIndex: rowIndex_r6 }, ctx_r2.data.id + "_row_" + rowIndex_r6));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_keydown_3_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275text(4, "Row");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 63);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_click_5_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r16 = \u0275\u0275nextContext(3);
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "column", "dmoguid": ctx_r2.rdmg, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }, ctx_r2.data.id + "_parent_column_" + rowIndex_r6 + "_" + colIndex_r14));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_keydown_5_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275text(6, " Column");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "div", 62);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_click_7_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r24 = \u0275\u0275nextContext(2);
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "NestedcolumnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23 }, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template_div_keydown_7_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275text(8, "Inner Row");
    \u0275\u0275elementEnd()()();
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 58);
    \u0275\u0275listener("mouseenter", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_Template_div_mouseenter_0_listener($event) {
      \u0275\u0275restoreView(_r24);
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const colIndex_r14 = \u0275\u0275nextContext().index;
      const rowIndex_r6 = \u0275\u0275nextContext(2).index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(cr_r22.columns && cr_r22.columns.length == 0 ? ctx_r2.showChildContextMenu($event, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23, "mouseenter") : null);
    })("mouseleave", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_Template_div_mouseleave_0_listener($event) {
      \u0275\u0275restoreView(_r24);
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const colIndex_r14 = \u0275\u0275nextContext().index;
      const rowIndex_r6 = \u0275\u0275nextContext(2).index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(cr_r22.columns && cr_r22.columns.length == 0 ? ctx_r2.showChildContextMenu($event, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23, "mouseleave") : null);
    });
    \u0275\u0275template(1, DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_div_1_Template, 9, 0, "div", 59);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cr_r22 = \u0275\u0275nextContext().$implicit;
    const ctx_r2 = \u0275\u0275nextContext(4);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cr_r22.columns && cr_r22.columns.length == 0 && !ctx_r2.readonly);
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r31 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 67);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 26);
    \u0275\u0275element(3, "path", 27)(4, "path", 28)(5, "path", 29)(6, "path", 30)(7, "path", 31)(8, "path", 32);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "div", 68)(10, "div", 34);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_click_10_listener($event) {
      \u0275\u0275restoreView(_r31);
      const r_r5 = \u0275\u0275nextContext(5).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddRowAfter($event, r_r5, "above"));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_keydown_10_listener($event) {
      \u0275\u0275restoreView(_r31);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(11, "svg", 35);
    \u0275\u0275element(12, "path", 36)(13, "path", 37);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(14, "div", 38);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_click_14_listener($event) {
      \u0275\u0275restoreView(_r31);
      const r_r5 = \u0275\u0275nextContext(5).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddRowAfter($event, r_r5, "below"));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_keydown_14_listener($event) {
      \u0275\u0275restoreView(_r31);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(15, "svg", 35);
    \u0275\u0275element(16, "path", 36)(17, "path", 39);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(18, "div", 69);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_click_18_listener($event) {
      \u0275\u0275restoreView(_r31);
      const ctx_r24 = \u0275\u0275nextContext(2);
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const c_r13 = \u0275\u0275nextContext().$implicit;
      const r_r5 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddInnerRowAfter($event, r_r5, c_r13, cr_r22, "above", colRowIndex_r23));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_keydown_18_listener($event) {
      \u0275\u0275restoreView(_r31);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(19, "svg", 35);
    \u0275\u0275element(20, "path", 36)(21, "path", 70);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(22, "div", 71);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_click_22_listener($event) {
      \u0275\u0275restoreView(_r31);
      const ctx_r24 = \u0275\u0275nextContext(2);
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const c_r13 = \u0275\u0275nextContext().$implicit;
      const r_r5 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddInnerRowAfter($event, r_r5, c_r13, cr_r22, "below", colRowIndex_r23));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template_div_keydown_22_listener($event) {
      \u0275\u0275restoreView(_r31);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(23, "svg", 35);
    \u0275\u0275element(24, "path", 36)(25, "path", 72);
    \u0275\u0275elementEnd()()()()();
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r32 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 60);
    \u0275\u0275listener("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    })("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_click_0_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r24 = \u0275\u0275nextContext(2);
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "NestedcolumnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23 }, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "+" + colRowIndex_r23));
    });
    \u0275\u0275text(1, " \xA0 ");
    \u0275\u0275elementStart(2, "div", 61)(3, "div", 73);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_click_3_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r8 = \u0275\u0275nextContext(5);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "parentRow", r: r_r5, rowIndex: rowIndex_r6 }, ctx_r2.data.id + "_row_" + rowIndex_r6));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_keydown_3_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275text(4, "Row ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 63);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_click_5_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r16 = \u0275\u0275nextContext(3);
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "column", "dmoguid": ctx_r2.rdmg, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }, ctx_r2.data.id + "_parent_column_" + rowIndex_r6 + "_" + colIndex_r14));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_keydown_5_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275text(6, "Column ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "div", 73);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_click_7_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r24 = \u0275\u0275nextContext(2);
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "NestedcolumnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23 }, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template_div_keydown_7_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275text(8, "Inner Row ");
    \u0275\u0275elementEnd()()();
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r33 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 74);
    \u0275\u0275listener("drop", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_3_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r33);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("dragover", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_3_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r33);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("dragenter", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_3_Template_div_dragenter_0_listener($event) {
      \u0275\u0275restoreView(_r33);
      const colRowcolumnIndex_r30 = \u0275\u0275nextContext().index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragEnter($event, { "type": "columnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23, colRowcolumnIndex: colRowcolumnIndex_r30 }, ctx_r2.data.id + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30));
    })("dragleave", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_3_Template_div_dragleave_0_listener($event) {
      \u0275\u0275restoreView(_r33);
      const colRowcolumnIndex_r30 = \u0275\u0275nextContext().index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragLeave($event, { "type": "columnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23, colRowcolumnIndex: colRowcolumnIndex_r30 }, ctx_r2.data.id + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 51);
    \u0275\u0275element(2, "path", 52);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const colRowcolumnIndex_r30 = \u0275\u0275nextContext().index;
    const colRowIndex_r23 = \u0275\u0275nextContext().index;
    const colIndex_r14 = \u0275\u0275nextContext().index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate5("id", "", ctx_r2.data.id, "_columnRow_", rowIndex_r6, "_", colIndex_r14, "_", colRowIndex_r23, "_", colRowcolumnIndex_r30, "");
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r34 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 75);
    \u0275\u0275listener("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r34);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    })("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_div_click_0_listener($event) {
      const rdmgs_r35 = \u0275\u0275restoreView(_r34).$implicit;
      const ctx_r35 = \u0275\u0275nextContext();
      const rcr_r29 = ctx_r35.$implicit;
      const colRowcolumnIndex_r30 = ctx_r35.index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.removeOrphanedDmos(rcr_r29.dmoguid) ? ctx_r2.showContextMenu($event, { "type": "columnRow", "dmoguid": rdmgs_r35, cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23, colRowcolumnIndex: colRowcolumnIndex_r30 }, rdmgs_r35 + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30) : null);
    })("dragenter", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_div_dragenter_0_listener($event) {
      const rdmgs_r35 = \u0275\u0275restoreView(_r34).$implicit;
      const colRowcolumnIndex_r30 = \u0275\u0275nextContext().index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragEnter($event, { "type": "columnRow", "dmoguid": rdmgs_r35, cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23, colRowcolumnIndex: colRowcolumnIndex_r30 }, ctx_r2.data.id + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30));
    })("dragleave", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_div_dragleave_0_listener($event) {
      const rdmgs_r35 = \u0275\u0275restoreView(_r34).$implicit;
      const colRowcolumnIndex_r30 = \u0275\u0275nextContext().index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onDragLeave($event, { "type": "columnRow", "dmoguid": rdmgs_r35, cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23, colRowcolumnIndex: colRowcolumnIndex_r30 }, ctx_r2.data.id + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30));
    });
    \u0275\u0275elementStart(1, "app-dmo", 54);
    \u0275\u0275listener("dragover", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_app_dmo_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r34);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("dragstart", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_app_dmo_dragstart_1_listener($event) {
      const rdmgs_r35 = \u0275\u0275restoreView(_r34).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.dragdmo($event, rdmgs_r35, ctx_r2.data.id));
    })("dragend", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_app_dmo_dragend_1_listener($event) {
      \u0275\u0275restoreView(_r34);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onInnerDragEnded($event, ctx_r2.rdmg));
    })("mouseenter", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_app_dmo_mouseenter_1_listener($event) {
      \u0275\u0275restoreView(_r34);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onMouseEnterInnerDragEnded($event, ctx_r2.rdmg));
    })("mouseleave", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template_app_dmo_mouseleave_1_listener($event) {
      \u0275\u0275restoreView(_r34);
      const ctx_r2 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r2.onMouseLeaveInnerDragEnded($event, ctx_r2.rdmg));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const rdmgs_r35 = ctx.$implicit;
    const ctx_r35 = \u0275\u0275nextContext();
    const rcr_r29 = ctx_r35.$implicit;
    const colRowcolumnIndex_r30 = ctx_r35.index;
    const colRowIndex_r23 = \u0275\u0275nextContext().index;
    const colIndex_r14 = \u0275\u0275nextContext().index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275classProp("active-container", ctx_r2.isCurrentActive(rdmgs_r35 + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30));
    \u0275\u0275propertyInterpolate5("id", "", rdmgs_r35, "_columnRow_", rowIndex_r6, "_", colIndex_r14, "_", colRowIndex_r23, "_", colRowcolumnIndex_r30, "");
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(12, _c4, (rcr_r29.dmoguid == null ? null : rcr_r29.dmoguid.length) > 1));
    \u0275\u0275advance();
    \u0275\u0275property("containerStyle", ctx_r2.containerStyle)("dmo", ctx_r2.getCurrentDMO(rdmgs_r35));
    \u0275\u0275attribute("data-dmoguid", rdmgs_r35);
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 64);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template_div_click_0_listener($event) {
      const ctx_r27 = \u0275\u0275restoreView(_r27);
      const rcr_r29 = ctx_r27.$implicit;
      const colRowcolumnIndex_r30 = ctx_r27.index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r22 = ctx_r24.$implicit;
      const colRowIndex_r23 = ctx_r24.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(rcr_r29.dmoguid == null || rcr_r29.dmoguid.length < 2 ? ctx_r2.showContextMenu($event, { "type": "columnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23, colRowcolumnIndex: colRowcolumnIndex_r30 }, ctx_r2.data.id + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30) : null);
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r27);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    })("drop", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r27);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("dragover", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r27);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("mouseenter", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template_div_mouseenter_0_listener($event) {
      \u0275\u0275restoreView(_r27);
      const colRowIndex_r23 = \u0275\u0275nextContext().index;
      const colIndex_r14 = \u0275\u0275nextContext().index;
      const rowIndex_r6 = \u0275\u0275nextContext(2).index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showChildContextMenu($event, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23, "mouseenter"));
    })("mouseleave", function DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template_div_mouseleave_0_listener($event) {
      \u0275\u0275restoreView(_r27);
      const colRowIndex_r23 = \u0275\u0275nextContext().index;
      const colIndex_r14 = \u0275\u0275nextContext().index;
      const rowIndex_r6 = \u0275\u0275nextContext(2).index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showChildContextMenu($event, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23, "mouseleave"));
    });
    \u0275\u0275template(1, DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_1_Template, 26, 0, "div", 20)(2, DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_2_Template, 9, 0, "div", 59)(3, DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_3_Template, 3, 6, "div", 65)(4, DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_div_4_Template, 2, 14, "div", 66);
    \u0275\u0275element(5, "div", 44);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const rcr_r29 = ctx.$implicit;
    const colRowcolumnIndex_r30 = ctx.index;
    const ctx_r24 = \u0275\u0275nextContext();
    const cr_r22 = ctx_r24.$implicit;
    const colRowIndex_r23 = ctx_r24.index;
    const colIndex_r14 = \u0275\u0275nextContext().index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate5("id", "", ctx_r2.data.id, "_columnRow_", rowIndex_r6, "_", colIndex_r14, "_", colRowIndex_r23, "_", colRowcolumnIndex_r30, "");
    \u0275\u0275property("ngStyle", ctx_r2.styleChildObject(rcr_r29))("ngClass", ctx_r2.isCurrentActive(ctx_r2.data.id + "_columnRow_" + rowIndex_r6 + "_" + colIndex_r14 + "_" + colRowIndex_r23 + "_" + colRowcolumnIndex_r30));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cr_r22.columns.length > 0 && colRowcolumnIndex_r30 === cr_r22.columns.length - 1 && !ctx_r2.readonly);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.readonly && colRowcolumnIndex_r30 === 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.removeOrphanedDmos(rcr_r29.dmoguid));
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.filterDmoguidList(rcr_r29.dmoguid));
  }
}
function DmogContainerComponent_div_8_div_3_div_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 55, 3);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_div_3_Template_div_click_0_listener($event) {
      const ctx_r20 = \u0275\u0275restoreView(_r20);
      const cr_r22 = ctx_r20.$implicit;
      const colRowIndex_r23 = ctx_r20.index;
      const ctx_r16 = \u0275\u0275nextContext();
      const c_r13 = ctx_r16.$implicit;
      const colIndex_r14 = ctx_r16.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "NestedcolumnRow", cr: cr_r22, r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14, colRowIndex: colRowIndex_r23 }, ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "+" + colRowIndex_r23));
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_div_3_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r20);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    })("onResize", function DmogContainerComponent_div_8_div_3_div_2_div_3_Template_div_onResize_0_listener($event) {
      \u0275\u0275restoreView(_r20);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.resizeColumnNew($event.columns, $event.rowIndex));
    });
    \u0275\u0275template(2, DmogContainerComponent_div_8_div_3_div_2_div_3_div_2_Template, 2, 1, "div", 56)(3, DmogContainerComponent_div_8_div_3_div_2_div_3_div_3_Template, 6, 12, "div", 57);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cr_r22 = ctx.$implicit;
    const colRowIndex_r23 = ctx.index;
    const ctx_r16 = \u0275\u0275nextContext();
    const c_r13 = ctx_r16.$implicit;
    const colIndex_r14 = ctx_r16.index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate4("id", "", ctx_r2.data.id, "_column_", rowIndex_r6, "_", colIndex_r14, "_", colRowIndex_r23, "");
    \u0275\u0275property("ngClass", ctx_r2.isCurrentActive(ctx_r2.data.id + "_column_" + rowIndex_r6 + "_" + colIndex_r14 + "+" + colRowIndex_r23))("rows", c_r13.rows)("rowIndex", colRowIndex_r23);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", cr_r22.columns && cr_r22.columns.length == 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", cr_r22.columns);
  }
}
function DmogContainerComponent_div_8_div_3_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 43);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_div_2_Template_div_click_0_listener($event) {
      const ctx_r11 = \u0275\u0275restoreView(_r11);
      const c_r13 = ctx_r11.$implicit;
      const colIndex_r14 = ctx_r11.index;
      const ctx_r8 = \u0275\u0275nextContext(2);
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(c_r13.dmoguid == null || c_r13.dmoguid.length < 2 ? ctx_r2.showContextMenu($event, { "type": "column", r: r_r5, c: c_r13, rowIndex: rowIndex_r6, colIndex: colIndex_r14 }, ctx_r2.data.id + "_parent_column_" + rowIndex_r6 + "_" + colIndex_r14) : null);
    })("keydown", function DmogContainerComponent_div_8_div_3_div_2_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r11);
      const ctx_r2 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275element(1, "div", 44);
    \u0275\u0275template(2, DmogContainerComponent_div_8_div_3_div_2_div_2_Template, 3, 6, "div", 45)(3, DmogContainerComponent_div_8_div_3_div_2_div_3_Template, 4, 10, "div", 46);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const c_r13 = ctx.$implicit;
    const colIndex_r14 = ctx.index;
    const rowIndex_r6 = \u0275\u0275nextContext(2).index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate("id", ctx_r2.data.id + "_parent_column_" + rowIndex_r6 + "_" + colIndex_r14);
    \u0275\u0275property("ngClass", ctx_r2.isCurrentActive(ctx_r2.data.id + "_parent_column_" + rowIndex_r6 + "_" + colIndex_r14))("ngStyle", ctx_r2.styleObject(c_r13));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", (c_r13.rows == null ? null : c_r13.rows.length) == 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", c_r13.rows);
  }
}
function DmogContainerComponent_div_8_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41, 2);
    \u0275\u0275listener("click", function DmogContainerComponent_div_8_div_3_Template_div_click_0_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r8 = \u0275\u0275nextContext();
      const r_r5 = ctx_r8.$implicit;
      const rowIndex_r6 = ctx_r8.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.rowSetting($event, r_r5, ctx_r2.data.id + "_row_" + rowIndex_r6, { "type": "parentRow", r: r_r5, rowIndex: rowIndex_r6 }));
    })("keydown", function DmogContainerComponent_div_8_div_3_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    })("onResize", function DmogContainerComponent_div_8_div_3_Template_div_onResize_0_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.resizeColumnNew($event.columns, $event.rowIndex));
    });
    \u0275\u0275template(2, DmogContainerComponent_div_8_div_3_div_2_Template, 4, 5, "div", 42);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r8 = \u0275\u0275nextContext();
    const r_r5 = ctx_r8.$implicit;
    const rowIndex_r6 = ctx_r8.index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate2("id", "", ctx_r2.data.id, "_row_", rowIndex_r6, "");
    \u0275\u0275property("ngClass", r_r5.columns.length > 0 ? "" : "empty-row")("ngClass", ctx_r2.isCurrentActive(ctx_r2.data.id + "_row_" + rowIndex_r6))("columnResizeEnabled", !(ctx_r2.childResizeDir == null ? null : ctx_r2.childResizeDir.isResizing))("rows", ctx_r2.rows)("rowIndex", rowIndex_r6);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", r_r5.columns);
  }
}
function DmogContainerComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 19);
    \u0275\u0275listener("drop", function DmogContainerComponent_div_8_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("click", function DmogContainerComponent_div_8_Template_div_click_0_listener($event) {
      const ctx_r3 = \u0275\u0275restoreView(_r2);
      const r_r5 = ctx_r3.$implicit;
      const rowIndex_r6 = ctx_r3.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "parentRow", r: r_r5, rowIndex: rowIndex_r6 }, ctx_r2.data.id + "_row_" + rowIndex_r6));
    })("keydown", function DmogContainerComponent_div_8_Template_div_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onKeyDown($event));
    });
    \u0275\u0275template(1, DmogContainerComponent_div_8_div_1_Template, 18, 0, "div", 20)(2, DmogContainerComponent_div_8_div_2_Template, 2, 0, "div", 21)(3, DmogContainerComponent_div_8_div_3_Template, 3, 9, "div", 22);
    \u0275\u0275element(4, "i", 23);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const r_r5 = ctx.$implicit;
    const rowIndex_r6 = ctx.index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate("id", r_r5.columns.length > 0 ? "" : ctx_r2.data.id + "_row_" + rowIndex_r6);
    \u0275\u0275property("ngClass", r_r5.columns.length > 0 && ctx_r2.ShowParentRowHover(r_r5) ? "NoRemoveHover row-hover-item-div main-row-div border-hide" : r_r5.columns.length < 1 && ctx_r2.isCurrentActive(ctx_r2.data.id + "_row_" + rowIndex_r6) ? "active-container" : "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", r_r5.columns.length > 0 && ctx_r2.ShowParentRowHover(r_r5) && !ctx_r2.readonly);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", r_r5.columns.length > 0 && ctx_r2.ShowParentRowHover(r_r5) && !ctx_r2.readonly);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", r_r5.columns.length > 0);
  }
}
function DmogContainerComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r37 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 76)(1, "button", 77);
    \u0275\u0275listener("click", function DmogContainerComponent_div_10_Template_button_click_1_listener($event) {
      \u0275\u0275restoreView(_r37);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.addNewRow($event));
    });
    \u0275\u0275text(2, "+ Add Row");
    \u0275\u0275elementEnd()();
  }
}
function DmogContainerComponent_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r38 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 76)(1, "button", 77);
    \u0275\u0275listener("click", function DmogContainerComponent_div_11_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r38);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.AddDmogInGroup());
    });
    \u0275\u0275text(2, "+ Add Card");
    \u0275\u0275elementEnd()();
  }
}
function DmogContainerComponent_ng_template_12_ng_container_0_a_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r41 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 82);
    \u0275\u0275listener("click", function DmogContainerComponent_ng_template_12_ng_container_0_a_5_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r41);
      const item_r40 = \u0275\u0275nextContext(2).item;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.GetSelectMenu(item_r40.rowIndex, item_r40.colIndex));
    });
    \u0275\u0275element(1, "i", 83);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(3);
    \u0275\u0275property("matMenuTriggerFor", ctx_r2.menu);
  }
}
function DmogContainerComponent_ng_template_12_ng_container_0_a_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r42 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 84);
    \u0275\u0275listener("click", function DmogContainerComponent_ng_template_12_ng_container_0_a_6_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r42);
      const item_r40 = \u0275\u0275nextContext(2).item;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onRemoveColumn(item_r40.rowIndex, item_r40.colIndex));
    });
    \u0275\u0275element(1, "i", 85);
    \u0275\u0275elementEnd();
  }
}
function DmogContainerComponent_ng_template_12_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r39 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 78)(2, "a", 79);
    \u0275\u0275listener("click", function DmogContainerComponent_ng_template_12_ng_container_0_Template_a_click_2_listener() {
      \u0275\u0275restoreView(_r39);
      const item_r40 = \u0275\u0275nextContext().item;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddRowInColumn(item_r40));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 51);
    \u0275\u0275element(4, "path", 52);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(5, DmogContainerComponent_ng_template_12_ng_container_0_a_5_Template, 2, 1, "a", 80)(6, DmogContainerComponent_ng_template_12_ng_container_0_a_6_Template, 2, 0, "a", 81);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const item_r40 = \u0275\u0275nextContext().item;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275classProp("active", ctx_r2.hoveredRowIndex === item_r40.rowIndex && ctx_r2.hoveredColumnIndex === item_r40.colIndex);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", item_r40.current.rows.length == 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r40.current.rows.length == 0);
  }
}
function DmogContainerComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DmogContainerComponent_ng_template_12_ng_container_0_Template, 7, 4, "ng-container", 9);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("ngIf", !ctx_r2.readonly);
  }
}
function DmogContainerComponent_div_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r43 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 86)(1, "a", 87);
    \u0275\u0275listener("click", function DmogContainerComponent_div_14_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r43);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onTabRemove(ctx_r2));
    });
    \u0275\u0275element(2, "i", 88);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 87);
    \u0275\u0275listener("click", function DmogContainerComponent_div_14_Template_a_click_3_listener($event) {
      \u0275\u0275restoreView(_r43);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.ShowDmogSettings($event));
    });
    \u0275\u0275element(4, "i", 89);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "a", 87);
    \u0275\u0275listener("click", function DmogContainerComponent_div_14_Template_a_click_5_listener() {
      \u0275\u0275restoreView(_r43);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onEditDMOGRemove(ctx_r2));
    });
    \u0275\u0275element(6, "i", 90);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngbTooltip", ctx_r2.data.Type === "CardGroup" ? "Delete Card Group" : "Unshare Card");
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", ctx_r2.data.Type === "CardGroup" ? "far fa-trash-alt" : "fas fa-unlink");
    \u0275\u0275advance();
    \u0275\u0275property("ngbTooltip", ctx_r2.data.Type === "CardGroup" ? "Card Group Settings" : "Card Settings");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngbTooltip", ctx_r2.data.Type === "CardGroup" ? "Edit Card Group" : "Edit Card");
  }
}
function DmogContainerComponent_div_15_a_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r45 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 87);
    \u0275\u0275listener("click", function DmogContainerComponent_div_15_a_1_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r45);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onTabRemove(ctx_r2));
    });
    \u0275\u0275element(1, "i", 93);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngbTooltip", ctx_r2.data.Type === "CardGroup" ? "Delete Card Group" : "Delete Card");
  }
}
function DmogContainerComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r44 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 91);
    \u0275\u0275template(1, DmogContainerComponent_div_15_a_1_Template, 2, 1, "a", 92);
    \u0275\u0275elementStart(2, "a", 87);
    \u0275\u0275listener("click", function DmogContainerComponent_div_15_Template_a_click_2_listener($event) {
      \u0275\u0275restoreView(_r44);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.ShowDmogSettings($event));
    });
    \u0275\u0275element(3, "i", 89);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "a", 87);
    \u0275\u0275listener("click", function DmogContainerComponent_div_15_Template_a_click_4_listener() {
      \u0275\u0275restoreView(_r44);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onEditDMOGRemove(ctx_r2));
    });
    \u0275\u0275element(5, "i", 90);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.hasChildren);
    \u0275\u0275advance();
    \u0275\u0275property("ngbTooltip", ctx_r2.data.Type === "CardGroup" ? "Card Group Settings" : "Card Settings");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngbTooltip", ctx_r2.data.Type === "CardGroup" ? "Edit Card Group" : "Edit Card");
  }
}
function DmogContainerComponent_ng_template_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 94);
  }
}
var DmogContainerComponent = class _DmogContainerComponent {
  onBlur() {
    return;
  }
  onKeyDown($event) {
    return;
  }
  onFocus() {
    return;
  }
  constructor(dmApi, apiService, msg, toast, dataProvider, cdref, elementRef, matdialog, modalService) {
    this.dmApi = dmApi;
    this.apiService = apiService;
    this.msg = msg;
    this.toast = toast;
    this.dataProvider = dataProvider;
    this.cdref = cdref;
    this.elementRef = elementRef;
    this.matdialog = matdialog;
    this.modalService = modalService;
    this.baseUrl = `${environment.Setting.BaseAPIUrl}/modeler`;
    this.destroy$ = new Subject();
    this.availableDmoToShare = [];
    this.isImActive = false;
    this.initialCheckDone = false;
    this.isInnerDragging = false;
    this.hasChildren = false;
    this.previousHoveredIds = [];
    this.isDmoExist = false;
    this.active = false;
    this.hasInvalidForm = false;
    this.left = 0;
    this.top = 0;
    this.readonly = false;
    this.rows = [];
    this.dmo = { display: false };
    this.DraggingItemsModel = new EventEmitter();
    this.openclonePopup = new EventEmitter();
    this.tabRemove = new EventEmitter();
    this.tabEdit = new EventEmitter();
    this.OnAddDmogAbove = new EventEmitter();
    this.OnAddDmogInGroup = new EventEmitter();
    this.OnBMOSave = new EventEmitter();
    this.sideNavModel = new EventEmitter();
    this.onDmoEdit = new EventEmitter();
    this.onDmoDelete = new EventEmitter();
    this.openConditionPopup = new EventEmitter();
    this.reloadParent = new EventEmitter();
    this.dragDmoToAnotherdmog = new EventEmitter();
    this.dropDmoToAnotherdmog = new EventEmitter();
    this.SelectdItem = new EventEmitter();
    this.contextMenuPosition = null;
    this.contextMenuFormPosition = null;
    this.contextMenuData = null;
    this.cdkDragDisabled = false;
    this.showFormContextMenu = false;
    this.showSharedmoContextMenu = false;
    this.IsJsonStaticGridDmo = false;
    this.formsControls = Object.values(DMOS2).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));
    this.style = {};
    this.headerStyle = {};
    this.dataProvider.getHideContextMenu().subscribe((result) => {
      if (result.dmogId && result.dmogId != this.data.DMOGID) {
        if (this.refContextMenuComponent)
          this.refContextMenuComponent.showContextMenu = false;
      }
      this.resetDivColour();
    });
    this.dataProvider.getDmoStates().pipe(takeUntil(this.destroy$)).subscribe((result) => {
      this.updatePropBaseOfDMO(this.contextMenuData, result);
    });
    this.dataProvider.getUpdateDmogSettings().subscribe((result) => {
      if (result.DMOGID == this.data.DMOGID) {
        this.panelMainContainer = JSON.parse(result.DMOGProps);
        if (this.panelMainContainer) {
          this.rows = this.panelMainContainer.rows;
          this.sideNavModel.emit(null);
        }
      }
    });
    this.dataProvider.getDeleteDmo().subscribe((result) => {
      if (result.dmogId == this.data.GUID) {
        this.removeDmoToOthers(result.dmoguid);
        this.saveProps();
      }
    });
    this.dataProvider.getUpdateDmogStyleSettings().subscribe((result) => {
      if (result.DMOGID == this.data.DMOGID) {
        var tempjson = JSON.parse(result.DMOGProps);
        if (tempjson) {
          this.containerStyle = tempjson.style;
        }
        this.updateWidth();
      }
    });
    this.dataProvider.getMoveDmo().subscribe((result) => {
      if (result.dmogId == this.data.DMOGID) {
        let findActual = this.inputAllselectedBMO[this.data.GUID];
        if (findActual) {
          this.panelMainContainer = JSON.parse(findActual.DMOGProps);
          if (this.panelMainContainer) {
            this.rows = this.panelMainContainer.rows;
          }
        }
        this.removeDmoToOthers(result.dmoguid);
        this.updatereOrdering(result.targetId, result.dmoguid);
        this.saveProps(true, result);
        setTimeout(() => {
          if (this.refContextMenuComponent) {
            this.refContextMenuComponent.showContextMenu = false;
          }
        }, 100);
      }
      if (result.prevdmogId == this.data.DMOGID) {
        let findActual = this.inputAllselectedBMO[this.data.GUID];
        if (findActual) {
          this.panelMainContainer = JSON.parse(findActual.DMOGProps);
          if (this.panelMainContainer) {
            this.rows = this.panelMainContainer.rows;
          }
        }
        this.removeDmoToOthers(result.dmoguid);
        this.saveProps(true);
        setTimeout(() => {
          if (this.refContextMenuComponent) {
            this.refContextMenuComponent.showContextMenu = false;
          }
        }, 100);
      }
    });
    this.dataProvider.geUpdatedColumnData().subscribe((result) => {
      if (result.DMOGID == this.data.DMOGID) {
        this.panelMainContainer = JSON.parse(result.DMOGProps);
        if (this.panelMainContainer) {
          this.rows = this.panelMainContainer.rows;
          this.sideNavModel.emit(null);
        }
      }
    });
    this.dataProvider.setMoveDmo;
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  //public bm: classes.BM;
  set dmog(dmog) {
    this._dmog = dmog;
  }
  get dmog() {
    return this._dmog;
  }
  ngOnInit() {
    this.style = {
      width: `100%`,
      height: `auto`
    };
    if (this.data && this.data.DMOGProps) {
      this.panelMainContainer = JSON.parse(this.data.DMOGProps);
      if (this.panelMainContainer) {
        this.rows = this.panelMainContainer.rows;
        this.containerStyle = this.panelMainContainer.style;
      }
      this.updateWidth();
      if (this.data.GUID && this.newlyCreatedConatiner) {
        this.findDMOGById();
      }
    }
    if (this.data?.formData?.components) {
      this.availableActiveDmogIdes = this.data.formData.components.map((a) => a.guid);
    } else {
      this.availableActiveDmogIdes = [];
    }
    if (this.SharedDmosList && this.SharedDmosList.length > 0) {
      this.AvailableActiveSharredDmoguides = this.SharedDmosList.map((a) => a.guid);
    } else {
      this.AvailableActiveSharredDmoguides = [];
    }
  }
  ngOnChanges(changes) {
    if (changes["UpdatedDataSideNavModel"] && this.UpdatedDataSideNavModel && this.UpdatedDataSideNavModel != void 0) {
      if (this.UpdatedDataSideNavModel.dmog?.GUID === this.data?.GUID) {
        this.panelMainContainer = this.UpdatedDataSideNavModel.data;
        if (this.panelMainContainer) {
          const updateddmog = JSON.stringify(this.panelMainContainer);
          if (updateddmog) {
            this.UpdatedDataSideNavModel.dmog.DMOGProps = updateddmog;
            this.data = this.UpdatedDataSideNavModel.dmog;
          }
        }
      }
    }
    if (changes["UpdatedDataForContainer"] && this.UpdatedDataForContainer) {
      this.handleUpdatedDataForContainer();
    }
  }
  handleUpdatedDataForContainer() {
    if (this.UpdatedDataForContainer?.GUID === this.data?.GUID) {
      this.updatePanelWidth();
    }
    if (this.data?.GUID && this.newlyCreatedConatiner) {
      this.findDMOGById();
    }
  }
  updatePanelWidth() {
    const updatedProps = JSON.parse(this.UpdatedDataForContainer.DMOGProps);
    const newWidth = updatedProps.width;
    if (newWidth && this.panelMainContainer?.width) {
      this.panelMainContainer.width = newWidth;
    }
  }
  ngDoCheck() {
    if (this.UpdatedDataForContainer?.GUID === this.data?.GUID) {
      const updatetedWidth = JSON.parse(this.UpdatedDataForContainer.DMOGProps);
      const newWidth = updatetedWidth.width;
      if (this.panelMainContainer?.width && newWidth) {
        this.panelMainContainer.width = newWidth;
      }
    }
    if (this.data?.formData?.components) {
      this.availableActiveDmogIdes = this.data.formData.components.map((a) => a.guid);
    } else {
      this.availableActiveDmogIdes = [];
    }
    if (this.SharedDmosList && this.SharedDmosList.length > 0) {
      this.AvailableActiveSharredDmoguides = this.SharedDmosList.map((a) => a.guid);
    } else {
      this.AvailableActiveSharredDmoguides = [];
    }
  }
  findDMOGById() {
    setTimeout(() => {
      const selectedItem = {
        c: {
          "colIndex": 0,
          "dmoguid": [],
          "rows": [],
          "width": 99.5
        },
        colIndex: 0,
        r: {
          "columns": [
            {
              "colIndex": 0,
              "dmoguid": [],
              "rows": [],
              "width": 99.5
            }
          ],
          "rowIndex": 0
        },
        rowIndex: 0,
        type: "column"
      };
      let model = {
        type: "Column",
        dmog: this.data,
        data: selectedItem,
        props: this.panelMainContainer
      };
      if (this.data?.Type !== "CardGroup") {
        this.sideNavModel.emit(model);
      }
      this.selectedDivId = "main_" + this.newlyCreatedConatiner;
      this.removeOtherActive("main_" + this.newlyCreatedConatiner);
    }, 30);
  }
  getFirstRowAndColumnData() {
    if (!this.panelMainContainer?.rows?.length) {
      console.warn("No rows found in panelMainContainer.");
      return null;
    }
    const firstRow = this.panelMainContainer.rows[0];
    if (!firstRow.columns || firstRow.columns.length === 0) {
      console.warn("No columns found in the first row.");
      return null;
    }
    const firstColumn = firstRow.columns[0];
    const result = {
      rowIndex: firstRow.rowIndex,
      colIndex: firstColumn.colIndex,
      dmoguid: firstColumn.dmoguid || [],
      width: firstColumn.width || null,
      type: "column"
    };
    console.log("Generated JSON:", result);
    return result;
  }
  disableDrag() {
    this.cdkDragDisabled = true;
  }
  isCurrentActive(currentId) {
    if (this.isDraggingStart) {
      return "";
    }
    if (this.selectedDivId == currentId) {
      return " active-container ";
    }
    return "";
  }
  isContainerActive(currentId) {
    if (this.selectedDivId == currentId) {
      return " active-container-main";
    }
    return "";
  }
  removeOtherActive(currentId) {
    var elements = document.querySelectorAll(".resizePanel");
    if (elements) {
      for (let index = 0; index < elements.length; index++) {
        const element = elements[index];
        if (element) {
          if (element.classList.contains("active-container-main")) {
            element.classList.remove("active-container-main");
          }
          if (element.id == currentId) {
            element.classList.add("active-container-main");
          }
        }
      }
    }
  }
  removeSettingsActive() {
    var elements = document.querySelectorAll(".resizePanel");
    if (elements) {
      for (let index = 0; index < elements.length; index++) {
        const element = elements[index];
        if (element) {
          if (element.classList.contains("active-container-main")) {
            element.classList.remove("active-container-main");
          }
        }
      }
    }
  }
  updateWidth() {
    if (this.panelMainContainer) {
      let width = this.panelMainContainer.width;
      if (width == 0) {
        width = 100;
      }
      if (this.containerStyle) {
        let top = this.containerStyle.container.corner_radius_top;
        let right = this.containerStyle.container.corner_radius_right;
        let bottom = this.containerStyle.container.corner_radius_bottom;
        let left = this.containerStyle.container.corner_radius_left;
        let hasHeader = this.containerStyle.header.header_border;
        let borderWidth = this.containerStyle.container.border_width;
        this.style = {
          width: `${100}%`,
          height: `auto`,
          "background": this.containerStyle.container.background_color,
          "border-style": this.containerStyle.container.border || "solid",
          "border-width": `${borderWidth}px`,
          "border-color": this.containerStyle.container.border_color || "initial",
          "border-radius": `${top}px ${right}px ${bottom}px ${left}px`
        };
        if (hasHeader) {
          this.headerStyle = {
            "border-color": this.containerStyle.container.border_color,
            "background": this.containerStyle.header.header_fill_color,
            "color": this.containerStyle.header.header_text_color,
            "border-radius": `${top}px ${right}px ${0}px ${0}px`
          };
        } else {
          this.headerStyle = {};
        }
      } else {
        this.style = {
          width: `${100}%`,
          height: `auto`
        };
      }
    }
  }
  enableDrag() {
    this.cdkDragDisabled = false;
  }
  ngAfterContentChecked() {
  }
  validate(event) {
    const MIN_DIMENSIONS_PX = 50;
    if (event.rectangle.width && event.rectangle.height && (event.rectangle.width < MIN_DIMENSIONS_PX || event.rectangle.height < MIN_DIMENSIONS_PX)) {
      return false;
    }
    return true;
  }
  onResizeEnd(event) {
    this.style = {
      // left: `${event.rectangle.left}px`,
      // top: `${event.rectangle.top}px`,
      width: `${event.rectangle.width}px`,
      height: `auto`
    };
  }
  onTabRemove(tab) {
    this.dataProvider.setSidebarclose(true);
    this.resetDivColour();
    this.tabRemove.emit(tab);
  }
  onEditDMOGRemove(tab) {
    this.dataProvider.setSidebarclose(true);
    this.resetDivColour();
    this.tabEdit.emit(tab);
  }
  ShowDmogSettings(event) {
    this.activeteMe(event);
  }
  // Done by Anjum
  rowHovring(currentId) {
    const pattern = /^(\w+_row_)(\d+)$/;
    const match = pattern.exec(currentId);
    if (!match)
      return;
    const baseId = match[1];
    const index = parseInt(match[2], 10);
    this.previousHoveredIds.forEach((id) => {
      const el = document.getElementById(id);
      if (el)
        el.style.borderBottom = "none";
      el.style.borderTop = "none";
    });
    const currentElemId = `${baseId}${index}`;
    const nextElemId = `${baseId}${index + 1}`;
    const currentElem = document.getElementById(currentElemId);
    const nextElem = document.getElementById(nextElemId);
    if (currentElem)
      currentElem.style.borderBottom = "1px solid #00ACE9";
    if (nextElem)
      nextElem.style.borderTop = "1px solid #00ACE9";
    this.previousHoveredIds = [currentElemId];
    if (nextElem)
      this.previousHoveredIds.push(nextElemId);
  }
  rowHoverOut() {
    this.previousHoveredIds.forEach((id) => {
      const el = document.getElementById(id);
      if (el) {
        el.style.borderBottom = "1px solid transparent";
        el.style.borderTop = "1px solid transparent";
      }
    });
    this.previousHoveredIds = [];
  }
  onAddRowAfter(event, selectedRow, type) {
    event.stopPropagation();
    let currentIndex = selectedRow.rowIndex;
    let column = [{
      colIndex: 0,
      dmoguid: [],
      width: 99.5,
      rows: []
    }];
    let newRow = {
      rowIndex: currentIndex + 1,
      columns: column
    };
    const insertIndex = type === "below" ? currentIndex + 1 : currentIndex;
    this.rows.splice(insertIndex, 0, newRow);
    this.rows.forEach((row, idx) => {
      row.rowIndex = idx;
    });
    this.resetDivColour();
    this.saveProps();
    this.rowHoverOut();
  }
  onAddInnerRowAfter(event, selectedRow, selectedColumn, selecteColumnRow, type, innerRowIndex) {
    event.stopPropagation();
    let currentIndex = innerRowIndex;
    let column = [{
      index: 0,
      width: 100,
      dmoguid: []
    }];
    let newRow = {
      columns: column
    };
    const insertIndex = type === "below" ? currentIndex + 1 : currentIndex;
    selectedColumn.rows.splice(insertIndex, 0, newRow);
    this.rows[selectedRow.rowIndex].columns[selectedColumn.colIndex] = selectedColumn;
    this.resetDivColour();
    this.saveProps();
  }
  onAddRow() {
    let nextIndex = this.rows.length;
    let column = [];
    column.push({ "colIndex": 0, "dmoguid": [], "width": 99.5, "rows": [] });
    let letNextRow = { rowIndex: nextIndex, columns: column };
    this.rows.push(letNextRow);
    this.resetDivColour();
    this.saveProps();
  }
  onAddColumn(rowIndex) {
    if (this.rows[rowIndex].columns.length < 12) {
      let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
      let column = currentRoWithCol[0].columns.length;
      this.rows[rowIndex].columns.push({ "colIndex": column + 1, "dmoguid": [], "rows": [] });
      this.resetColumnWidth(currentRoWithCol[0].columns);
      this.saveProps();
    } else {
      alert("Maximum 12 columns allowed per row.");
    }
  }
  resetColumnWidth(currentRoWithCol, rowIndex) {
    if (rowIndex != null) {
      let currentRow = this.rows.filter((a) => a.rowIndex == rowIndex);
      if (currentRow.length == 0)
        return;
      currentRoWithCol = currentRow[0].columns;
    }
    let column = currentRoWithCol;
    let index = 0;
    let perClmwidth = 99.5 / currentRoWithCol.length;
    for (let c of column) {
      c.width = perClmwidth;
      c.colIndex = index;
      index++;
    }
  }
  resetColumnWidthForRowInColumn(currentRoWithCol) {
    for (let r of currentRoWithCol) {
      let column = r.columns;
      let perClmwidth = 100 / r.columns.length;
      let index = 0;
      for (let c of column) {
        c.width = perClmwidth;
        c.index = index;
        index++;
      }
    }
  }
  resetIndexing() {
    for (let index = 0; index < this.rows.length; index++) {
      let currentRow = this.rows[index];
      currentRow.rowIndex = index;
      for (let cindex = 0; cindex < currentRow.columns.length; cindex++) {
        let currentColumn = currentRow.columns[cindex];
        currentColumn.colIndex = cindex;
        if (currentColumn.rows && currentColumn.rows.length > 0) {
          for (let crindex = 0; crindex < currentColumn.rows.length; crindex++) {
            const subRow = currentColumn.rows[crindex];
            if (subRow && subRow.columns && subRow.columns.length)
              for (let scindex = 0; scindex < subRow.columns.length; scindex++) {
                let subColumn = subRow.columns[scindex];
                subColumn.index = scindex;
              }
          }
        }
      }
    }
  }
  onAddRowInColumn(item) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let childColum = [];
        childColum.push({ "index": 0, "width": 100, "dmoguid": [] });
        column.rows.push({ "columns": childColum });
        this.resetColumnWidthForRowInColumn(column.rows);
      }
    }
    this.saveProps();
  }
  ///dmo element
  onAddRowChildColumnDmo(item, dmoguid) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let existingColumn = column.rows[item.ColumnRowIndex];
        let ex = existingColumn.columns.length;
        for (let c of existingColumn.columns) {
          if (c.index == item.colRowcolumnIndex) {
            if (!c.dmoguid) {
              c.dmoguid = [];
            }
            c.dmoguid.push(dmoguid);
          }
        }
      }
    }
    this.saveProps();
  }
  //end
  onAddRowChildColumn(item) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let existingColumn = column.rows[item.ColumnRowIndex];
        let ex = existingColumn.columns.length;
        existingColumn.columns.push({ "index": ex + 1, "width": 100, "dmoguid": [] });
        this.resetColumnWidthForRowInColumn(column.rows);
      }
    }
    this.saveProps();
  }
  onRemoveRowChildColumn(item) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let existingColumn = column.rows[item.ColumnRowIndex];
        let ex = existingColumn.columns.length;
        existingColumn.columns.splice(item.colRowcolumnIndex, 1);
        this.resetColumnWidthForRowInColumn(column.rows);
      }
    }
    this.saveProps();
  }
  onRemoveChildRow(item) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let existingColumn = column.rows.splice(item.ColumnRowIndex, 1);
        this.resetColumnWidthForRowInColumn(column.rows);
      }
    }
    this.saveProps();
  }
  onRemoveColumn(rowIndex, colIndex) {
    if (this.rows[rowIndex].columns.length == 1) {
      this.onRemoveRow(rowIndex);
    } else {
      this.rows[rowIndex].columns.splice(colIndex, 1);
      this.resetColumnWidth(null, rowIndex);
      this.saveProps();
    }
  }
  onRemoveRow(rowIndex) {
    this.rows.splice(rowIndex, 1);
    this.saveProps();
  }
  ShowParentChildRowHover(row) {
    let hasChild = false;
    for (let index = 0; index < row.columns.length; index++) {
      let currentColumn = row.columns[index];
      if (currentColumn && currentColumn.rows && currentColumn.rows.length > 0) {
        for (let ri = 0; ri < currentColumn.rows.length; ri++) {
          hasChild = true;
          if (currentColumn.rows[ri] && currentColumn.rows[ri].columns.length > 0) {
            hasChild = true;
            break;
            return;
          }
        }
      }
    }
    return hasChild;
  }
  ShowParentRowHover(row) {
    let hasChild = true;
    for (let index = 0; index < row.columns.length; index++) {
      let currentColumn = row.columns[index];
      if (currentColumn && currentColumn.rows && currentColumn.rows.length > 0) {
        for (let ri = 0; ri < currentColumn.rows.length; ri++) {
          if (currentColumn.rows[ri] && currentColumn.rows[ri].columns.length > 0) {
            hasChild = false;
            break;
            return;
          }
        }
      }
    }
    return hasChild;
  }
  shareDmoSelect(dmo) {
    this.updatePropBaseOfDMO(this.contextMenuData, dmo.guid);
    this.saveDmoDetails(dmo, this.data, true);
  }
  saveDmoDetails(res, selectedDmog, isEdit, iscloned) {
    return __async(this, null, function* () {
      try {
        let url = `wfapibm/DataModel/saveDmoforNewDM`;
        let data;
        if (isEdit) {
          data = selectedDmog;
        } else {
          data = selectedDmog.data;
        }
        if (iscloned) {
          data = selectedDmog;
        }
        let dmog = {
          "DMOGProps": data.DMOGProps,
          "id": data.DMOGID,
          "ProcessName": data.root.ProcessName,
          "Version": data.Version
        };
        let isApiVersion3 = true;
        let model = { "dmo": res, "dmog": dmog };
        yield firstValueFrom(this.apiService.postgateway("", url, model, null));
        return this.reloadParent.emit(true);
      } catch (error) {
        console.log(error);
      }
      return false;
    });
  }
  FormControlSelect(type) {
    this.type = type;
    this.OnBMOSave.emit(this);
  }
  GetSelectMenu(rowIndex, colIndex) {
    this.currentRow = rowIndex;
    this.currentColumn = colIndex;
  }
  onResizeColumn(event, column, rowIndex) {
    this.resizeColumn(event, column, rowIndex);
    if (event) {
      this.styleObject(column);
    }
    this.saveProps();
  }
  resizeColumnNew(columns, rowIndex) {
    this.saveProps();
  }
  resizeColumn(colWidth, column, rowIndex) {
    const filteredColumn = this.panelMainContainer.rows[rowIndex]?.columns;
    if (!filteredColumn || filteredColumn.length === 0) {
      return;
    }
    const { totalMWWidth, nonMWCount } = this.updateTargetColumn(filteredColumn, column.colIndex, colWidth);
    this.redistributeWidths(filteredColumn, totalMWWidth, nonMWCount);
  }
  updateTargetColumn(columns, colIndex, colWidth) {
    let totalMWWidth = 0;
    let nonMWCount = 0;
    columns.forEach((column, index) => {
      if (index === colIndex) {
        column.mw = true;
        column.width = Math.floor(parseFloat(colWidth));
      }
      if (column.mw) {
        totalMWWidth += column.width || 0;
      } else {
        nonMWCount++;
      }
    });
    return { totalMWWidth, nonMWCount };
  }
  redistributeWidths(columns, totalMWWidth, nonMWCount) {
    const remainingWidth = 99.5 - totalMWWidth;
    const distributedWidth = nonMWCount > 0 ? remainingWidth / nonMWCount : 0;
    columns.forEach((col) => {
      if (!col.mw || col.width < 5) {
        col.width = Math.max(distributedWidth, 5);
      }
    });
  }
  styleObject(column) {
    if (column) {
      return { width: column.width + "%" };
    }
    return {};
  }
  styleChildObject(column) {
    if (column) {
      return { width: column.width + "%" };
    }
    return {};
  }
  styleObjectChild(column) {
    if (column) {
      const totalColumns = column?.columns?.length || 1;
      const paddingAdjustment = 1;
      const modifiedWidth = column?.columns?.map((col) => {
        return col?.width ? col?.width - paddingAdjustment / totalColumns : col?.width;
      });
      return { width: modifiedWidth + "%" };
    }
    return {};
  }
  //prop 
  saveProps(isReload, fromOneToAnotherDmo) {
    this.resetIndexing();
    if (!this.panelMainContainer) {
      this.panelMainContainer = {
        width: 100,
        rows: this.rows
      };
    } else {
      this.panelMainContainer.rows = this.rows;
    }
    var model = {};
    if (fromOneToAnotherDmo) {
      model = {
        "DMOGID": this.data.DMOGID,
        "prevdmogId": fromOneToAnotherDmo.prevdmogId,
        "newdmogId": fromOneToAnotherDmo.dmogId,
        "dmoguid": fromOneToAnotherDmo.dmoguid,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
    } else {
      model = {
        "DMOGID": this.data.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
    }
    const url = `wfapibm/DataModel/SaveDmogProps`;
    this.apiService.postgateway("", url, model).subscribe((r) => {
      this.selectedDivId = null;
      this.data.DMOGProps = JSON.stringify(this.panelMainContainer);
      if (isReload) {
        this.reloadParent.emit(true);
      }
    }, (error) => {
      console.log(error);
    });
  }
  activeCurrentDivBasedOnParent(id) {
    setTimeout(() => {
      let parenthtml = document.getElementById("main_" + this.title);
      if (parenthtml) {
        let activebyID = parenthtml.children;
        for (let index = 0; index < activebyID.length; index++) {
          const element = activebyID[index];
          if (element.id == id) {
            element.classList.add("active-container");
          }
        }
      }
    }, 10);
  }
  showselection(event, clickedDiv, id, mouseAction) {
    this.removeAllActiveCell();
    let currentElement = event.currentTarget;
    if (!currentElement)
      return;
    if (mouseAction === "mouseenter") {
      currentElement.classList.add("row-hover-item-div", "active-container");
      currentElement.classList.remove("selectionDiv");
    }
  }
  onDragEnter(event, clickedDiv, id) {
    event.preventDefault();
    this.targetEvent = event;
    this.targetclickedDiv = clickedDiv;
    this.targetid = id;
    this.showContextMenu(event, clickedDiv, id);
  }
  onDragLeave(event, clickedDiv, id) {
    event.preventDefault();
  }
  onHover(data) {
    if (data?.id) {
      this.hoveredDataId = data.id;
    }
  }
  showContextMenu(event, clickedDiv, id) {
    if (this.isDraggingStart) {
      return;
    }
    if (this.readonly) {
      this.dataProvider.setSidebarclose(true);
      return;
    }
    this.removeSettingsActive();
    this.manageActiveContainer(id);
    this.selectedDivId = id;
    event.stopPropagation();
    this.sideNavModel.emit(null);
    this.dataProvider.setHideContextMenu({
      "dmogId": this.data.DMOGID,
      "selectedDivId": this.selectedDivId
    });
    if (clickedDiv.dmoguid) {
      this.isDmoExist = this.dmoExist(clickedDiv.dmoguid);
      console.log("Is Dmo Exist", this.isDmoExist);
    }
    this.handleContextMenuActions(event, clickedDiv, id);
    this.configureContextMenu(event, clickedDiv);
    setTimeout(() => {
      if (this.selectedDivId) {
        const element = document.getElementById(this.selectedDivId);
        if (element) {
          const divRect = element.getBoundingClientRect();
          this.contextMenuPosition.left = divRect.left;
          this.contextMenuPosition.right = divRect.right;
          this.contextMenuPosition.top = divRect.top;
          this.contextMenuPosition.bottom = divRect.bottom;
          this.contextMenuPosition.width = divRect.width;
          this.contextMenuPosition.height = divRect.height;
          this.contextMenuPosition.centerX = divRect.left + divRect.width / 2;
          this.contextMenuPosition.centerY = divRect.top;
          this.contextMenuPosition.rightClickMenuPositionX = this.contextMenuPosition.centerX;
          this.contextMenuPosition.rightClickMenuPositionY = this.contextMenuPosition.centerY;
          this.contextMenuFormPosition = new ContextMenuPosition();
          this.contextMenuFormPosition = this.contextMenuPosition;
        }
      }
    }, 0);
  }
  manageActiveContainer(id) {
    let activeTag = document.querySelector(".active-container");
    if (activeTag == null) {
      const targetElement = document.getElementById(id);
      if (targetElement) {
        targetElement.classList.add("active-container");
      }
      activeTag = document.querySelector(".active-container");
      this.activateContainer(id);
    }
    if (activeTag) {
      if (activeTag.id !== id) {
        this.activateContainer(id);
      }
    }
  }
  activateContainer(id) {
    this.removeAllActiveCell();
    const targetElement = document.getElementById(id);
    if (targetElement) {
      targetElement.classList.add("active-container");
    }
    this.activeCurrentDivBasedOnParent(id);
  }
  handleContextMenuActions(event, clickedDiv, id) {
    if (!clickedDiv)
      return;
    switch (clickedDiv.type) {
      case "column":
        this.columnSetting(event, clickedDiv);
        break;
      case "parentRow":
        this.rowSetting(event, clickedDiv.r, id);
        break;
      case "NestedcolumnRow":
        this.subRowSetting(event, clickedDiv, id);
        break;
      case "columnRow":
        this.subColumnSetting(event, clickedDiv, id);
        break;
    }
  }
  configureContextMenu(event, clickedDiv) {
    this.showFormContextMenu = false;
    this.showSharedmoContextMenu = false;
    this.resetDivColour();
    this.contextMenuPosition = new ContextMenuPosition();
    this.contextMenuData = clickedDiv;
  }
  resetDivColour() {
    return;
  }
  updatePropBaseOfDMO(data, dmoguid) {
    if (data == void 0 || data == null)
      return;
    switch (data.type) {
      case "parentRow":
        {
          let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
          let column = currentRoWithCol[0].columns.length;
          break;
        }
        ;
      case "column":
        {
          let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
          let column = currentRoWithCol[0].columns;
          for (let index = 0; index < column.length; index++) {
            if (index == data.colIndex) {
              column[index].dmoguid.push(dmoguid);
              break;
            }
          }
          this.saveProps();
          break;
        }
        ;
      case "columnRow":
        {
          let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
          let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
          if (currentRoWithCol.length > 0) {
            let column = currentRoWithCol[0].columns[data.colIndex];
            if (column) {
              let existingColumn = column.rows[data.colRowIndex];
              for (let index = 0; index < existingColumn.columns.length; index++) {
                if (index == data.colRowcolumnIndex) {
                  existingColumn.columns[index].dmoguid.push(dmoguid);
                  break;
                }
              }
            }
          }
          this.saveProps();
          break;
        }
        ;
    }
  }
  updatereOrdering(targetId, dmoguid) {
    if (targetId && targetId.length > 0 && dmoguid) {
      let ids = targetId.split("_");
      if (ids && ids.length > 0) {
        let _currentdmog = ids[0];
        let rowORCol = ids[1];
        if (rowORCol == "column") {
          let rowIndex = Number(ids[2]);
          let colIndex = Number(ids[3]);
          let data = { "rowIndex": rowIndex, "colIndex": colIndex, "type": "column" };
          this.removeDmoToOthers(dmoguid);
          this.updatePropBaseOfDMO(data, dmoguid);
        } else if (rowORCol == "columnRow") {
          let rowIndex = Number(ids[2]);
          let colIndex = Number(ids[3]);
          let colRowIndex = Number(ids[4]);
          let colRowcolumnIndex = Number(ids[5]);
          let data = { "type": "columnRow", "rowIndex": rowIndex, "colIndex": colIndex, "colRowIndex": colRowIndex, "colRowcolumnIndex": colRowcolumnIndex };
          this.removeDmoToOthers(dmoguid);
          this.updatePropBaseOfDMO(data, dmoguid);
        }
      }
    }
  }
  removeDmoToOthers1(dmoguid) {
    if (this.rows.length) {
      for (let index = 0; index < this.rows.length; index++) {
        const r = this.rows[index];
        for (let c = 0; c < r.columns.length; c++) {
          const col = r.columns[c];
          if (col.dmoguid != null) {
            var existsIndex = col.dmoguid.indexOf(dmoguid);
            if (existsIndex > -1) {
              col.dmoguid.splice(existsIndex, 1);
            }
          }
          for (let cr = 0; cr < col.rows.length; cr++) {
            const crc = col.rows[cr];
            for (let icrc = 0; icrc < crc.columns.length; icrc++) {
              const cColumn = crc.columns[icrc];
              if (cColumn.dmoguid != null) {
                var existsIndex = cColumn.dmoguid.indexOf(dmoguid);
                if (existsIndex > -1) {
                  cColumn.dmoguid.splice(existsIndex, 1);
                }
              }
            }
          }
        }
      }
    }
  }
  //2nd 
  removeDmoToOthers(dmoguid) {
    if (this.rows.length) {
      for (let index = 0; index < this.rows.length; index++) {
        const r = this.rows[index];
        for (let c = 0; c < r.columns.length; c++) {
          const col = r.columns[c];
          if (col.dmoguid != null) {
            var existsIndex = col.dmoguid.indexOf(dmoguid);
            if (existsIndex > -1) {
              col.dmoguid.splice(existsIndex, 1);
            }
          }
          for (let cr = 0; cr < col.rows.length; cr++) {
            const crc = col.rows[cr];
            for (let icrc = 0; icrc < crc.columns.length; icrc++) {
              const cColumn = crc.columns[icrc];
              if (cColumn.dmoguid != null) {
                var existsIndex = cColumn.dmoguid.indexOf(dmoguid);
                if (existsIndex > -1) {
                  cColumn.dmoguid.splice(existsIndex, 1);
                }
              }
            }
          }
        }
      }
    }
  }
  dmoExist(dmoguidList) {
    if (dmoguidList == void 0 || dmoguidList == null || dmoguidList.length < 1) {
      return false;
    }
    if (!this.availableActiveDmogIdes || !this.AvailableActiveSharredDmoguides) {
      return false;
    }
    const list = Array.isArray(dmoguidList) ? dmoguidList : [dmoguidList];
    let exists = list.some((dmoguid) => this.availableActiveDmogIdes.includes(dmoguid) || this.AvailableActiveSharredDmoguides.includes(dmoguid));
    return exists;
  }
  //This function filters out the looping DMOGUIDs with available active and shared dmos DMOGUIDs
  filterDmoguidList(dmoguidList) {
    if (!dmoguidList || !this.availableActiveDmogIdes || !this.AvailableActiveSharredDmoguides) {
      return [];
    }
    return dmoguidList.filter((dmoguid) => this.availableActiveDmogIdes.includes(dmoguid) || this.AvailableActiveSharredDmoguides.includes(dmoguid));
  }
  removeOrphanedDmos(dmoguidList) {
    if (dmoguidList == void 0 || dmoguidList == null || dmoguidList.length < 1) {
      return false;
    }
    if (!this.availableActiveDmogIdes || !this.AvailableActiveSharredDmoguides) {
      return false;
    }
    const list = Array.isArray(dmoguidList) ? dmoguidList : [dmoguidList];
    let exists = list.some((dmoguid) => this.availableActiveDmogIdes.includes(dmoguid) || this.AvailableActiveSharredDmoguides.includes(dmoguid));
    return exists;
  }
  getCurrentDMO(dmoguid) {
    const findDmo = (list) => list?.filter((a) => a.guid === dmoguid)[0] ?? null;
    let dmo = findDmo(this.data?.formData?.components);
    if (dmo) {
      this.setReadOnly(dmo);
      return dmo;
    }
    let filteredList = findDmo(this.SharedDmosList);
    if (filteredList) {
      this.setReadOnly(filteredList);
      return filteredList;
    }
    return null;
  }
  setReadOnly(dmo) {
    if (this.isDraggingStart) {
      dmo.IsReadOnly = this.isDraggingStart;
    }
  }
  onMouseEnterInnerDragEnded(event, dmoguid) {
    this.isInnerDragging = true;
  }
  onMouseLeaveInnerDragEnded(event, dmoguid) {
    this.isInnerDragging = false;
    event.stopPropagation();
  }
  onInnerDragEnded(event, dmoguid) {
    setTimeout(() => {
      console.log("Drag End Before currentDmogId;", this.currentDmogId);
      this.isInnerDragging = false;
      this.dragDmoToAnotherdmog.emit({ "dmogId": this.data.DMOGID, "dmoguid": dmoguid, "InnerDragging": this.isInnerDragging });
      event.stopPropagation();
    }, 5);
  }
  dragdmo(event, dmoguid, currentDmogId) {
    event.stopPropagation();
    this.currentDmogId = currentDmogId;
    console.log("Drag start Before currentDmogId;", this.currentDmogId);
    console.log("Drag start of DMO's", dmoguid);
    event.dataTransfer.setData("dmoguid", dmoguid);
    this.dragdmoguid = dmoguid;
    this.isInnerDragging = true;
    this.dragDmoToAnotherdmog.emit({ "dmogId": this.data.DMOGID, "dmoguid": dmoguid, "InnerDragging": this.isInnerDragging });
  }
  onDragOver(event) {
    let targetId = event.currentTarget.id;
    console.log("Drag drag over funtion of DMO's", targetId);
    event.preventDefault();
  }
  addNewRow(event) {
    event.stopPropagation();
    this.onAddRow();
  }
  dropdmo(event, dmoguid) {
    if (this.readonly)
      return;
    event.stopPropagation();
    let targetId = event.currentTarget.id;
    console.log("Drag drop funtion of DMO's", targetId);
    const draggedDmoguid = event.dataTransfer.getData("dmoguid");
    const targetDmo = event.target.closest("[data-dmoguid]");
    if (draggedDmoguid && targetDmo) {
      const targetGuid = targetDmo.getAttribute("data-dmoguid");
      if (targetGuid && draggedDmoguid !== targetGuid) {
        if (this.handleDmoReordering(event, draggedDmoguid, targetGuid)) {
          return;
        }
      }
    }
    let fromDmog = event.dataTransfer.getData("dmogRows");
    if (fromDmog && this.data.DMOGID == fromDmog) {
      this.dataProvider.setHideContextMenu(false);
      this.onAddRow();
      return;
    }
    let ControlDmogDmo = event.dataTransfer.getData("ControlDmogDmo");
    if (ControlDmogDmo) {
      let dmoModel = JSON.parse(ControlDmogDmo);
      if (dmoModel) {
        this.dataProvider.setHideContextMenu(false);
        let control = dmoModel.contol;
        let selectedItem = dmoModel.selectedItem;
        this.FormControlSelect(control);
        return;
      }
      return;
    }
    let ColumnDmogRows = event.dataTransfer.getData("ColumnDmogRows");
    if (ColumnDmogRows) {
      let dmoModel = JSON.parse(ColumnDmogRows);
      if (dmoModel) {
        this.dataProvider.setHideContextMenu(false);
        let selectedItem = dmoModel.selectedItem;
        this.onAddRowInColumn(selectedItem);
        return;
      }
    }
    let SubColumnDmo = event.dataTransfer.getData("SubColumnDmo");
    if (SubColumnDmo) {
      let dmoModel = JSON.parse(SubColumnDmo);
      if (dmoModel) {
        this.dataProvider.setHideContextMenu(false);
        let control = dmoModel.contol;
        let selectedItem = dmoModel.selectedItem;
        this.FormControlSelect(control);
        return;
      }
    }
    let SharedDmogDmo = event.dataTransfer.getData("SharedDmogDmo");
    if (SharedDmogDmo) {
      let dmoModel = JSON.parse(SharedDmogDmo);
      if (dmoModel) {
        let contol = dmoModel.contol;
        this.shareDmoSelect(contol);
        this.sideNavModel.emit(null);
        return;
      }
      return;
    }
    let grouping = event.dataTransfer.getData("cardGroupDmog");
    if (grouping) {
      this.dataProvider.setSidebarclose(true);
      let dmogModel = JSON.parse(grouping);
      if (dmogModel.type === "Card" || dmogModel.type === "CardGroup") {
        let data = {
          model: dmogModel,
          targetId
        };
        this.DraggingItemsModel.emit(data);
        return;
      }
      return;
    }
    this.showFormContextMenu = false;
    this.showSharedmoContextMenu = false;
    if (targetId && targetId.length > 0 && this.currentDmogId) {
      console.log("Drop dmo Calling... current Dmo Id is ", this.currentDmogId);
      let ids = targetId.split("_");
      if (ids[0] === this.currentDmogId) {
        this.currentDmogId = "";
        this.updatereOrdering(targetId, this.dragdmoguid);
      }
    }
    if (!dmoguid) {
      if (targetId && targetId.length > 0) {
        let ids = targetId.split("_");
        if (ids && ids.length > 0) {
          console.log("Drop dmo Emitter Calling... current Dmo Id is ", dmoguid);
          this.dropDmoToAnotherdmog.emit({ "dmogId": this.data.DMOGID, "targetId": targetId });
        }
      }
    }
  }
  handleDmoReordering(event, draggedDmoguid, targetGuid) {
    const column = this.findColumnContainingDmo(targetGuid);
    if (!column || !column.dmoguid)
      return false;
    const fromIndex = column.dmoguid.indexOf(draggedDmoguid);
    const toIndex = column.dmoguid.indexOf(targetGuid);
    if (fromIndex === -1 || toIndex === -1)
      return false;
    this.moveArrayItem(column.dmoguid, fromIndex, toIndex);
    this.saveProps();
    this.cdref.detectChanges();
    return true;
  }
  moveArrayItem(array, fromIndex, toIndex) {
    const item = array[fromIndex];
    array.splice(fromIndex, 1);
    array.splice(toIndex, 0, item);
  }
  findColumnContainingDmo(dmoguid) {
    for (const row of this.rows) {
      for (const column of row.columns) {
        if (column.dmoguid?.includes(dmoguid)) {
          return column;
        }
      }
    }
    return null;
  }
  dropRow(event) {
    if (this.readonly)
      return;
    event.stopPropagation();
    let targetId = event.currentTarget.id;
    let fromDmog = event.dataTransfer.getData("dmogRows");
    if (this.data.DMOGID == fromDmog) {
      this.onAddRow();
    }
    let grouping = event.dataTransfer.getData("cardGroupDmog");
    if (grouping) {
      this.dataProvider.setSidebarclose(true);
      let dmogModel = JSON.parse(grouping);
      if (dmogModel.type === "Card" || dmogModel.type === "CardGroup") {
        let data = {
          model: dmogModel,
          targetId
        };
        this.DraggingItemsModel.emit(data);
      }
    }
  }
  showChildContextMenu(event, id, mouseAction) {
    event.stopPropagation();
    if (this.readonly) {
      return;
    }
    let activeTag = document.querySelectorAll(".row-hover-item-div");
    activeTag.forEach((cell) => {
      if (!cell.classList.contains("NoRemoveHover")) {
        cell.classList.remove("row-hover-item-div");
      }
    });
    if (mouseAction == "mouseenter") {
      let currentid = document.getElementById(id);
      if (currentid) {
        currentid.classList.add("row-hover-item-div");
      }
    }
  }
  CurrentDropItem(event, id) {
    const div = event.relatedTarget;
  }
  OperateContextMenu($event) {
    if (this.readonly) {
      return;
    }
    var data = $event.showContextMenuFor;
    this.SelectdItem.emit({ "SelectdItem": this.data });
    var option = $event.option;
    this.showFormContextMenu = false;
    if (option == "AddDMO") {
      this.contextMenuFormPosition = $event.position;
      this.showFormContextMenu = true;
      return;
    } else if (option == "shareDMO") {
      this.showSharedmoContextMenu = true;
      this.contextMenuFormPosition = $event.position;
      return;
    }
    if (option == "EditDMO" || option == "DeleteDMO" || option == "ConditionsDMO" || option == "CloneDMO") {
      switch (data.type) {
        case "column":
          {
            if (data.dmoguid) {
              let dmowithDmog = { "dmog": this.data, "dmo": this.getCurrentDMO(data.dmoguid), "dmoguid": data.dmoguid };
              if (option == "DeleteDMO") {
                this.onDmoDelete.emit(dmowithDmog);
                this.cdref.detectChanges();
              } else if (option == "EditDMO") {
                this.onDmoEdit.emit(dmowithDmog);
              } else if (option == "ConditionsDMO") {
                this.openConditionPopup.emit(dmowithDmog);
              } else if (option == "CloneDMO") {
                this.openclonePopup.emit(dmowithDmog);
              }
              return;
            }
            let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
            for (let index = 0; index < currentRoWithCol.length; index++) {
              for (let c = 0; c < currentRoWithCol[index].columns.length; c++) {
                if (c == data.colIndex) {
                  const dmoguid = currentRoWithCol[index].columns[c].dmoguid[0];
                  if (dmoguid) {
                    let dmowithDmog = { "dmog": this.data, "dmo": this.getCurrentDMO(dmoguid), "dmoguid": dmoguid };
                    if (option == "DeleteDMO") {
                      this.onDmoDelete.emit(dmowithDmog);
                      this.cdref.detectChanges();
                    } else if (option == "EditDMO") {
                      this.onDmoEdit.emit(dmowithDmog);
                    } else if (option == "ConditionsDMO") {
                      this.openConditionPopup.emit(dmowithDmog);
                    } else if (option == "CloneDMO") {
                      this.openclonePopup.emit(dmowithDmog);
                    }
                    return;
                  }
                }
              }
            }
            break;
          }
          ;
        case "columnRow":
          {
            let dmoguid = "";
            if (data.dmoguid) {
              dmoguid = data.dmoguid;
            } else {
              let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
              let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
              loop1: for (let index = 0; index < currentRoWithCol.length; index++) {
                loop2: for (let c = 0; c < currentRoWithCol[index].columns.length; c++) {
                  if (c == data.colIndex) {
                    let column = currentRoWithCol[0].columns[c];
                    if (column) {
                      let existingColumn = column.rows[item.ColumnRowIndex];
                      loop3: for (let crin = 0; crin < existingColumn.columns.length; crin++) {
                        if (crin == data.colRowcolumnIndex) {
                          const element = existingColumn.columns[crin];
                          dmoguid = element.dmoguid[0];
                          break loop2;
                          return;
                        }
                      }
                    }
                  }
                }
              }
            }
            let dmowithDmog = { "dmog": this.data, "dmo": this.getCurrentDMO(dmoguid), "dmoguid": dmoguid };
            if (option == "DeleteDMO") {
              this.onDmoDelete.emit(dmowithDmog);
              this.cdref.detectChanges();
            } else if (option == "EditDMO") {
              this.onDmoEdit.emit(dmowithDmog);
            } else if (option == "ConditionsDMO") {
              this.openConditionPopup.emit(dmowithDmog);
            } else if (option == "CloneDMO") {
              this.openclonePopup.emit(dmowithDmog);
            }
            break;
          }
          ;
      }
      return;
    }
    this.resetDivColour();
    switch (data.type) {
      case "parentRow":
        {
          if (option == "AddColumn") {
            this.onAddColumn(data.rowIndex);
          } else if (option == "RemoveRow") {
            this.onRemoveRow(data.rowIndex);
            this.sideNavModel.emit(null);
            let model = {
              type: "dmog",
              dmog: this.data,
              data: this.panelMainContainer
            };
            this.sideNavModel.emit(model);
          }
          break;
        }
        ;
      case "column":
        {
          if (option == "AddColumn") {
            this.onAddColumn(data.rowIndex);
          } else if (option == "AddRow") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex };
            this.onAddRowInColumn(item);
          } else if (option == "RemoveColumn") {
            this.onRemoveColumn(data.rowIndex, data.colIndex);
            this.sideNavModel.emit(null);
            let model = {
              type: "dmog",
              dmog: this.data,
              data: this.panelMainContainer
            };
            this.sideNavModel.emit(model);
          }
          break;
        }
        ;
      case "columnRow":
        {
          if (option == "AddColumn") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
            this.onAddRowChildColumn(item);
          } else if (option == "RemoveColumn") {
            if (this.isDmoInLastNestedColumn(data)) {
              let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
              this.onRemoveChildRow(item);
              this.sideNavModel.emit(null);
              let model = {
                type: "dmog",
                dmog: this.data,
                data: this.panelMainContainer
              };
              this.sideNavModel.emit(model);
            } else {
              let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
              this.onRemoveRowChildColumn(item);
              this.sideNavModel.emit(null);
              let model = {
                type: "dmog",
                dmog: this.data,
                data: this.panelMainContainer
              };
              this.sideNavModel.emit(model);
            }
          }
          break;
        }
        ;
      case "NestedcolumnRow":
        {
          if (option == "AddColumn") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
            this.onAddRowChildColumn(item);
          } else if (option == "RemoveColumn") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
            this.onRemoveRowChildColumn(item);
            this.sideNavModel.emit(null);
            let model = {
              type: "dmog",
              dmog: this.data,
              data: this.panelMainContainer
            };
            this.sideNavModel.emit(model);
          } else if (option == "RemoveRow") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
            this.onRemoveChildRow(item);
            this.sideNavModel.emit(null);
            let model = {
              type: "dmog",
              dmog: this.data,
              data: this.panelMainContainer
            };
            this.sideNavModel.emit(model);
          }
          break;
        }
        ;
    }
  }
  isDmoInLastNestedColumn(data) {
    const rows = data.r;
    return rows.columns.some((column) => this.hasEmptyDmoInLastColumn(column));
  }
  hasEmptyDmoInLastColumn(column) {
    if (!column.rows)
      return false;
    return column.rows.some((row) => {
      const nestedColumns = row.columns || [];
      return this.checkNestedColumns(nestedColumns);
    });
  }
  checkNestedColumns(nestedColumns) {
    return nestedColumns.some((nestedCol) => {
      const isLastColumn = nestedColumns.length === 1;
      const hasDmoGuid = nestedCol.dmoguid && nestedCol.dmoguid.length > 0;
      return !hasDmoGuid && isLastColumn;
    });
  }
  AddDmogAbove($event) {
    this.OnAddDmogAbove.emit(this);
  }
  AddDmogInGroup() {
    this.OnAddDmogInGroup.emit(this);
  }
  activeteMe(event) {
    event.stopPropagation();
    this.selectedDivId = "main_" + this.title;
    this.removeOtherActive("main_" + this.title);
    this.removeAllActiveCell();
    if (!this.panelMainContainer) {
      let column = [];
      let letNextRow = {
        rowIndex: 0,
        columns: column
      };
    }
    let model = {
      type: "dmog",
      dmog: this.data,
      data: this.panelMainContainer
    };
    this.sideNavModel.emit(model);
  }
  rowSetting(event, selectedRow, id, json) {
    event.stopPropagation();
    this.manageActiveContainer(id);
    this.selectedDivId = id;
    let model = {
      type: "ParentRow",
      dmog: this.data,
      data: selectedRow,
      props: this.panelMainContainer
    };
    this.sideNavModel.emit(model);
    if (json) {
      this.showRowContextMenu(event, json, id);
    }
    setTimeout(() => {
      if (this.selectedDivId) {
        const element = document.getElementById(this.selectedDivId);
        if (element) {
          const divRect = element.getBoundingClientRect();
          this.contextMenuPosition.left = divRect.left;
          this.contextMenuPosition.right = divRect.right;
          this.contextMenuPosition.top = divRect.top;
          this.contextMenuPosition.bottom = divRect.bottom;
          this.contextMenuPosition.width = divRect.width;
          this.contextMenuPosition.height = divRect.height;
          this.contextMenuPosition.centerX = divRect.left + divRect.width / 2;
          this.contextMenuPosition.centerY = divRect.top;
          this.contextMenuPosition.rightClickMenuPositionX = this.contextMenuPosition.centerX;
          this.contextMenuPosition.rightClickMenuPositionY = this.contextMenuPosition.centerY;
          this.contextMenuFormPosition = new ContextMenuPosition();
          this.contextMenuFormPosition = this.contextMenuPosition;
        }
      }
    }, 0);
  }
  showRowContextMenu(event, clickedDiv, id) {
    if (this.readonly) {
      this.dataProvider.setSidebarclose(true);
      return;
    }
    this.selectedDivId = id;
    event.stopPropagation();
    this.sideNavModel.emit(null);
    this.dataProvider.setHideContextMenu({
      "dmogId": this.data.DMOGID,
      "selectedDivId": this.selectedDivId
    });
    this.handleContextMenuActions(event, clickedDiv, id);
    this.configureContextMenu(event, clickedDiv);
  }
  subRowSetting(event, selectedRow, id) {
    event.stopPropagation();
    this.selectedDivId = id;
    let model = {
      type: "NestedcolumnRow",
      dmog: this.data,
      data: selectedRow,
      props: this.panelMainContainer
    };
    this.sideNavModel.emit(model);
  }
  subColumnSetting(event, selectedRow, id) {
    event.stopPropagation();
    this.selectedDivId = id;
    let model = {
      type: "columnRow",
      dmog: this.data,
      data: selectedRow,
      props: this.panelMainContainer
    };
    this.sideNavModel.emit(model);
  }
  getWidthInPercentage(event, id) {
    event.stopPropagation();
    console.log(event);
    let looped = document.getElementById("resizediv_" + id);
    const parentWidth = looped.parentElement?.clientWidth || window.innerWidth;
    const divWidth = looped.clientWidth;
    let width = Math.floor(divWidth / parentWidth * 100);
    setTimeout(() => {
      let looped2 = document.getElementById("resizediv_" + id);
      looped2.style.width = `${width}% !important`;
      console.log(looped2.style.width);
    }, 100);
  }
  columnSetting(event, selectedColumn) {
    event.stopPropagation();
    let model = {
      type: "Column",
      dmog: this.data,
      data: selectedColumn,
      props: this.panelMainContainer
    };
    this.sideNavModel.emit(model);
  }
  removeAllActiveCell() {
    let activeTag = document.querySelectorAll(".active-container");
    activeTag.forEach((cell) => {
      cell.classList.remove("active-container");
    });
  }
  onWindowScroll() {
    this.resetDivColour();
  }
  static {
    this.\u0275fac = function DmogContainerComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmogContainerComponent)(\u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(ApiService2), \u0275\u0275directiveInject(MessageService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(NgbModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmogContainerComponent, selectors: [["app-dmog-container"]], viewQuery: function DmogContainerComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(ContextMenuComponent, 5);
        \u0275\u0275viewQuery(_c08, 5);
        \u0275\u0275viewQuery(_c15, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.refContextMenuComponent = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.parentResizeDir = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.childResizeDir = _t.first);
      }
    }, hostBindings: function DmogContainerComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("scroll", function DmogContainerComponent_scroll_HostBindingHandler() {
          return ctx.onWindowScroll();
        }, false, \u0275\u0275resolveWindow);
      }
    }, inputs: { isDraggingStart: "isDraggingStart", hasChildren: "hasChildren", UpdatedDataSideNavModel: "UpdatedDataSideNavModel", inputAllselectedBMO: "inputAllselectedBMO", title: "title", active: "active", hasInvalidForm: "hasInvalidForm", bmodisplay: "bmodisplay", trnsctnId: "trnsctnId", ChildProcessName: "ChildProcessName", ParentDmoValue: "ParentDmoValue", ChildDmoGuid: "ChildDmoGuid", ProcessType: "ProcessType", data: "data", UpdatedDataForContainer: "UpdatedDataForContainer", left: "left", top: "top", readonly: "readonly", BMO: "BMO", panel: "panel", SharedDmosList: "SharedDmosList", newlyCreatedConatiner: "newlyCreatedConatiner", mode: "mode", dmog: "dmog" }, outputs: { DraggingItemsModel: "DraggingItemsModel", openclonePopup: "openclonePopup", tabRemove: "tabRemove", tabEdit: "tabEdit", OnAddDmogAbove: "OnAddDmogAbove", OnAddDmogInGroup: "OnAddDmogInGroup", OnBMOSave: "OnBMOSave", sideNavModel: "sideNavModel", onDmoEdit: "onDmoEdit", onDmoDelete: "onDmoDelete", openConditionPopup: "openConditionPopup", reloadParent: "reloadParent", dragDmoToAnotherdmog: "dragDmoToAnotherdmog", dropDmoToAnotherdmog: "dropDmoToAnotherdmog", SelectdItem: "SelectdItem" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], ngContentSelectors: _c24, decls: 22, vars: 29, consts: [["itemActionColumn", ""], ["dragPlaceholder", ""], ["parentResizeDir", "columnResize"], ["childResizeDir", "columnResize"], ["cdkDragBoundary", ".form-view", 1, "rectangle", "resizePanel", 2, "margin-bottom", "10px", 3, "drop", "dragover", "mouseenter", "mouseleave", "ngClass", "id", "ngStyle"], [1, "row", 3, "click", "keydown", "mouseover", "mouseout", "focus", "blur", "ngStyle"], [1, "col-md-6"], ["for", "inputField", "cdkDragHandle", "", 1, "input-label", "dmog-title", 2, "font-size", "13px"], [1, "fas", "fa-grip-lines", "drag-icon"], [4, "ngIf"], [1, "col-md-2"], ["class", "empty-row colouredDiv selectionDiv rightpadding row rowBorder sub-row dmo.display row-colour", 3, "id", "ngClass", "drop", "click", "keydown", 4, "ngFor", "ngForOf"], ["class", "add-row-container", 4, "ngIf"], ["class", "popup-div default-popup", 4, "ngIf"], ["class", "popup-div group-popup", 4, "ngIf"], [3, "contextMenuSelected", "object", "showContextMenuFor", "contextMenuPosition", "readonly", "selectedDivId", "isDmoExist"], [3, "formControlSelect", "showContextMenuFor", "contextMenuPosition", "showContextMenu"], [3, "shareDmoSelect", "showContextMenuFor", "contextMenuPosition", "showContextMenu", "shareDmoList", "rows"], [1, "fas", "fa-link"], [1, "empty-row", "colouredDiv", "selectionDiv", "rightpadding", "row", "rowBorder", "sub-row", "dmo.display", "row-colour", 3, "drop", "click", "keydown", "id", "ngClass"], ["class", "Add-row-hover-item", 4, "ngIf"], ["class", "row-hover-item", "title", "Row Settings", 3, "click", "keydown", 4, "ngIf"], ["class", "row-container", "columnResize", "", 3, "ngClass", "id", "columnResizeEnabled", "rows", "rowIndex", "click", "keydown", "onResize", 4, "ngIf"], [1, ""], [1, "Add-row-hover-item"], [1, "icon-wrapper"], ["_ngcontent-ywm-c490", "", "width", "10", "height", "24", "viewBox", "0 0 12 20", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["_ngcontent-ywm-c490", "", "d", "M2 3C2.55228 3 3 2.55228 3 2C3 1.44772 2.55228 1 2 1C1.44772 1 1 1.44772 1 2C1 2.55228 1.44772 3 2 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["_ngcontent-ywm-c490", "", "d", "M10 3C10.5523 3 11 2.55228 11 2C11 1.44772 10.5523 1 10 1C9.44772 1 9 1.44772 9 2C9 2.55228 9.44772 3 10 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["_ngcontent-ywm-c490", "", "d", "M2 11C2.55228 11 3 10.5523 3 10C3 9.44772 2.55228 9 2 9C1.44772 9 1 9.44772 1 10C1 10.5523 1.44772 11 2 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["_ngcontent-ywm-c490", "", "d", "M10 11C10.5523 11 11 10.5523 11 10C11 9.44772 10.5523 9 10 9C9.44772 9 9 9.44772 9 10C9 10.5523 9.44772 11 10 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["_ngcontent-ywm-c490", "", "d", "M2 19C2.55228 19 3 18.5523 3 18C3 17.4477 2.55228 17 2 17C1.44772 17 1 17.4477 1 18C1 18.5523 1.44772 19 2 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["_ngcontent-ywm-c490", "", "d", "M10 19C10.5523 19 11 18.5523 11 18C11 17.4477 10.5523 17 10 17C9.44772 17 9 17.4477 9 18C9 18.5523 9.44772 19 10 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], [1, "custom-icon-menu-row"], ["title", "Add new row above", 1, "custom-icon-button", 3, "click", "keydown"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24"], ["fill", "#005996", "d", "M0 0h24v24H0z"], ["fill", "#FFFFFF", "d", "M20 11v2H4v-2h16zm-8-8l5 5h-3v4h-4V8H7l5-5z"], ["title", "Add new row below", 1, "custom-icon-button", 3, "click", "keydown"], ["fill", "#FFFFFF", "d", "M20 11v2H4v-2h16zm-8 11l-5-5h3v-4h4v4h3l-5 5z"], ["title", "Row Settings", 1, "row-hover-item", 3, "click", "keydown"], ["columnResize", "", 1, "row-container", 3, "click", "keydown", "onResize", "ngClass", "id", "columnResizeEnabled", "rows", "rowIndex"], ["class", "columnBorder sub-column pr-1 colouredDiv selectionDiv column-colour box", 3, "ngClass", "id", "ngStyle", "click", "keydown", 4, "ngFor", "ngForOf"], [1, "columnBorder", "sub-column", "pr-1", "colouredDiv", "selectionDiv", "column-colour", "box", 3, "click", "keydown", "ngClass", "id", "ngStyle"], [1, "resizer"], ["class", "colouredDiv  column-colour column-row-column-Border pr-1 center-plus-icon list-dmo", 3, "id", "dragover", "drop", 4, "ngIf"], ["class", "columnrowBorder rightpadding colouredDiv selectionDiv row-colour row-hover-item-inner-div", "columnResize", "", 3, "id", "ngClass", "rows", "rowIndex", "click", "keydown", "onResize", 4, "ngFor", "ngForOf"], [1, "colouredDiv", "column-colour", "column-row-column-Border", "pr-1", "center-plus-icon", "list-dmo", 3, "dragover", "drop", "id"], ["class", "width plus-icon", 3, "id", "drop", "dragenter", "dragleave", "dragover", 4, "ngIf"], [3, "id", "active-container", "ngClass", "click", "dragenter", "dragleave", "keydown", 4, "ngFor", "ngForOf"], [1, "width", "plus-icon", 3, "drop", "dragenter", "dragleave", "dragover", "id"], ["xmlns", "http://www.w3.org/2000/svg", "width", "13", "height", "12", "viewBox", "0 0 13 12", "fill", "none"], ["d", "M11.317 4.71429H7.39955V0.857143C7.39955 0.383839 7.00972 0 6.52902 0H5.65848C5.17778 0 4.78795 0.383839 4.78795 0.857143V4.71429H0.870536C0.389837 4.71429 0 5.09812 0 5.57143V6.42857C0 6.90188 0.389837 7.28571 0.870536 7.28571H4.78795V11.1429C4.78795 11.6162 5.17778 12 5.65848 12H6.52902C7.00972 12 7.39955 11.6162 7.39955 11.1429V7.28571H11.317C11.7977 7.28571 12.1875 6.90188 12.1875 6.42857V5.57143C12.1875 5.09812 11.7977 4.71429 11.317 4.71429Z", "fill", "#333333", "fill-opacity", "0.7"], [3, "click", "dragenter", "dragleave", "keydown", "id", "ngClass"], ["draggable", "true", 1, "drag-list-item", 3, "dragover", "dragstart", "dragend", "mouseenter", "mouseleave", "containerStyle", "dmo"], ["columnResize", "", 1, "columnrowBorder", "rightpadding", "colouredDiv", "selectionDiv", "row-colour", "row-hover-item-inner-div", 3, "click", "keydown", "onResize", "id", "ngClass", "rows", "rowIndex"], ["class", "empty-row ", 3, "mouseenter", "mouseleave", 4, "ngIf"], ["class", "list-dmo column-row-column-Border colouredDiv selectionDiv column-colour center-plus-icon box", 3, "ngStyle", "id", "ngClass", "click", "keydown", "drop", "dragover", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf"], [1, "empty-row", 3, "mouseenter", "mouseleave"], ["class", "row-hover-item", 3, "keydown", "click", 4, "ngIf"], [1, "row-hover-item", 3, "keydown", "click"], [1, "row-hover-item-menu"], [1, "row-hover-sub-item", 3, "click", "keydown"], [1, "", 3, "click", "keydown"], [1, "list-dmo", "column-row-column-Border", "colouredDiv", "selectionDiv", "column-colour", "center-plus-icon", "box", 3, "click", "keydown", "drop", "dragover", "mouseenter", "mouseleave", "ngStyle", "id", "ngClass"], ["class", "width plus-icon", 3, "id", "drop", "dragover", "dragenter", "dragleave", 4, "ngIf"], [3, "id", "active-container", "ngClass", "keydown", "click", "dragenter", "dragleave", 4, "ngFor", "ngForOf"], [1, "icon-wrapper-inner-row"], [1, "custom-icon-menu"], ["title", "Add new inner row above", 1, "custom-icon-button", 3, "click", "keydown"], ["fill", "#FFFFFF", "d", "M12 4l4 4h-3v4h-2V8H8l4-4zm-8 8h16v2H4v-2zm0 4h10v2H4v-2z"], ["title", "Add new inner row below", 1, "custom-icon-button", 3, "click", "keydown"], ["fill", "#FFFFFF", "d", "M4 10h10v2H4v-2zm0 4h16v2H4v-2zm8 6l-4-4h3v-4h2v4h3l-4 4z"], [3, "click", "keydown"], [1, "width", "plus-icon", 3, "drop", "dragover", "dragenter", "dragleave", "id"], [3, "keydown", "click", "dragenter", "dragleave", "id", "ngClass"], [1, "add-row-container"], [1, "add-row", 3, "click"], [1, "item-actions", "dmo-actions", "active"], ["ngbTooltip", "Add Row", 1, "item-action", 3, "click"], ["class", "item-action mr-0", "style", "color: rgb(187, 53, 53); margin-right: 10px", "ngbTooltip", "Data Model Objects", 3, "matMenuTriggerFor", "click", 4, "ngIf"], ["class", "item-action", "style", "color: rgb(187, 53, 53)", "ngbTooltip", "Remove Column", 3, "click", 4, "ngIf"], ["ngbTooltip", "Data Model Objects", 1, "item-action", "mr-0", 2, "color", "rgb(187, 53, 53)", "margin-right", "10px", 3, "click", "matMenuTriggerFor"], [1, "fa", "fa-ellipsis-v"], ["ngbTooltip", "Remove Column", 1, "item-action", 2, "color", "rgb(187, 53, 53)", 3, "click"], [1, "fa", "fa-trash-alt"], [1, "popup-div", "default-popup"], [1, "item-action", 3, "click", "ngbTooltip"], [3, "ngClass"], [1, "fas", "fa-th"], [1, "fas", "fa-tools"], [1, "popup-div", "group-popup"], ["class", "item-action", 3, "ngbTooltip", "click", 4, "ngIf"], [1, "far", "fa-trash-alt"], [1, "cdk-drag-placeholder"]], template: function DmogContainerComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275projectionDef();
        \u0275\u0275elementStart(0, "div", 4);
        \u0275\u0275listener("drop", function DmogContainerComponent_Template_div_drop_0_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.dropRow($event));
        })("dragover", function DmogContainerComponent_Template_div_dragover_0_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onDragOver($event));
        })("mouseenter", function DmogContainerComponent_Template_div_mouseenter_0_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.dmo.display = true);
        })("mouseleave", function DmogContainerComponent_Template_div_mouseleave_0_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.dmo.display = false);
        });
        \u0275\u0275elementStart(1, "div", 5);
        \u0275\u0275listener("click", function DmogContainerComponent_Template_div_click_1_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.ShowDmogSettings($event));
        })("keydown", function DmogContainerComponent_Template_div_keydown_1_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onKeyDown($event));
        })("mouseover", function DmogContainerComponent_Template_div_mouseover_1_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.hoveredRowIndex = ctx.data);
        })("mouseout", function DmogContainerComponent_Template_div_mouseout_1_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.hoveredRowIndex = null);
        })("focus", function DmogContainerComponent_Template_div_focus_1_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onFocus());
        })("blur", function DmogContainerComponent_Template_div_blur_1_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onBlur());
        });
        \u0275\u0275elementStart(2, "div", 6)(3, "label", 7);
        \u0275\u0275element(4, "i", 8);
        \u0275\u0275template(5, DmogContainerComponent_span_5_Template, 2, 0, "span", 9);
        \u0275\u0275text(6);
        \u0275\u0275elementEnd()();
        \u0275\u0275element(7, "div", 10);
        \u0275\u0275elementEnd();
        \u0275\u0275template(8, DmogContainerComponent_div_8_Template, 5, 5, "div", 11);
        \u0275\u0275projection(9);
        \u0275\u0275template(10, DmogContainerComponent_div_10_Template, 3, 0, "div", 12)(11, DmogContainerComponent_div_11_Template, 3, 0, "div", 12)(12, DmogContainerComponent_ng_template_12_Template, 1, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(14, DmogContainerComponent_div_14_Template, 7, 4, "div", 13)(15, DmogContainerComponent_div_15_Template, 6, 3, "div", 14);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "div")(17, "app-contextMenu", 15);
        \u0275\u0275listener("contextMenuSelected", function DmogContainerComponent_Template_app_contextMenu_contextMenuSelected_17_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.OperateContextMenu($event));
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "app-dmo-form-controls", 16);
        \u0275\u0275listener("formControlSelect", function DmogContainerComponent_Template_app_dmo_form_controls_formControlSelect_18_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.FormControlSelect($event));
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(19, "app-sharedmo-controls", 17);
        \u0275\u0275listener("shareDmoSelect", function DmogContainerComponent_Template_app_sharedmo_controls_shareDmoSelect_19_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.shareDmoSelect($event));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275template(20, DmogContainerComponent_ng_template_20_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
      }
      if (rf & 2) {
        \u0275\u0275classProp("show-default-popup", !ctx.readonly && ctx.data.Type !== "CardGroup")("show-group-popup", !ctx.readonly && ctx.data.Type === "CardGroup");
        \u0275\u0275propertyInterpolate("id", "main_" + ctx.title);
        \u0275\u0275property("ngClass", ctx.isContainerActive("main_" + ctx.title))("ngStyle", ctx.style);
        \u0275\u0275advance();
        \u0275\u0275property("ngStyle", ctx.headerStyle);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", ctx.readonly && ctx.mode !== "Published");
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.title, " ");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.rows);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", !ctx.readonly && ctx.data.Type != "CardGroup");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.readonly && ctx.data.Type == "CardGroup");
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", !ctx.readonly && ctx.data.Type !== "CardGroup");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.readonly && ctx.data.Type === "CardGroup");
        \u0275\u0275advance(2);
        \u0275\u0275property("object", ctx.contextMenuData)("showContextMenuFor", ctx.contextMenuData)("contextMenuPosition", ctx.contextMenuPosition)("readonly", ctx.readonly)("selectedDivId", ctx.selectedDivId)("isDmoExist", ctx.isDmoExist);
        \u0275\u0275advance();
        \u0275\u0275property("showContextMenuFor", ctx.contextMenuData)("contextMenuPosition", ctx.contextMenuPosition)("showContextMenu", ctx.showFormContextMenu);
        \u0275\u0275advance();
        \u0275\u0275property("showContextMenuFor", ctx.contextMenuData)("contextMenuPosition", ctx.contextMenuPosition)("showContextMenu", ctx.showSharedmoContextMenu)("shareDmoList", ctx.availableDmoToShare.components)("rows", ctx.rows);
      }
    }, dependencies: [NgClass, NgStyle, CdkDragHandle, NgIf, NgForOf, ResizeColumnsDirective, DmoComponent, NgbTooltip, MatMenuTrigger, ContextMenuComponent, DmoFormControlsComponent, ShareDmoComponent], styles: ["\n\n.rectangle[_ngcontent-%COMP%] {\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  width: 700px;\n  height: auto;\n  border: 1px solid transparent;\n  color: #121621;\n  min-width: 100px !important;\n  min-height: 100px !important;\n  box-sizing: border-box;\n}\n.rectangle[_ngcontent-%COMP%]:not(:hover):not(.selected) {\n  border-color: #121621;\n  border-style: dotted;\n}\n.rectangle[_ngcontent-%COMP%]:hover, \n.rectangle.selected[_ngcontent-%COMP%] {\n  border-color: #00ACE9 !important;\n  border-style: solid !important;\n}\n.popup-div[_ngcontent-%COMP%] {\n  position: absolute;\n  background-color: #005996 !important;\n  padding: 2.5px;\n  top: 0px !important;\n  left: 50%;\n  transform: translateX(-50px);\n  display: none;\n  white-space: nowrap;\n  border-radius: 5px 5px 0px 0px;\n  z-index: 99;\n}\n.row-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: stretch;\n  width: 100%;\n  border: 1px solid transparent;\n}\n.columnBorder[_ngcontent-%COMP%] {\n  height: auto;\n  min-height: 45px;\n  display: flex;\n  flex-direction: column;\n}\n.row[_ngcontent-%COMP%] {\n  margin-right: 3px !important;\n  margin-left: 3px !important;\n  margin-top: 10px !important;\n}\nmwlResizable[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n}\n.resize-handle-top[_ngcontent-%COMP%], \n.resize-handle-bottom[_ngcontent-%COMP%] {\n  position: absolute;\n  height: 5px;\n  cursor: row-resize;\n  background-color: #121621;\n  width: 20px;\n}\n.resize-handle-top[_ngcontent-%COMP%] {\n  top: 0;\n}\n.resize-handle-bottom[_ngcontent-%COMP%] {\n  bottom: 0;\n}\n.resize-handle-left[_ngcontent-%COMP%], \n.resize-handle-right[_ngcontent-%COMP%] {\n  cursor: col-resize;\n  width: 5px;\n  background-color: #121621;\n}\n.resize-handle-left[_ngcontent-%COMP%] {\n  left: 0;\n}\n.resize-handle-right[_ngcontent-%COMP%] {\n  right: 0;\n}\n.item-actions[_ngcontent-%COMP%] {\n  background-color: #FFFFFF;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  display: none;\n}\n.item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-actions.a[_ngcontent-%COMP%] {\n  color: rgb(0, 89, 150);\n}\n.panel-item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  margin-top: -1%;\n  display: none;\n}\n.panel-item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.panel-item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.column-item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  z-index: 999;\n  right: -10px;\n  top: -22px;\n  display: none;\n}\n.column-item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.column-item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 999999;\n  margin: 0 7px;\n  text-align: center;\n  color: #FFFFFF;\n  font-size: 14px;\n  position: relative;\n  cursor: pointer;\n}\n.resizers[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n}\n.resizers[_ngcontent-%COMP%]   .resizer[_ngcontent-%COMP%] {\n  width: 6px;\n  height: 6px;\n  border-radius: 1px;\n  background: white;\n  border: 1px solid #d50000;\n  position: absolute;\n}\n.resizers[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%] {\n  top: 0;\n  right: -3px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.resizers[_ngcontent-%COMP%]   .bottom[_ngcontent-%COMP%] {\n  bottom: -3px;\n  left: 0;\n  width: 100%;\n  cursor: ns-resize;\n}\n.resizers[_ngcontent-%COMP%]   .top[_ngcontent-%COMP%] {\n  top: -3px;\n  left: 0;\n  width: 100%;\n  cursor: ns-resize;\n}\n.resizers[_ngcontent-%COMP%]   .left[_ngcontent-%COMP%] {\n  top: 0;\n  left: -3px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.resizers[_ngcontent-%COMP%]   .bottom-right[_ngcontent-%COMP%] {\n  right: -3px;\n  bottom: -3px;\n  cursor: nwse-resize;\n}\n.resizers[_ngcontent-%COMP%]   .top-right[_ngcontent-%COMP%] {\n  right: -3px;\n  top: -3px;\n  cursor: nesw-resize;\n}\n.resizers[_ngcontent-%COMP%]   .top-left[_ngcontent-%COMP%] {\n  left: -3px;\n  top: -3px;\n  cursor: nwse-resize;\n}\n.resizers[_ngcontent-%COMP%]   .bottom-left[_ngcontent-%COMP%] {\n  left: -3px;\n  bottom: -3px;\n  cursor: nesw-resize;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px !important;\n  background-color: transparent !important;\n  padding: 7px !important;\n  cursor: pointer;\n}\n.data-model-objects-menu[_ngcontent-%COMP%], \n.mat-menu-panel[_ngcontent-%COMP%] {\n  height: 30% !important;\n}\n  .mat-menu-content {\n  padding-top: 0px !important;\n  padding-bottom: 0px !important;\n}\n.mat-menu-item[_ngcontent-%COMP%] {\n  line-height: 35px;\n  height: 35px;\n}\n.columnrowBorder[_ngcontent-%COMP%] {\n  border: 1px solid #e8e8e8;\n  width: 100%;\n  margin-bottom: 3px;\n  margin-top: 3px;\n  display: flex;\n  flex: 1;\n  align-items: stretch;\n  margin-top: 0px;\n}\n.column-row-column-Border[_ngcontent-%COMP%] {\n  border: 1px solid #d5cece;\n  min-height: 40px;\n  width: 100%;\n  display: flex;\n  align-items: stretch;\n}\n.item-actions-child[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  z-index: 2000;\n  position: relative;\n}\n.item-actions-child.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions-child.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action-child[_ngcontent-%COMP%] {\n  z-index: 2000;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.active-current[_ngcontent-%COMP%] {\n  background: #d50000;\n}\n.resizePanel[_ngcontent-%COMP%] {\n  resize: horizontal;\n}\n.row[_ngcontent-%COMP%] {\n  margin-top: 2px !important;\n}\n.width[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.list-dmo[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.rectangle[_ngcontent-%COMP%]:hover {\n  border: 2px solid #005996;\n  background-color: #F2FBFE;\n  display: block;\n}\n.rectangle.show-default-popup[_ngcontent-%COMP%]:hover   .default-popup[_ngcontent-%COMP%] {\n  display: block;\n}\n.rectangle.show-group-popup[_ngcontent-%COMP%]:hover   .group-popup[_ngcontent-%COMP%] {\n  display: block;\n}\n.default-popup[_ngcontent-%COMP%], \n.group-popup[_ngcontent-%COMP%] {\n  display: none;\n}\n.group-popup.active[_ngcontent-%COMP%], \n.default-popup.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.popup-div[_ngcontent-%COMP%], \n.elementor-editor-container-settings[_ngcontent-%COMP%], \n.elementor-editor-section-settings[_ngcontent-%COMP%] {\n  top: 0px;\n  left: 50%;\n  background-color: #005996 !important;\n  transform: translateX(-50%) translateY(-100%);\n  background-color: var(--e-p-border-section);\n  z-index: 99;\n}\n.elementor-editor-element-settings[_ngcontent-%COMP%] {\n  position: absolute;\n  display: flex;\n  height: 26px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  font-family: var(--e-a-font-family);\n  font-size: 13px;\n  font-weight: 400;\n  font-style: normal;\n  line-height: 1;\n  z-index: 1;\n  pointer-events: all;\n  transition: var(--e-a-transition-hover);\n}\n.elementor-screen-only[_ngcontent-%COMP%], \n.screen-reader-text[_ngcontent-%COMP%], \n.screen-reader-text[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], \n.ui-helper-hidden-accessible[_ngcontent-%COMP%] {\n  position: absolute;\n  top: -10000em;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.active-container-main[_ngcontent-%COMP%] {\n  border: 2px solid #00ACE9 !important;\n  background: rgba(0, 172, 233, 0.05);\n  box-shadow: inset 0 0 5px rgba(0, 81, 233, 0.3);\n}\n.active-container[_ngcontent-%COMP%] {\n  border: 2px solid #00ACE9 !important;\n  background: rgba(0, 172, 233, 0.05) !important;\n}\n.active-container-child[_ngcontent-%COMP%] {\n  border: 2px dashed #00ACE9 !important;\n  background: #F2FBFE !important;\n}\n.only-border[_ngcontent-%COMP%] {\n  border: 2px dotted;\n  border-color: #0957D0;\n  border-radius: 5px;\n}\n.empty-row[_ngcontent-%COMP%] {\n  border: 1px solid #e8e8e8;\n  min-height: 40px;\n  width: 100%;\n  display: flex;\n  flex: 1;\n  align-items: stretch;\n}\n.plus-icon[_ngcontent-%COMP%] {\n  text-align: center;\n  color: #d0cbcb;\n  fill: rgba(51, 51, 51, 0.7);\n}\n.center-plus-icon[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 0px;\n  margin-right: 0px;\n  height: 100% !important;\n}\n.word-break[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\n  word-break: break-all;\n}\n.row-hover-item-div[_ngcontent-%COMP%] {\n  position: relative;\n}\n.row-hover-item[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 0;\n  display: none;\n  padding: 0 6px;\n  background-color: rgb(0, 89, 150);\n  color: white;\n  width: 5px;\n  cursor: pointer;\n  z-index: 9999999;\n  height: 100%;\n}\n.row-hover-item-div[_ngcontent-%COMP%]:hover   .row-hover-item[_ngcontent-%COMP%] {\n  display: block;\n  left: 5px;\n  padding: 0px 6px;\n  width: 4px;\n}\n.row-hover-item-menu[_ngcontent-%COMP%] {\n  display: none;\n  position: absolute;\n  left: 0px;\n  bottom: 0;\n  padding: 5px 9px;\n  font-size: 14px;\n  border-radius: 6px;\n  text-wrap: nowrap;\n  background-color: rgb(0, 89, 150);\n  z-index: 9999;\n}\n.row-hover-item-menu[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.row-hover-item[_ngcontent-%COMP%]:hover   .row-hover-item-menu[_ngcontent-%COMP%] {\n  display: block;\n}\n.row-hover-child-item[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 0;\n  display: none;\n  padding: 0 6px;\n  background-color: rgb(0, 89, 150);\n  color: white;\n  width: 5px;\n  cursor: pointer;\n  z-index: 1;\n}\n.row-hover-item-div[_ngcontent-%COMP%]:hover   .row-hover-child-item[_ngcontent-%COMP%] {\n  display: block;\n  left: 5px;\n  padding: 0px 6px;\n  width: 4px;\n}\n.row-hover-item-menu[_ngcontent-%COMP%] {\n  display: none;\n  position: absolute;\n  left: 0px;\n  bottom: 0;\n  padding: 5px;\n  text-wrap: nowrap;\n  background-color: rgb(0, 89, 150);\n  z-index: 9999;\n}\n.row-hover-item-menu[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.row-hover-item[_ngcontent-%COMP%]:hover   .row-hover-item-menu[_ngcontent-%COMP%] {\n  display: block;\n}\n.border-hide[_ngcontent-%COMP%] {\n  border: none !important;\n}\n.resizable[_ngcontent-%COMP%] {\n  resize: horizontal;\n  overflow: auto;\n  min-width: 50px;\n  max-width: 100%;\n  height: fit-content;\n}\n.add-row-container[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n}\n.add-row[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  padding: 8px 12px;\n  background-color: #f8f9fa;\n  color: #212529;\n  border: 1px solid #ced4da;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 400;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n  width: 100px;\n  height: 30px;\n  margin: 10px;\n}\n.margtop[_ngcontent-%COMP%] {\n  margin-top: 8px !important;\n  margin-bottom: 8px !important;\n}\n.margbottom[_ngcontent-%COMP%] {\n  margin-bottom: 5px;\n}\n.card-group-inner-children[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  padding: 5px 0 0 15px;\n}\n.card-group-inner-children[_ngcontent-%COMP%]   .child-card[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  border-left: 3px solid #e0e0e0;\n}\n.dmog-title[_ngcontent-%COMP%] {\n  cursor: move;\n}\n.drag-icon[_ngcontent-%COMP%] {\n  margin-right: 8px;\n  color: gray;\n  visibility: hidden;\n}\n.dmog-title[_ngcontent-%COMP%]:hover   .drag-icon[_ngcontent-%COMP%] {\n  visibility: visible;\n}\n.box[_ngcontent-%COMP%] {\n  position: relative;\n  height: 100%;\n  box-sizing: border-box;\n}\n.resizer[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 1px;\n  height: 100%;\n  background-color: transparent;\n}\n.resizer[_ngcontent-%COMP%]:hover {\n  cursor: col-resize !important;\n  width: 3px;\n}\n.add-row-hover-item[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 0;\n  display: none;\n  padding: 0 6px;\n  background-color: rgb(0, 89, 150);\n  color: white;\n  width: 5px;\n  cursor: pointer;\n  z-index: 9999999;\n  height: -webkit-fill-available;\n}\n.add-row-hover-item-div[_ngcontent-%COMP%]:hover   .row-hover-item[_ngcontent-%COMP%] {\n  display: block;\n}\n.icon-wrapper[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  right: 1px !important;\n  height: 85%;\n  width: 14px !important;\n  display: none;\n  align-items: end;\n  justify-content: flex-end;\n  background-color: #d5d5d5;\n  border-radius: 0px 5px 5px 0px;\n  padding: 4px 2px 5px 1px !important;\n}\n.main-row-div[_ngcontent-%COMP%]:hover   .icon-wrapper[_ngcontent-%COMP%] {\n  display: block;\n}\n.icon-wrapper[_ngcontent-%COMP%]:hover {\n  z-index: 9999 !important;\n}\n.row-hover-item-inner-div[_ngcontent-%COMP%]:hover   .icon-wrapper-inner-row[_ngcontent-%COMP%] {\n  display: block;\n}\n.icon-wrapper-inner-row[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  right: -17px !important;\n  height: 100%;\n  width: 14px !important;\n  display: none;\n  align-items: end;\n  justify-content: flex-end;\n  background-color: #d5d5d5;\n  border-radius: 0px 5px 5px 0px;\n  padding: 4px 2px 5px 1px !important;\n}\n.icon-wrapper-inner-row[_ngcontent-%COMP%]:hover {\n  z-index: 999999 !important;\n}\n.custom-icon-menu-row[_ngcontent-%COMP%] {\n  position: absolute;\n  top: -30px;\n  right: 10px;\n  background-color: white;\n  border-radius: 6px;\n  padding: 2px 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  z-index: 2;\n  display: flex;\n  gap: 3px;\n}\n.custom-icon-menu[_ngcontent-%COMP%] {\n  position: absolute;\n  top: -30px;\n  right: 10px;\n  background-color: white;\n  border-radius: 6px;\n  padding: 2px 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  z-index: 2;\n  display: flex;\n  gap: 3px;\n}\n.custom-icon-button[_ngcontent-%COMP%] {\n  width: 26px;\n  height: 26px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  cursor: pointer;\n}\n/*# sourceMappingURL=dmog-container.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmogContainerComponent, { className: "DmogContainerComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\dmog-container\\dmog-container.component.ts", lineNumber: 33 });
})();

// src/app/admin/data-modeler1/directives/resizable-directive.directive.ts
var ResizableDirectiveDirective = class _ResizableDirectiveDirective {
  constructor(el) {
    this.el = el;
    this.resizableGrabWidth = 10;
    this.resizableMinWidth = 30;
    this.widthChanged = new EventEmitter();
    this.dragging = false;
    this.resizingFrom = null;
    this.startX = 0;
    this.startWidth = 0;
    this.startLeft = 0;
    const preventGlobalMouseEvents = () => document.body.style.pointerEvents = "none";
    const restoreGlobalMouseEvents = () => document.body.style.pointerEvents = "auto";
    const mouseMove = (evt) => {
      if (!this.dragging || !this.resizingFrom)
        return;
      const deltaX = evt.clientX - this.startX;
      const nativeEl = this.el.nativeElement;
      const parentEl = nativeEl.parentElement;
      let newWidth = this.startWidth;
      if (this.resizingFrom === "right") {
        newWidth += deltaX;
      } else if (this.resizingFrom === "left") {
        newWidth -= deltaX;
        const newLeft = this.startLeft + deltaX;
        if (newWidth >= this.resizableMinWidth && newLeft >= 0) {
          nativeEl.style.left = `${newLeft}px`;
        }
      }
      const parentWidth = parentEl.clientWidth;
      newWidth = Math.max(this.resizableMinWidth, Math.min(newWidth, parentWidth));
      const percentageWidth = newWidth / parentWidth * 100;
      nativeEl.style.width = `${percentageWidth}%`;
      evt.stopPropagation();
    };
    const mouseUp = (evt) => {
      if (!this.dragging)
        return;
      restoreGlobalMouseEvents();
      this.dragging = false;
      this.resizingFrom = null;
      const currentWidth = this.el.nativeElement.style.width;
      this.widthChanged.emit(currentWidth);
      evt.stopPropagation();
    };
    const mouseDown = (evt) => {
      const edge = this.inDragRegion(evt);
      if (edge) {
        this.dragging = true;
        this.resizingFrom = edge;
        this.startX = evt.clientX;
        this.startWidth = this.el.nativeElement.clientWidth;
        this.startLeft = this.el.nativeElement.offsetLeft;
        preventGlobalMouseEvents();
        evt.stopPropagation();
      }
    };
    const mouseMoveCursor = (evt) => {
      const edge = this.inDragRegion(evt);
      this.el.nativeElement.style.cursor = edge ? "col-resize" : "default";
    };
    document.addEventListener("mousemove", mouseMove, true);
    document.addEventListener("mouseup", mouseUp, true);
    this.el.nativeElement.addEventListener("mousedown", mouseDown, true);
    this.el.nativeElement.addEventListener("mousemove", mouseMoveCursor, true);
  }
  inDragRegion(evt) {
    const bounds = this.el.nativeElement.getBoundingClientRect();
    const offsetX = evt.clientX - bounds.left;
    if (offsetX < this.resizableGrabWidth) {
      return "left";
    } else if (offsetX > this.el.nativeElement.clientWidth - this.resizableGrabWidth) {
      return "right";
    }
    return null;
  }
  static {
    this.\u0275fac = function ResizableDirectiveDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ResizableDirectiveDirective)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({ type: _ResizableDirectiveDirective, selectors: [["", "appResizable", ""]], inputs: { resizableGrabWidth: "resizableGrabWidth", resizableMinWidth: "resizableMinWidth" }, outputs: { widthChanged: "widthChanged" }, standalone: true });
  }
};

// src/app/admin/data-modeler1/components1/dmog-form-view/dmog-form-view.component.ts
function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "app-dmog-container", 11);
    \u0275\u0275listener("widthChanged", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_widthChanged_1_listener($event) {
      const childDmog_r7 = \u0275\u0275restoreView(_r6).ngIf;
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onResizeDmog($event, childDmog_r7));
    })("tabRemove", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_tabRemove_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onTabRemove($event));
    })("tabEdit", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_tabEdit_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onTabEdit($event));
    })("OnBMOSave", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_OnBMOSave_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.OnBMOSave($event));
    })("onDmoEdit", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_onDmoEdit_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onDmoEdit($event));
    })("onDmoDelete", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_onDmoDelete_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onDmoDelete($event));
    })("openConditionPopup", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_openConditionPopup_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.openConditionPopup($event));
    })("openclonePopup", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_openclonePopup_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onDmoClone($event));
    })("reloadParent", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_reloadParent_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.reloadParent($event));
    })("dragDmoToAnotherdmog", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_dragDmoToAnotherdmog_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.dragDmoToAnotherdmog($event));
    })("OnAddDmogAbove", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_OnAddDmogAbove_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.AddDmog($event));
    })("dropDmoToAnotherdmog", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_dropDmoToAnotherdmog_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.dropDmoToAnotherdmog($event));
    })("sideNavModel", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_sideNavModel_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.getSideNavModel($event));
    })("SelectdItem", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_SelectdItem_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.SelectdItem($event));
    })("OnAddDmogInGroup", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_OnAddDmogInGroup_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.OnAddDmogInGroup($event));
    })("dragstart", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_dragstart_1_listener($event) {
      const childDmog_r7 = \u0275\u0275restoreView(_r6).ngIf;
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.OnChildDragStarted($event, childDmog_r7));
    })("dragend", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_dragend_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.OnChildDragEnded($event));
    })("dragover", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const childDmogId_r8 = \u0275\u0275nextContext().$implicit;
      const dmog_r3 = \u0275\u0275nextContext(3).ngIf;
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.OnChilddragHover(childDmogId_r8, $event, dmog_r3.GUID));
    })("mouseleave", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_mouseleave_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.globalMouse($event));
    })("drop", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_drop_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.handleChildDrop($event));
    })("mouseover", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_mouseover_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onMouseOver($event));
    })("mouseout", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_mouseout_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.onMouseOut($event));
    })("focus", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_focus_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.handleFocus($event));
    })("blur", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template_app_dmog_container_blur_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(6);
      return \u0275\u0275resetView(ctx_r3.handleBlur($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const childDmog_r7 = ctx.ngIf;
    const childDmogId_r8 = \u0275\u0275nextContext().$implicit;
    const ctx_r3 = \u0275\u0275nextContext(5);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate1("id", "resizeableComponent_", childDmogId_r8, "");
    \u0275\u0275property("resizableGrabWidth", 10)("isDrawerOpen", ctx_r3.isDrawerOpen)("ngStyle", ctx_r3.setChildStyle(childDmog_r7))("title", childDmog_r7.DisplayName)("data", childDmog_r7)("inputAllselectedBMO", ctx_r3.bm.selectedBMO.childrenMap)("readonly", ctx_r3.readonly)("active", childDmog_r7.id === (ctx_r3.bm.selectedDMOG == null ? null : ctx_r3.bm.selectedDMOG.id))("shared", ctx_r3.bm.selectedBMO.shared || childDmog_r7.shared)("UpdatedDataForContainer", ctx_r3.UpdatedData)("newlyCreatedConatiner", ctx_r3.newlyCreatedConatiner)("SharedDmosList", ctx_r3.SharedDmosList)("mode", ctx_r3.dmoMode)("IsDraggedBeing", ctx_r3.IsDraggedBeing)("isDraggingStart", ctx_r3.isDraggingStart)("UpdatedDataSideNavModel", ctx_r3.UpdatedDataSideNavModel);
  }
}
function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_ng_container_1_Template, 2, 18, "ng-container", 7);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const childDmogId_r8 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext(5);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.bm.selectedBMO.childrenMap[childDmogId_r8]);
  }
}
function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10);
    \u0275\u0275template(1, DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_ng_container_1_Template, 2, 1, "ng-container", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const dmog_r3 = \u0275\u0275nextContext(2).ngIf;
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r3.getChildrenForCardGroup(dmog_r3.DMOGID))("ngForTrackBy", ctx_r3.trackByDmogId);
  }
}
function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "app-dmog-container", 8);
    \u0275\u0275listener("widthChanged", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_widthChanged_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const dmog_r3 = \u0275\u0275nextContext().ngIf;
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.onResizeDmog($event, dmog_r3));
    })("tabRemove", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_tabRemove_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.onTabRemove($event));
    })("tabEdit", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_tabEdit_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.onTabEdit($event));
    })("OnBMOSave", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_OnBMOSave_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.OnBMOSave($event));
    })("onDmoEdit", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_onDmoEdit_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.onDmoEdit($event));
    })("onDmoDelete", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_onDmoDelete_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.onDmoDelete($event));
    })("openConditionPopup", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_openConditionPopup_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.openConditionPopup($event));
    })("openclonePopup", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_openclonePopup_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.onDmoClone($event));
    })("reloadParent", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_reloadParent_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.reloadParent($event));
    })("dragDmoToAnotherdmog", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_dragDmoToAnotherdmog_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.dragDmoToAnotherdmog($event));
    })("OnAddDmogAbove", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_OnAddDmogAbove_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.AddDmog($event));
    })("dropDmoToAnotherdmog", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_dropDmoToAnotherdmog_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.dropDmoToAnotherdmog($event));
    })("sideNavModel", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_sideNavModel_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.getSideNavModel($event));
    })("SelectdItem", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_SelectdItem_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.SelectdItem($event));
    })("OnAddDmogInGroup", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_OnAddDmogInGroup_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.OnAddDmogInGroup($event));
    })("dragstart", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_dragstart_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const dmog_r3 = \u0275\u0275nextContext().ngIf;
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.OnDragStarted($event, dmog_r3));
    })("dragend", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_dragend_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.dragEnded($event));
    })("dragover", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const dmog_r3 = \u0275\u0275nextContext().ngIf;
      const dmogId_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.dragHover(dmogId_r5, $event, dmog_r3.GUID));
    })("drop", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_drop_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.handleContainerDrop($event));
    })("mouseover", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_mouseover_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.onMouseOver($event));
    })("mouseout", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_mouseout_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.onMouseOut($event));
    })("DraggingItemsModel", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_DraggingItemsModel_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.DraggingItemsModel($event));
    })("focus", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_focus_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.handleFocus($event));
    })("blur", function DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template_app_dmog_container_blur_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3.handleBlur($event));
    });
    \u0275\u0275template(2, DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_div_2_Template, 2, 2, "div", 9);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const dmog_r3 = \u0275\u0275nextContext().ngIf;
    const dmogId_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate1("id", "resizeableComponent_", dmogId_r5, "");
    \u0275\u0275property("resizableGrabWidth", 10)("isDrawerOpen", ctx_r3.isDrawerOpen)("ngStyle", ctx_r3.setStyle(dmog_r3))("title", dmog_r3.DisplayName)("data", dmog_r3)("inputAllselectedBMO", ctx_r3.bm.selectedBMO.childrenMap)("readonly", ctx_r3.readonly)("active", dmog_r3.id === (ctx_r3.bm.selectedDMOG == null ? null : ctx_r3.bm.selectedDMOG.id))("shared", ctx_r3.bm.selectedBMO.shared || dmog_r3.shared)("UpdatedDataForContainer", ctx_r3.UpdatedData)("newlyCreatedConatiner", ctx_r3.newlyCreatedConatiner)("SharedDmosList", ctx_r3.SharedDmosList)("mode", ctx_r3.dmoMode)("draggable", !(ctx_r3.isChildDragging || ctx_r3.isInnerDragging || ctx_r3.readonly || ctx_r3.dmoMode === "Published"))("hasChildren", ctx_r3.getChildrenForCardGroup(dmog_r3.DMOGID).length > 0)("isDraggingStart", ctx_r3.isDraggingStart)("UpdatedDataSideNavModel", ctx_r3.UpdatedDataSideNavModel);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.getChildrenForCardGroup(dmog_r3.DMOGID).length > 0);
  }
}
function DmogFormViewComponent_ng_container_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmogFormViewComponent_ng_container_6_ng_container_1_ng_container_1_Template, 3, 20, "ng-container", 7);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const dmog_r3 = ctx.ngIf;
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.shouldShowAsMainCard(dmog_r3));
  }
}
function DmogFormViewComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DmogFormViewComponent_ng_container_6_ng_container_1_Template, 2, 1, "ng-container", 7);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const dmogId_r5 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.bm.selectedBMO.childrenMap[dmogId_r5]);
  }
}
function DmogFormViewComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 12)(1, "div", 13);
    \u0275\u0275listener("click", function DmogFormViewComponent_div_7_Template_div_click_1_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.AddDmog());
    })("contextmenu", function DmogFormViewComponent_div_7_Template_div_contextmenu_1_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onRightClick($event));
    })("keydown", function DmogFormViewComponent_div_7_Template_div_keydown_1_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handleKeyDown($event));
    });
    \u0275\u0275elementStart(2, "div", 14)(3, "div", 15)(4, "p", 16);
    \u0275\u0275text(5, "Left-click to add a new card");
    \u0275\u0275elementEnd()()()()();
  }
}
function DmogFormViewComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 12)(1, "div", 17);
    \u0275\u0275listener("click", function DmogFormViewComponent_div_8_Template_div_click_1_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.AddDmogGroup());
    })("keydown", function DmogFormViewComponent_div_8_Template_div_keydown_1_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handleKeyDown($event));
    });
    \u0275\u0275elementStart(2, "div", 14)(3, "div", 18)(4, "p", 16);
    \u0275\u0275text(5, "Left-click to add Card Group");
    \u0275\u0275elementEnd()()()()();
  }
}
function DmogFormViewComponent_ng_template_9_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "a", 23);
    \u0275\u0275listener("click", function DmogFormViewComponent_ng_template_9_ng_container_0_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r12);
      const item_r13 = \u0275\u0275nextContext().item;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onDmoDelete(item_r13));
    });
    \u0275\u0275element(2, "i", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 25);
    \u0275\u0275listener("click", function DmogFormViewComponent_ng_template_9_ng_container_0_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r12);
      const item_r13 = \u0275\u0275nextContext().item;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onDmoClone(item_r13));
    });
    \u0275\u0275element(4, "i", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
}
function DmogFormViewComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275template(0, DmogFormViewComponent_ng_template_9_ng_container_0_Template, 5, 0, "ng-container", 7);
    \u0275\u0275elementStart(1, "a", 19);
    \u0275\u0275listener("click", function DmogFormViewComponent_ng_template_9_Template_a_click_1_listener() {
      const item_r13 = \u0275\u0275restoreView(_r11).item;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.openConditionPopup(item_r13));
    });
    \u0275\u0275element(2, "i", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 21);
    \u0275\u0275listener("click", function DmogFormViewComponent_ng_template_9_Template_a_click_3_listener() {
      const item_r13 = \u0275\u0275restoreView(_r11).item;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onDmoEdit(item_r13));
    });
    \u0275\u0275element(4, "i", 22);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("ngIf", !ctx_r3.readonly);
  }
}
var DmogFormViewComponent = class _DmogFormViewComponent {
  //public bm: classes.BM;
  set dmog(dmog) {
    this._dmog = dmog;
  }
  get dmog() {
    return this._dmog;
  }
  set readonly(readonly) {
    this._readonly = readonly;
  }
  get readonly() {
    return this._readonly;
  }
  constructor(dmApi, msg, toast, dm, dataProvider, route, apiService, cdref) {
    this.dmApi = dmApi;
    this.msg = msg;
    this.toast = toast;
    this.dm = dm;
    this.dataProvider = dataProvider;
    this.route = route;
    this.apiService = apiService;
    this.cdref = cdref;
    this.scrolling = false;
    this.SCROLL_THRESHOLD = 160;
    this.SCROLL_SPEED = 3;
    this.draggedItemId = null;
    this.targetItemId = null;
    this.isInnerDragging = false;
    this.IsDroppedOnEmptyArea = false;
    this.IsDroppedOnCard = false;
    this.IsDropppedOnGroup = false;
    this.isChildDragging = false;
    this.IsNotDraggingCradAndGroups = false;
    this.isDraggingStart = false;
    this.DraggingStatus = new EventEmitter();
    this.sideNavModelEmitter = new EventEmitter();
    this.isDrawerOpenEmitter = new EventEmitter();
    this.updatedbmo = new EventEmitter();
    this.updatedbmEmitter = new EventEmitter();
    this.SharedDmosList = [];
    this.isDrawerOpen = false;
    this.saveDmog = new Subject();
    this.componentActive = true;
    this.IsJsonStaticGridDmo = false;
    this.showContainer = true;
    this.formsControls = Object.values(DMOS2).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));
    this.panelControls = Object.values(DMOSLayout);
    this._readonly = false;
    this.rows = [];
    this.isResizing = false;
    this.resizingId = null;
    this.startX = 0;
    this.startWidth = 0;
    this.grabber = false;
    this.scrollSpeed = 0;
    this.customorderDmogItem = [];
    this.animationFrameId = null;
    this.dataProvider.getNewlyBmog().subscribe((data) => {
      this.onDropLayout(data);
    });
    this.dataProvider.getreloadParent().subscribe((data) => {
      this.reloadParent();
    });
    this.dataProvider.getSidebarclose().subscribe((data) => {
      if (data) {
        this.isDrawerOpen = false;
      }
    });
    this.dataProvider.getOpenSidebarNav().subscribe((data) => {
      console.log(data);
      this.sideNavModel = data;
      this.isDrawerOpen = true;
      this.isDrawerOpen = true;
    });
  }
  ngOnInit() {
    this.processChildren();
  }
  ngAfterContentChecked() {
    this.cdref.detectChanges();
  }
  ngOnChanges(changes) {
    if (changes.selectedBMO?.currentValue && changes.selectedBMO.currentValue !== changes.selectedBMO.previousValue) {
      this.bm.selectedBMO.Children = changes.selectedBMO.currentValue.Children;
      this.bm._selectedBMO = changes.selectedBMO.currentValue;
      this.processChildren();
    }
    if (changes.sideNavModel && changes.sideNavModel.currentValue == null) {
      this.isDrawerOpen = false;
    }
    this.sideNavModelEmitter.emit(this.sideNavModel);
    this.isDrawerOpenEmitter.emit(this.isDrawerOpen);
    if (this.UpdatedDataFromSideNav) {
      this.UpdatedData = this.UpdatedDataFromSideNav;
    }
  }
  onKeyDown($event) {
    return;
  }
  processChildren() {
    this.customorderDmogItem = [];
    const orderDmogItem = [];
    const childrenKeys = this.bm?.selectedBMO?.Children || [];
    const childrenMap = this.bm?.selectedBMO?.childrenMap || {};
    for (const childKey of childrenKeys) {
      const dmog = childrenMap[childKey];
      if (dmog) {
        orderDmogItem.push({
          lnkDmogId: dmog.LnkBmoDmogID,
          Guids: dmog.GUID,
          hasParent: !!dmog.PrntDmogIDs,
          DisplayName: dmog.DisplayName
        });
      }
    }
    orderDmogItem.sort((a, b) => {
      if (a.hasParent !== b.hasParent) {
        return a.hasParent ? 1 : -1;
      }
      return a.lnkDmogId - b.lnkDmogId;
    });
    this.customorderDmogItem = orderDmogItem.map((item) => item.Guids);
    this.updatedbmEmitter.emit(this.bm);
  }
  onMouseOver(event) {
    const target = event.target;
    if (target.closest(".child-card")) {
      this.hideAllPopups();
      const card = target.closest(".child-card");
      const cardPopup = card.querySelector(".default-popup");
      if (cardPopup) {
        cardPopup.style.display = "block";
      }
      return;
    }
    if (target.closest(".show-group-popup")) {
      this.hideAllPopups();
      const group = target.closest(".show-group-popup");
      const groupPopup = group.querySelector(".group-popup");
      if (groupPopup) {
        groupPopup.style.display = "block";
      }
    }
    if (target.closest(".show-default-popup")) {
      this.hideAllPopups();
      const group = target.closest(".show-default-popup");
      const groupPopup = group.querySelector(".default-popup");
      if (groupPopup) {
        groupPopup.style.display = "block";
      }
    }
  }
  onMouseOut(event) {
    const relatedTarget = event.relatedTarget;
    const currentTarget = event.currentTarget;
    if (currentTarget.contains(relatedTarget)) {
      return;
    }
    if (currentTarget.classList.contains("show-group-popup") || currentTarget.classList.contains("child-card")) {
      this.hideAllPopups();
    }
  }
  hideAllPopups() {
    document.querySelectorAll(".group-popup, .default-popup").forEach((el) => {
      el.style.display = "none";
    });
  }
  drop(event) {
    this.cdref.detectChanges();
    console.log("Previous Index:", event.previousIndex);
    console.log("Current Index:", event.currentIndex);
    const items = this.bm.selectedBMO.Children;
    if (event.previousIndex === event.currentIndex) {
      return;
    }
    moveItemInArray(items, event.previousIndex, event.currentIndex);
    this.bm.selectedBMO.Children = [...items];
    this.cdref.detectChanges();
  }
  dragEndedWithTarget(event, targetDmogId) {
    const draggedDmogId = event.source.data;
    const items = [...this.bm.selectedBMO.Children];
    const draggedIndex = items.findIndex((id) => id === draggedDmogId);
    const targetIndex = items.findIndex((id) => id === targetDmogId);
    if (draggedIndex === -1 || targetIndex === -1)
      return;
    items.splice(draggedIndex, 1);
    items.splice(targetIndex, 0, draggedDmogId);
    this.bm.selectedBMO.Children = items;
    this.cdref.detectChanges();
  }
  dragMoved(event) {
    const scrollContainer = document.querySelector(".form-view");
    if (!(scrollContainer instanceof HTMLElement))
      return;
    const containerRect = scrollContainer.getBoundingClientRect();
    const mouseY = event.clientY;
    const threshold = 100;
    const distanceFromTop = mouseY - containerRect.top;
    const distanceFromBottom = containerRect.bottom - mouseY;
    let newScrollSpeed = 0;
    if (distanceFromTop < threshold) {
      newScrollSpeed = -Math.max(10, (threshold - distanceFromTop) / 2);
    } else if (distanceFromBottom < threshold) {
      newScrollSpeed = Math.max(10, (threshold - distanceFromBottom) / 2);
    }
    if (this.scrollSpeed !== newScrollSpeed) {
      this.stopScrolling();
      this.scrollSpeed = newScrollSpeed;
      if (this.scrollSpeed !== 0) {
        this.startScrolling(scrollContainer);
      }
    }
  }
  startScrolling(container, speed) {
    const scroll = () => {
      container.scrollTop += this.scrollSpeed;
      this.animationFrameId = requestAnimationFrame(scroll);
    };
    this.animationFrameId = requestAnimationFrame(scroll);
  }
  stopScrolling() {
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    this.scrollSpeed = 0;
  }
  onDragOver(event) {
    event.preventDefault();
    event.stopPropagation();
    const scrollContainer = document.querySelector(".form-view");
    if (!(scrollContainer instanceof HTMLElement))
      return;
    const containerRect = scrollContainer.getBoundingClientRect();
    const mouseY = event.clientY;
    const distanceFromTop = mouseY - containerRect.top;
    const distanceFromBottom = containerRect.bottom - mouseY;
    const threshold = 160;
    scrollContainer.classList.remove("scroll-top", "scroll-bottom");
    this.stopScrolling();
    if (distanceFromTop < threshold) {
      scrollContainer.classList.add("scroll-top");
      this.startScrolling(scrollContainer, -8);
    } else if (distanceFromBottom < threshold) {
      scrollContainer.classList.add("scroll-bottom");
      this.startScrolling(scrollContainer, 8);
    }
  }
  OnDragStarted(event, dmog) {
    this.closeSideBarAndMenusWhileDragging();
    this.isDrawerOpen = false;
    this.isDraggingStart = true;
    this.DraggingStatus.emit(this.isDraggingStart);
    if (dmog.PrntDmogIDs) {
      event.preventDefault();
      return;
    }
    let model = {
      type: "CardGroup",
      Guid: dmog.GUID,
      PrntDmogIDs: dmog.PrntDmogIDs
    };
    event.dataTransfer.setData("cardGroupDmog", JSON.stringify(model));
    this.draggedItemId = dmog.GUID;
    event.stopPropagation();
  }
  OnChildDragStarted(event, dmog) {
    this.isDraggingStart = true;
    this.DraggingStatus.emit(this.isDraggingStart);
    if (this.readonly || this.dmoMode === "Published") {
      event.preventDefault();
      return;
    }
    this.closeSideBarAndMenusWhileDragging();
    this.isDrawerOpen = false;
    if (!dmog.PrntDmogIDs) {
      event.preventDefault();
      return;
    }
    let model = {
      type: "CardGroup",
      Guid: dmog.GUID,
      PrntDmogIDs: dmog.PrntDmogIDs
    };
    event.dataTransfer.setData("cardGroupDmog", JSON.stringify(model));
    this.draggedItemId = dmog.GUID;
    event.stopPropagation();
  }
  handleContainerDrop(event) {
    event.preventDefault();
  }
  handleChildDrop(event) {
    event.preventDefault();
  }
  DraggingItemsModel(event) {
    if (event) {
      this.draggedItemId = event.model.Guid;
    }
  }
  closeSideBarAndMenusWhileDragging() {
    document.querySelectorAll(".popup-div").forEach((popup) => {
      if (popup instanceof HTMLElement) {
        popup.style.display = "none";
      }
    });
    document.querySelectorAll(".contextMenuContainer").forEach((popup) => {
      if (popup instanceof HTMLElement) {
        popup.style.display = "none";
      }
    });
  }
  dragEnded(event) {
    this.isDraggingStart = false;
    this.DraggingStatus.emit(this.isDraggingStart);
    const scrollContainer = document.querySelector(".form-view");
    if (scrollContainer instanceof HTMLElement) {
      scrollContainer.classList.remove("scroll-top", "scroll-bottom");
    }
    const mouseX = event.clientX;
    const mouseY = event.clientY;
    const elementsAtPoint = document.elementsFromPoint(mouseX, mouseY);
    const droppedOnCard = elementsAtPoint.some((el) => el.id?.startsWith("resizeableComponent_"));
    const droppedOnCardGroup = elementsAtPoint.some((el) => el.classList.contains("card-group-inner-children"));
    const droppedOnEmptyArea = !droppedOnCard && !droppedOnCardGroup;
    const cardElement = elementsAtPoint.find((el) => el.id?.startsWith("resizeableComponent_"));
    if (cardElement) {
      const dmogId = cardElement.id.replace("resizeableComponent_", "");
      console.log("Dropped on specific card with ID:", dmogId);
      const DmogType = this.bm.selectedBMO.childrenMap[dmogId].Type;
      if (DmogType === "CardGroup") {
        this.IsDropppedOnGroup = true;
      } else if (DmogType === "Normal") {
        this.IsDroppedOnCard = true;
      }
    }
    if (droppedOnEmptyArea) {
      this.IsDroppedOnEmptyArea = true;
    }
    if (this.draggedItemId && this.targetItemId) {
      const isMovingToGroup = !!this.targetParentGroupId;
      this.moveItem(this.draggedItemId, this.targetItemId, this.targetParentGroupId, isMovingToGroup);
    }
    event.dataTransfer.clearData("cardGroupDmog");
    this.draggedItemId = null;
    this.targetItemId = null;
    this.targetParentGroupId = null;
    this.dragStartPrntDmogIDs = null;
    this.IsDroppedOnCard = false;
    this.IsDropppedOnGroup = false;
    this.IsDroppedOnEmptyArea = false;
    this.stopScrolling();
  }
  OnChildDragEnded(event) {
    this.isDraggingStart = false;
    this.DraggingStatus.emit(this.isDraggingStart);
    const scrollContainer = document.querySelector(".form-view");
    if (scrollContainer) {
      scrollContainer.classList.remove("scroll-top", "scroll-bottom");
    }
    this.isChildDragging = false;
    const mouseX = event.clientX;
    const mouseY = event.clientY;
    const elementsAtPoint = document.elementsFromPoint(mouseX, mouseY);
    const droppedOnCard = elementsAtPoint.some((el) => el.id?.startsWith("resizeableComponent_"));
    const droppedOnCardGroup = elementsAtPoint.some((el) => el.classList.contains("card-group-inner-children"));
    const droppedOnEmptyArea = !droppedOnCard && !droppedOnCardGroup;
    const cardElement = elementsAtPoint.find((el) => el.id?.startsWith("resizeableComponent_"));
    if (cardElement && cardElement != void 0) {
      const dmogId = cardElement.id.replace("resizeableComponent_", "");
      console.log("Dropped on specific card with ID:", dmogId);
      const DmogType = this.bm.selectedBMO.childrenMap[dmogId].Type;
      if (DmogType === "CardGroup") {
        this.IsDropppedOnGroup = true;
      }
      if (DmogType === "Normal") {
        this.IsDroppedOnCard = true;
      }
    }
    if (droppedOnEmptyArea) {
      this.IsDroppedOnEmptyArea = true;
    }
    if (this.draggedItemId && this.targetItemId) {
      const isMovingToGroup = !!this.targetParentGroupId;
      this.moveItem(this.draggedItemId, this.targetItemId, this.targetParentGroupId, isMovingToGroup);
    }
    event.dataTransfer.clearData("cardGroupDmog");
    this.draggedItemId = null;
    this.targetItemId = null;
    this.targetParentGroupId = null;
    this.dragStartPrntDmogIDs = null;
    this.IsDroppedOnCard = false;
    this.IsDropppedOnGroup = false;
    this.IsDroppedOnEmptyArea = false;
    this.stopScrolling();
  }
  dragHover(dmogId, event, parentGroupId) {
    this.closeSideBarAndMenusWhileDragging();
    event.preventDefault();
    event.stopPropagation();
    if (this.draggedItemId && this.draggedItemId !== dmogId) {
      this.targetItemId = dmogId;
      this.targetParentGroupId = parentGroupId || null;
    }
    this.dragMoved(event);
  }
  OnChilddragHover(dmogId, event, parentGroupId) {
    this.closeSideBarAndMenusWhileDragging();
    event.preventDefault();
    event.stopPropagation();
    if (this.draggedItemId && this.draggedItemId !== dmogId) {
      this.targetItemId = dmogId;
      this.targetParentGroupId = parentGroupId || null;
    }
    this.applyHoverEffect(dmogId);
    this.dragMoved(event);
  }
  applyHoverEffect(dmogId) {
    const element = document.getElementById(dmogId);
    if (element) {
      element.classList.add("hover-effect");
    }
  }
  globalMouse(event) {
    event.stopPropagation();
    if (this.draggedItemId) {
      let currentElement = event.srcElement;
      console.log("globalMouseLeave", currentElement);
    }
  }
  OnDropMainPanel(event) {
    if (event) {
      if (this.draggedItemId && this.targetItemId) {
        const isMovingToGroup = !!this.targetParentGroupId;
        this.moveItem(this.draggedItemId, this.targetItemId, this.targetParentGroupId, isMovingToGroup);
      }
    }
  }
  OnDropOverMainPanel(event) {
    event.preventDefault();
    event.stopPropagation();
  }
  moveItem(sourceId, targetId, targetParentGroupId, isMovingToGroup) {
    const items = this.reorderItems(sourceId, targetId);
    this.bm.selectedBMO.Children = items;
    const dmogIds = this.collectDmogIds();
    const shared = this.createSharedData(dmogIds);
    this.processChildren();
    if (shared) {
      this.saveReorderDmogs(shared);
    }
    this.handleItemMove(sourceId, targetParentGroupId, isMovingToGroup);
    this.cdref.detectChanges();
  }
  reorderItems(sourceId, targetId) {
    const items = [...this.customorderDmogItem];
    const sourceIndex = items.findIndex((id) => id === sourceId);
    const targetIndex = items.findIndex((id) => id === targetId);
    if (sourceIndex === -1 || targetIndex === -1 || sourceIndex === targetIndex) {
      return items;
    }
    const [movedItem] = items.splice(sourceIndex, 1);
    const insertIndex = targetIndex;
    items.splice(insertIndex, 0, movedItem);
    this.customorderDmogItem = items;
    return items;
  }
  collectDmogIds() {
    const data = this.bm._selectedBMO;
    const dmogIds = [];
    this.customorderDmogItem.forEach((element) => {
      Object.values(data.childrenMap).forEach((bmog) => {
        if (bmog.GUID === element) {
          dmogIds.push(bmog.DMOGID);
        }
      });
    });
    return dmogIds;
  }
  createSharedData(dmogIds) {
    return {
      bmoid: this.bm._selectedBMO.BMOID,
      dmogIds: dmogIds.join(",")
    };
  }
  saveReorderDmogs(shared) {
    this.dmApi.saveReorderDmogs(shared.bmoid.toString(), shared.dmogIds).subscribe({
      next: (response) => {
        if (response) {
          this.getBM();
          this.cdref.detectChanges();
        }
      },
      error: (error) => {
        console.error("Reorder HTTP Error:", error);
      }
    });
  }
  handleItemMove(sourceId, targetParentGroupId, isMovingToGroup) {
    if (sourceId && this.bm.selectedBMO.childrenMap[sourceId]) {
      const getdmogId = this.bm.selectedBMO.childrenMap[sourceId].DMOGID;
      const getdmogType = this.bm.selectedBMO.childrenMap[sourceId].Type;
      if (getdmogType !== "CardGroup") {
        const dmog = this.bm.selectedBMO.childrenMap[targetParentGroupId];
        if (dmog && targetParentGroupId) {
          this.moveLogic(getdmogId, isMovingToGroup, dmog, targetParentGroupId);
        }
      }
    }
  }
  moveLogic(getdmogId, isMovingToGroup, dmog, targetParentGroupId) {
    if (this.IsDroppedOnCard || this.IsDropppedOnGroup) {
      if (dmog.Type === "CardGroup") {
        isMovingToGroup = true;
        const movePayloadList = [{
          dmogId: getdmogId,
          prntDmogId: isMovingToGroup ? dmog.DMOGID.toString() : "123",
          isAdded: true
        }];
        const model = this.createMoveModel(movePayloadList);
        this.UpdateGrouping(model, targetParentGroupId, getdmogId, dmog.DMOGID.toString());
      } else {
        const movePayloadList = [{
          dmogId: getdmogId,
          prntDmogId: "123",
          isAdded: false
        }];
        const model = this.createMoveModel(movePayloadList);
        this.UpdateGrouping(model, targetParentGroupId, getdmogId, "");
      }
    } else {
      const movePayloadList = [{
        dmogId: getdmogId,
        prntDmogId: "123",
        isAdded: false
      }];
      const model = this.createMoveModel(movePayloadList);
      this.UpdateGrouping(model, targetParentGroupId, getdmogId, "");
    }
  }
  createMoveModel(movePayloadList) {
    return {
      DmogIds: movePayloadList.map((item) => item.dmogId).join(","),
      IsAdded: movePayloadList.map((item) => item.isAdded ? "true" : "false").join(","),
      PrntDmogIds: movePayloadList.map((item) => item.prntDmogId ?? "NULL").join(","),
      Orders: "1"
    };
  }
  UpdateGrouping(model, dmogId, sourceId, pgId) {
    let dmogP = this.bm.selectedBMO.childrenMap[sourceId];
    if (dmogP) {
      this.bm.selectedBMO.childrenMap[sourceId].PrntDmogIDs = pgId.toString();
      this.cdref.detectChanges();
    }
    this.dmApi.saveupdatePrntDmogIDs(model).subscribe({
      next: (response) => {
        if (response) {
          this.getBM();
        }
        this.cdref.detectChanges();
        console.log("Move Success:", response);
      },
      error: (error) => {
        console.error("Move HTTP Error:", error);
      }
    });
  }
  startScrolling1(element, direction) {
    if (this.scrolling) {
      return;
    }
    this.scrolling = true;
    this.scrollingInterval = setInterval(() => {
      if (element) {
        element.scrollTop += direction * this.SCROLL_SPEED;
      }
    }, 16);
  }
  stopScrolling1() {
    if (this.scrollingInterval) {
      clearInterval(this.scrollingInterval);
      this.scrollingInterval = null;
    }
    this.scrolling = false;
  }
  handleScrollIndicator(event, scrollContainer) {
    if (!scrollContainer)
      return;
    const containerRect = scrollContainer.getBoundingClientRect();
    const mouseY = event.clientY;
    const distanceFromTop = mouseY - containerRect.top;
    const distanceFromBottom = containerRect.bottom - mouseY;
    scrollContainer.classList.remove("scroll-top", "scroll-bottom");
    if (distanceFromTop < this.SCROLL_THRESHOLD) {
      scrollContainer.classList.add("scroll-top");
      this.startScrolling(scrollContainer, -1);
    } else if (distanceFromBottom < this.SCROLL_THRESHOLD) {
      scrollContainer.classList.add("scroll-bottom");
      this.startScrolling(scrollContainer, 1);
    } else {
      this.stopScrolling();
    }
  }
  trackByDmogId(index, dmogId) {
    return dmogId;
  }
  SelectdItem(event) {
    if (event.SelectdItem) {
      this.selectedItemFromchild = event.SelectdItem;
    }
  }
  setStyle(data) {
    if (data && data.DMOGProps) {
      let panelMainContainer = JSON.parse(data.DMOGProps);
      let width = panelMainContainer.width;
      if (!width) {
        width = 100 - 0.3;
      }
      return {
        width: `${width - 0.3}%`
      };
    }
    return {
      width: `${100 - 0.3}%`
    };
  }
  setResizeDiv(data) {
    if (data && data.DMOGProps) {
      let panelMainContainer = JSON.parse(data.DMOGProps);
      let width = panelMainContainer.width;
      if (!width) {
        width = 100;
      }
      return {
        width: `${width}%`
      };
    }
    return {
      width: `${100}%`
    };
  }
  GetAvailableDmoToShare() {
    if (!this.bm?._selectedBMOG?.BMOGID || !this.bm?.BMId) {
      return;
    }
    this.dmApi.GetAvailableDmoToShare(this.bm._selectedBMOG.BMOGID, this.bm.BMId).subscribe((x) => {
      this.SharedDmosList = x.components;
    });
  }
  //Resizing Logic start 
  saveWidth(event, id) {
    const targetedElement = event.target;
    if (targetedElement.classList.contains("resizableinnerdiv")) {
      if (this.tempid == id) {
        let looped = document.getElementById("resizeableComponent_" + id);
        if (!this.tempWidthforpix) {
          this.tempWidthforpix = looped.clientWidth;
          this.SaveWidthWidth(id, this.tempWidthforpercent);
        }
        if (this.tempWidthforpix != looped.clientWidth) {
          this.tempWidthforpix = looped.clientWidth;
          this.SaveWidthWidth(id, this.tempWidthforpercent);
        }
      }
    }
  }
  getWidthInPercentage(event, id) {
    event.stopPropagation();
    let looped = document.getElementById("resizeableComponent_" + id);
    this.tempid = id;
    const parentWidth = looped.parentElement?.clientWidth || window.innerWidth;
    const divWidth = looped.clientWidth;
    let width = Math.floor(divWidth / parentWidth * 100);
    if (!this.tempWidthforpercent) {
      this.tempWidthforpercent = width;
    }
    if (width != this.tempWidthforpercent) {
      this.tempWidthforpercent = width;
    }
  }
  SaveWidthWidth(id, width) {
    console.log(width);
    if (width > 100 || width < 0)
      width = 100;
    if (this.bm.selectedBMO.childrenMap[id]) {
      const data = this.bm.selectedBMO.childrenMap[id];
      this.panelMainContainer = JSON.parse(data.DMOGProps);
      if (this.panelMainContainer) {
        this.panelMainContainer.width = width;
      }
      var model = {};
      model = {
        "DMOGID": data.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
      const url = `wfapibm/DataModel/SaveDmogProps`;
      this.apiService.postgateway("", url, model).subscribe((r) => {
        data.DMOGProps = JSON.stringify(this.panelMainContainer);
        setTimeout(() => {
          this.setUpdatedWidth(width);
          this.UpdatedData = data;
        }, 200);
      }, (error) => {
        console.log(error);
      });
    }
  }
  setUpdatedWidth(width) {
    this.dataProvider.setUpdatedContainerWidth(width);
  }
  //Resizing Logic End
  onSaveDmog() {
    const message = "Don't close the window while saving";
    const title = "Save in progress";
    this.saveDmog.pipe(takeWhile((_) => this.componentActive), switchMap((_) => {
      let activeToast = this.toast.findDuplicate(title, message, true, false);
      if (activeToast) {
        this.toast.remove(activeToast.toastId);
      }
      activeToast = this.toast.info(message, title, {
        timeOut: 1e4,
        tapToDismiss: false
      });
      return this.dmApi.saveObject(this.dmog.unreference(), this.dmog.root, true).pipe(catchError((_2) => of(false)), finalize(() => this.toast.remove(activeToast.toastId)));
    })).subscribe();
  }
  onDrop(e) {
    return __async(this, null, function* () {
      if (this.IsJsonStaticGridDmo) {
        this.toast.warning("More than one json static grid not allowed.", "Warning");
        return;
      }
      const from2 = e.previousContainer;
      const to = e.container;
      const fromIdx = e.previousIndex;
      const toIdx = e.currentIndex;
      if (from2.id === "form-controls") {
        const uiData = from2.data[fromIdx];
        const res = yield this.getDmoDetails(uiData);
        if (!res) {
          return;
        }
        transferArrayItem([res], to.data, 0, toIdx);
        const dmoId = yield this.saveDmoDetails(res);
        if (!dmoId) {
          to.data = to.data.filter((dmo) => dmo.dmoName !== res.dmoName);
        }
        res.dmoId = +dmoId;
        this.dmApi.reorderChildren(this.dmog).subscribe(() => this.dm.getBM());
        return;
      } else if (from2.id !== to.id) {
        transferArrayItem(from2.data, to.data, fromIdx, toIdx);
      } else {
        if (from2.id === to.id && fromIdx === toIdx)
          return;
        moveItemInArray(from2.data, fromIdx, toIdx);
      }
      this.dmApi.reorderChildren(this.dmog).subscribe();
    });
  }
  OnBMOSave(data) {
    return __async(this, null, function* () {
      if (this.IsJsonStaticGridDmo) {
        this.toast.warning("More than one json static grid not allowed.", "Warning");
        return;
      }
      this._dmog = data.data;
      const uiData = data.type;
      const res = yield this.getDmoDetails(uiData);
      if (!res) {
        return;
      }
      const dmoId = yield this.saveDmoDetails(res, data);
      if (dmoId && dmoId != "false") {
        this.dataProvider.setDmoStates(dmoId);
        this.dm.getBM();
      }
      return;
    });
  }
  dragDmoToAnotherdmog(data) {
    this.dmoToAnotherdmog = data;
    this.isInnerDragging = data.InnerDragging;
  }
  dropDmoToAnotherdmog(data) {
    if (this.dmoToAnotherdmog && this.dmoToAnotherdmog.dmogId != data.dmogId) {
      this.dataProvider.setMoveDmo({ "prevdmogId": this.dmoToAnotherdmog.dmogId, "dmogId": data.dmogId, "targetId": data.targetId, "dmoguid": this.dmoToAnotherdmog.dmoguid });
    }
  }
  onDmoEdit(emitData) {
    return __async(this, null, function* () {
      let data = emitData.dmo;
      let dmog = emitData.dmog;
      const uiData = DMOS2[data.type];
      const res = yield this.getDmoDetails(uiData, data, dmog);
      if (res) {
        const dmoId = yield this.saveDmoDetails(res, dmog, true);
        if (dmoId) {
          res.dmoId = +dmoId;
          this.toast.success("Data was saved successfully", "Success");
          this.dm.getBM();
        } else {
          this.toast.warning("Data was not saved", "Warning");
        }
      }
    });
  }
  onDmoClone(emitData) {
    return __async(this, null, function* () {
      let data = emitData.dmo;
      let dmog = emitData.dmog;
      this.dmog.findDmoAndThen(data.dmoName, (info) => __async(this, null, function* () {
        const cloned = dmog.childrenMap[data.dmoName].clone();
        const newComponents = cloned.asObject();
        const uiData = DMOS2[data.type];
        const res = yield this.getDmoDetails(uiData, cloned, dmog);
        if (!res) {
          return;
        }
        const dmoId = yield this.saveDmoDetails(res, dmog, null, true);
        if (dmoId) {
          res.dmoId = +dmoId;
          this.dataProvider.setDmoStates(dmoId);
          this.dm.getBM();
          this.toast.success("Data was saved successfully", "Success");
          this.cdref.detectChanges();
        } else {
          this.toast.warning("Data was not saved", "Warning");
        }
      }));
    });
  }
  onDmoClone_new(event) {
    let data;
    if (event) {
      data = event.dmo;
    }
    this.dmog.findDmoAndThen(data.dmoName, (info) => {
      if (!info)
        return;
      const { rowIndex: r, columnIndex: c, dmoIndex: d } = info;
      const rows = this.dmog.formData.components;
      const col = rows[r];
      const cloned = this.dmog.childrenMap[data.dmoName].clone();
      this.dmog.addChild(cloned);
    });
  }
  onDmoDelete(emitData) {
    let data = emitData.dmo;
    let dmog = emitData.dmog;
    let dmoguid = emitData.dmoguid;
    const modal = this.msg.showMessage("Warning", {
      header: "Unshare DMO",
      body: `Are you sure you want to Unshare ${emitData?.dmo?.dmoName}?`,
      btnText: "Unshare",
      checkboxText: "Yes, Unshare this object",
      isDelete: true,
      undoable: true,
      isNewDesign: true,
      callback: () => {
        this.dmApi.unshareDmo(data?.dmoId?.toString(), dmog.DMOGID?.toString()).subscribe((success) => {
          if (success) {
            this.dataProvider.setDeleteDmo({ "dmogId": dmog?.GUID, "dmoguid": dmoguid });
            setTimeout(() => {
              this.dm.getBM();
            }, 200);
            this.cdref.detectChanges();
          }
        });
      }
    });
  }
  getDmoDetails(_0) {
    return __async(this, arguments, function* (uiData, data = {}, currentDmog) {
      const newObject = Object.keys(data).length === 0 || data.fromApi === false;
      const modal = this.msg.showComponent(DmoDetailComponent, {
        newObject,
        data,
        uiData,
        parent: currentDmog ?? this._dmog,
        readonly: this.readonly
      });
      return yield modal.result;
    });
  }
  formClick() {
    this.dataProvider.setHideContextMenu(false);
  }
  saveDmoDetails(res, selectedDmog, isEdit, iscloned) {
    return __async(this, null, function* () {
      try {
        let url = `wfapibm/DataModel/saveDmoforNewDM`;
        let data;
        if (isEdit) {
          data = selectedDmog;
        } else {
          data = selectedDmog.data;
        }
        if (iscloned) {
          data = selectedDmog;
        }
        let dmog = {
          "DMOGProps": data.DMOGProps,
          "id": data.DMOGID,
          "ProcessName": data.root.ProcessName,
          "Version": data.Version
        };
        let model = { "dmo": res, "dmog": dmog };
        return yield this.apiService.postgateway("", url, model, null).toPromise();
      } catch (error) {
        console.log(error);
      }
      return false;
    });
  }
  replaceDmo(info, replaceWith) {
    if (!info)
      return;
    const { rowIndex: r, columnIndex: c, dmoIndex: d } = info;
    const rows = this.dmog.formData.components;
    let newComponents = rows[r].columns[c].components.slice();
    if (replaceWith === null) {
      newComponents = newComponents.filter((dmo) => dmo.dmoName !== info.dmo.dmoName);
      this.dmog.removeChild(info.dmo.dmoName);
    } else {
      newComponents[d] = replaceWith;
      this.dmog.addChild(new DMComponent(replaceWith, this.dmog));
    }
    rows[r].columns[c].components = newComponents;
  }
  openConditionPopup(emitData, event) {
    return __async(this, null, function* () {
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      let item = emitData.dmo;
      this._dmog = emitData.dmog;
      const uiData = this.formsControls.find((c) => c.type === item.type);
      const parent = this._dmog.childrenMap[item.dmoName];
      const modal = this.msg.showComponent(DmoConditionComponent, {
        uiData,
        parent,
        readonly: this.readonly,
        currentDmog: this._dmog
      });
      const res = yield modal.result;
      if (!res) {
        return;
      }
      const { payload, deletedConditions } = res;
      this.dmApi.saveDmoCondition(payload).subscribe((success) => {
        if (success) {
          const deleteCondition = (id) => this.dmApi.deleteDmoCondition(id).pipe(filter((success2) => success2), map((_) => id));
          const actualDeletingConditions = (0, import_lodash3.intersectionBy)(parent.conditions, deletedConditions, "Id");
          from(actualDeletingConditions.map((c) => deleteCondition(c.Id))).pipe(mergeAll(), finalize(() => parent.conditions = payload.dmoCondition[parent.guid].Condition)).subscribe();
        }
      });
    });
  }
  ngOnDestroy() {
    this.componentActive = false;
  }
  // ****************Layout
  reloadParent() {
    this.getBM();
  }
  onRightClick(event) {
    event.preventDefault();
    this.AddDmog();
  }
  handleKeyDown(event) {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      this.AddDmog();
    }
  }
  AddDmog(onAddAbove) {
    this.rows = [];
    let column = [];
    column.push({ "colIndex": 0, "dmoguid": [], "width": 99.5, "rows": [] });
    let letNextRow = {
      rowIndex: 0,
      columns: column
    };
    this.rows.push(letNextRow);
    this.panelMainContainer = {
      width: 100,
      rows: this.rows
    };
    this.getObjectDetails(this.selectedBMO).then((res) => {
      if (res != null) {
        this.rows = [];
      }
    });
    return;
  }
  onDropLayout(e) {
    return __async(this, null, function* () {
      const from2 = e.previousContainer;
      const to = e.container;
      const fromIdx = e.previousIndex;
      const toIdx = e.currentIndex;
      if (from2.id === "form-controls") {
        let column = [];
        column.push({ "colIndex": 0, "dmoguid": [], "width": 99.5, "rows": [] });
        let letNextRow = {
          rowIndex: 0,
          columns: column
        };
        this.rows.push(letNextRow);
        this.panelMainContainer = {
          width: 100,
          rows: this.rows
        };
        this.getObjectDetails(this.selectedBMO).then((res) => {
          if (res != null) {
            this.rows = [];
          }
        });
        return;
      }
    });
  }
  OnAddDmogInGroup(event) {
    this.rows = [];
    let column = [];
    column.push({ "colIndex": 0, "dmoguid": [], "width": 99.5, "rows": [] });
    let letNextRow = { rowIndex: 0, columns: column };
    this.rows.push(letNextRow);
    this.panelMainContainer = {
      width: 100,
      rows: this.rows
    };
    this.getObjectDetails(this.selectedBMO, void 0, event.data.DMOGID).then((res) => {
      if (res != null) {
        this.rows = [];
      }
    });
  }
  AddDmogGroup(onAddAbove) {
    this.panelMainContainer = {
      width: 100,
      rows: []
    };
    this.getObjectDetailsForGroup(this.selectedBMO).then((res) => {
      if (res != null) {
        this.rows = [];
      }
    });
  }
  saveObjectDetails(parent, obj = {}, payload, finalize2) {
    const newObject = Object.keys(obj).length === 0;
    const original = __spreadValues({}, obj);
    if (newObject) {
      const { childClass } = this.determineClassAndComponent(parent);
      const child = new childClass(payload, parent);
      parent.addChild(child);
    } else {
      obj.update(payload);
    }
    const rollback = () => {
      if (newObject) {
        parent.removeChild(payload.id);
      } else {
        obj.update(original);
      }
    };
    let existbm = this.bm;
    if (!existbm?._selectedBMO?.Children?.includes(payload.id)) {
      existbm?._selectedBMO?.Children?.push(payload.id);
    }
    this.dmApi.saveObject(payload, this.bm).pipe(switchMap((id) => {
      if (finalize2) {
        return finalize2(id).pipe(map(() => id));
      }
      return of(id);
    })).subscribe({
      next: (success) => {
        if (!success)
          rollback();
        else {
          this.bm.cacheObjectId(payload);
        }
      },
      error: (_) => rollback(),
      complete: () => this.getBM()
    });
  }
  getBM() {
    const { ProcessName, Name, Version } = this.route.snapshot.data?.bm;
    this.dmApi.getData(ProcessName, Name, Version).subscribe((bm) => {
      this.bm = bm;
      setTimeout(() => {
        this.processChildren();
      }, 300);
    });
  }
  determineClassAndComponent(parent, data = {}) {
    let component;
    let childClass;
    if (parent instanceof BM) {
      component = BmogDetailComponent;
      childClass = BMOG;
    } else if (parent instanceof BMOG) {
      component = BmoDetailComponent;
      childClass = BMO;
    } else if (parent instanceof BMO) {
      component = DmogDetailComponent;
      childClass = DMOG;
    } else if (parent === void 0 && data instanceof BM) {
      component = BmDetailComponent;
      childClass = void 0;
    }
    return { component, childClass };
  }
  setPanelStyle(obj) {
    return {
      position: "fixed",
      left: `${obj.left}px`,
      top: `${obj.top}px`,
      width: `${obj.width}px`,
      height: `${obj.height}px`
    };
  }
  // Working for BMOG/BMO/DMOG in DataModeler1
  onTabRemove(tab) {
    const obj = tab.data;
    let className = this.getClassName(obj);
    let message;
    switch (className) {
      case "Card Group":
        message = "Yes, delete this card group";
        break;
      case "Card":
        message = "Yes, Unshare this card";
        break;
      default:
        message = "Yes, delete this object";
        break;
    }
    const isCard = className === "Card";
    const name = obj?.DisplayName || obj.Name;
    const btnText = className === "Card" ? "Unshare" : "Delete";
    this.msg.showMessage("Warning", {
      header: `${btnText} ${className}`,
      body: `Are you sure you want to ${btnText.toLowerCase()} ${name}?`,
      btnText: `${btnText}`,
      checkboxText: message,
      isNewDesign: true,
      isDelete: true,
      undoable: isCard,
      callback: () => this.deleteObject(obj)
    });
  }
  getClassName(obj) {
    if (obj instanceof BM) {
      return "BM";
    } else if (obj instanceof BMOG) {
      return "View";
    } else if (obj instanceof BMO) {
      return "Section";
    } else if (obj instanceof DMOG) {
      return obj.Type == "CardGroup" ? "Card Group" : "Card";
    }
    return "";
  }
  onTabEdit(tab) {
    if (tab.data.DMOGProps) {
      this.panelMainContainer = JSON.parse(tab.data.DMOGProps);
    }
    this.openObjectDetails(tab.data);
  }
  openObjectDetails(obj) {
    this.getObjectDetails(obj.parent, obj);
  }
  // keep it
  getObjectDetails(_0) {
    return __async(this, arguments, function* (parent, data = {}, parentGroupId) {
      const newObject = Object.keys(data).length === 0;
      const { component } = this.determineClassAndComponent(parent, data);
      const modal = this.msg.showComponent(component, { data, parent, newObject });
      const res = yield modal.result;
      if (!res)
        return;
      if (this.isCardGroupType(res))
        return;
      if (this.isTopLevelBM(parent, data)) {
        this.saveBMDetails(res);
        return;
      }
      const payload = this.preparePayload(parent, res, parentGroupId);
      const saveShared = this.getSaveSharedFunction(parent, res, newObject);
      if (saveShared) {
        this.saveObjectDetails(parent, data, payload, saveShared);
        if (parent instanceof BMO && res.payload?.GUID) {
          this.newlyCreatedConatiner = res.payload.GUID;
        }
      } else {
        this.saveObjectDetails(parent, data, res);
      }
    });
  }
  isCardGroupType(res) {
    if (res.Type === "CardGroup") {
      this.handleCardGroup(res);
      return true;
    }
    return false;
  }
  isTopLevelBM(parent, data) {
    return parent === void 0 && data instanceof BM;
  }
  preparePayload(parent, res, parentGroupId) {
    const payload = res.payload ?? {};
    if (parent instanceof BMO && this) {
      payload.DMOGProps = JSON.stringify(this.panelMainContainer);
      if (parentGroupId) {
        payload.PrntDmogIDs = parentGroupId;
      }
    }
    return payload;
  }
  getSaveSharedFunction(parent, res, newObject) {
    if (parent instanceof BM) {
      return (id) => {
        if (res.shared.bmoIds === "-1" && !newObject)
          return EMPTY;
        return this.dmApi.saveSharedBmos(res.shared.bmogId || id, res.shared.bmoIds);
      };
    }
    if (parent instanceof BMOG) {
      return (id) => {
        if (res.shared.dmogIds === "-1" && !newObject)
          return EMPTY;
        return this.dmApi.saveSharedDmogs(res.shared.bmoId || id, res.shared.dmogIds);
      };
    }
    if (parent instanceof BMO) {
      return (_) => {
        if (res.shared.leftDMOGuids === "-1" && res.shared.rightDMOGuids === "-1" && !newObject)
          return EMPTY;
        return this.dmApi.saveSharedDmos(res.shared);
      };
    }
    return null;
  }
  handleCardGroup(res) {
    const dmogP = this.bm.selectedBMO.childrenMap[res.model.Name];
    if (dmogP) {
      this.bm.selectedBMO.childrenMap[res.model.Name].DisplayName = res.model.DisplayName;
      this.cdref.detectChanges();
    }
    this.saveDmogGrouping(res.model);
  }
  saveDmogGrouping(model) {
    this.dmApi.saveupdatePrntDmogIDs(model).subscribe((response) => {
      if (response) {
        this.getBM();
      }
    });
  }
  shouldShowAsMainCard(dmog) {
    if (!dmog)
      return false;
    return !dmog.PrntDmogIDs || dmog.PrntDmogIDs === "" || typeof dmog.PrntDmogIDs === "undefined";
  }
  // Get all children for a CardGroup
  getChildrenForCardGroup(parentDmogId) {
    if (!parentDmogId)
      return [];
    const parentIdStr = parentDmogId.toString();
    const children = [];
    this.bm.selectedBMO.Children.forEach((dmogId) => {
      const dmog = this.bm.selectedBMO.childrenMap[dmogId];
      if (!dmog)
        return;
      if (dmog.PrntDmogIDs) {
        const parentIds = dmog.PrntDmogIDs.toString().split(",").map((id) => id.trim());
        if (parentIds.includes(parentIdStr)) {
          children.push(dmogId);
        }
      }
    });
    return children;
  }
  // Set  styling for child cards
  setChildStyle(dmog) {
    const baseStyle = this.setStyle(dmog);
    return __spreadProps(__spreadValues({}, baseStyle), {
      marginLeft: "20px",
      borderLeft: "3px solid #e0e0e0",
      paddingLeft: "10px"
    });
  }
  loadgroupChild(Children, groupId) {
    let filter2 = Children.filter((a) => a.PrntDmogIDs.includes(groupId.toString()));
    return filter2;
  }
  removeGroupChild(Children) {
    let filter2 = Children.filter((a) => a.PrntDmogIDs == null || a.PrntDmogIDs == void 0);
    return filter2;
  }
  isGroupNameExists(name) {
    if (!this.bm?.childrenMap) {
      return false;
    }
    const normalizedName = name.trim().toLowerCase();
    return this.bm.selectedBMO.Children.some((dmogId) => {
      const dmog = this.bm.selectedBMO.childrenMap[dmogId];
      if (!dmog?.Type || !dmog?.DisplayName)
        return false;
      const existingName = dmog.DisplayName.trim().toLowerCase();
      return dmog.Type === "CardGroup" && existingName === normalizedName;
    });
  }
  getUniqueGroupName() {
    const baseName = "Card Group";
    let count = 1;
    const existingNames = /* @__PURE__ */ new Set();
    if (this.bm?.Children && this.bm?.childrenMap) {
      this.bm.Children.forEach((childId) => {
        const child = this.bm.childrenMap[childId];
        this.collectCardGroupNamesRecursive(child, existingNames);
      });
    }
    let groupName = `${baseName} ${count}`;
    while (existingNames.has(groupName.toLowerCase())) {
      count++;
      groupName = `${baseName} ${count}`;
    }
    return groupName;
  }
  collectCardGroupNamesRecursive(node, nameSet) {
    if (!node || typeof node !== "object")
      return;
    if (node.Type === "CardGroup" && typeof node.DisplayName === "string") {
      nameSet.add(node.DisplayName.trim().toLowerCase());
    }
    if (Array.isArray(node.Children) && node.childrenMap) {
      node.Children.forEach((childId) => {
        const childNode = node.childrenMap[childId];
        this.collectCardGroupNamesRecursive(childNode, nameSet);
      });
    }
  }
  getObjectDetailsForGroup(_0) {
    return __async(this, arguments, function* (parent, data = {}) {
      const groupName = this.getUniqueGroupName();
      const uniqueGUID = `group${Date.now().toString(36)}`;
      let payload = {
        Parent: parent.id.toString(),
        DMOGID: void 0,
        id: uniqueGUID,
        GUID: uniqueGUID,
        LnkBmoDmogID: null,
        Type: DMOGType.CardGroup,
        Status: "1",
        DefCollapsed: "0",
        IsCollapsed: "0",
        IsHidden: "0",
        showHelp: "0",
        Roles: [],
        Share: [],
        Children: [],
        DisplayName: groupName,
        LongDesc: DMOGType.CardGroup,
        Name: uniqueGUID,
        Version: parent.Version,
        DMOGProps: void 0,
        PrntDmogIDs: void 0
      };
      if (parent instanceof BMO) {
        if (this) {
          payload.DMOGProps = JSON.stringify(this.panelMainContainer);
        }
        this.saveObjectDetails(parent, data, payload);
        if (payload.GUID) {
          this.newlyCreatedConatiner = payload.GUID;
        }
      }
    });
  }
  saveBMDetails(payload) {
    this.dmApi.saveBM(payload).subscribe((success) => {
      if (success) {
        this.bm.update(payload);
      }
    });
  }
  deleteObject(obj) {
    const parent = obj.parent;
    const idx = parent.Children.findIndex((id) => id === obj.id);
    parent.removeChild(obj.id);
    const rollback = () => parent.addChildAt(obj, idx);
    this.dmApi.deleteObject(obj, this.bm).subscribe({
      next: (success) => !success ? rollback() : this.getBM(),
      error: (_) => rollback()
    });
  }
  toggleDrawer() {
    this.isDrawerOpen = !this.isDrawerOpen;
  }
  getSideNavModel(data) {
    this.sideNavModel = data;
    this.isDrawerOpen = true;
    this.sideNavModelEmitter.emit(this.sideNavModel);
    this.isDrawerOpenEmitter.emit(this.isDrawerOpen);
  }
  GetUpdatedDataForSidepanle(event) {
    if (event) {
      this.UpdatedData = event;
    }
  }
  // Add this method to handle drag movement
  onGlobalDragEnd(event) {
    const scrollContainer = document.querySelector(".form-view");
    if (scrollContainer) {
      scrollContainer.classList.remove("scroll-top", "scroll-bottom");
    }
    this.stopScrolling();
  }
  onResizeDmog(width, selectedDmog) {
    const newWidth = Number(Math.max(0, Math.min(100, parseFloat(width ?? "0"))).toFixed(2));
    if (!selectedDmog?.DMOGProps)
      return;
    this.panelMainContainer = JSON.parse(selectedDmog.DMOGProps) || {};
    this.panelMainContainer.width = newWidth;
    const model = {
      DMOGID: selectedDmog.DMOGID,
      DMOGProps: JSON.stringify(this.panelMainContainer)
    };
    this.apiService.postgateway("", `wfapibm/DataModel/SaveDmogProps`, model).subscribe(() => {
      let model2 = {
        type: "dmog",
        dmog: selectedDmog,
        data: this.panelMainContainer
      };
      this.sideNavModel = model2;
      this.sideNavModelEmitter.emit(this.sideNavModel);
      this.isDrawerOpenEmitter.emit(this.isDrawerOpen);
      this.UpdatedDataSideNavModel = model2;
      this.cdref.detectChanges();
    });
  }
  static {
    this.\u0275fac = function DmogFormViewComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmogFormViewComponent)(\u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(MessageService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(DataModeler1Component), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(ApiService), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmogFormViewComponent, selectors: [["app-dmog-form-view"]], hostBindings: function DmogFormViewComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("dragend", function DmogFormViewComponent_dragend_HostBindingHandler($event) {
          return ctx.onGlobalDragEnd($event);
        }, false, \u0275\u0275resolveDocument);
      }
    }, inputs: { SideNavModelData: "SideNavModelData", dmoMode: "dmoMode", dmog: "dmog", readonly: "readonly", bmo: "bmo", selectedBMO: "selectedBMO", bm: "bm", UpdatedDataFromSideNav: "UpdatedDataFromSideNav" }, outputs: { DraggingStatus: "DraggingStatus", sideNavModelEmitter: "sideNavModelEmitter", isDrawerOpenEmitter: "isDrawerOpenEmitter", updatedbmo: "updatedbmo", updatedbmEmitter: "updatedbmEmitter" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 11, vars: 4, consts: [["itemActions", ""], [1, "form-view", "row", 3, "click", "drop", "dropover", "keydown"], [2, "width", "100%"], [1, "d-flex", "flex-wrap", "main-contanier"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "mainWrap", 4, "ngIf"], ["class", "mainWrap ", 4, "ngIf"], [4, "ngIf"], ["appResizable", "", 1, "Parent-card", 3, "widthChanged", "tabRemove", "tabEdit", "OnBMOSave", "onDmoEdit", "onDmoDelete", "openConditionPopup", "openclonePopup", "reloadParent", "dragDmoToAnotherdmog", "OnAddDmogAbove", "dropDmoToAnotherdmog", "sideNavModel", "SelectdItem", "OnAddDmogInGroup", "dragstart", "dragend", "dragover", "drop", "mouseover", "mouseout", "DraggingItemsModel", "focus", "blur", "resizableGrabWidth", "isDrawerOpen", "ngStyle", "title", "data", "inputAllselectedBMO", "id", "readonly", "active", "shared", "UpdatedDataForContainer", "newlyCreatedConatiner", "SharedDmosList", "mode", "draggable", "hasChildren", "isDraggingStart", "UpdatedDataSideNavModel"], ["class", "d-flex flex-wrap card-group-inner-children", 4, "ngIf"], [1, "d-flex", "flex-wrap", "card-group-inner-children"], ["appResizable", "", "draggable", "true", 1, "child-card", 3, "widthChanged", "tabRemove", "tabEdit", "OnBMOSave", "onDmoEdit", "onDmoDelete", "openConditionPopup", "openclonePopup", "reloadParent", "dragDmoToAnotherdmog", "OnAddDmogAbove", "dropDmoToAnotherdmog", "sideNavModel", "SelectdItem", "OnAddDmogInGroup", "dragstart", "dragend", "dragover", "mouseleave", "drop", "mouseover", "mouseout", "focus", "blur", "resizableGrabWidth", "isDrawerOpen", "ngStyle", "title", "data", "inputAllselectedBMO", "id", "readonly", "active", "shared", "UpdatedDataForContainer", "newlyCreatedConatiner", "SharedDmosList", "mode", "IsDraggedBeing", "isDraggingStart", "UpdatedDataSideNavModel"], [1, "mainWrap"], [1, "d-flex", "flex-column", "align-items-center", "gap-3", "mb-5", "mt-5", "add-section", 3, "click", "contextmenu", "keydown"], [1, "d-flex", "flex-column", "p-4", "min-vh-25", "w-100", 2, "border", "1px dashed #A9A9A9"], ["ngbTooltip", "Add new card", 1, "d-flex", "flex-column", "w-100", "align-items-center", "gap-3"], [1, "add-container-content"], [1, "d-flex", "flex-column", "align-items-center", "gap-3", "add-section", 3, "click", "keydown"], ["ngbTooltip", "Add new card Group", 1, "d-flex", "flex-column", "w-100", "align-items-center", "gap-3"], ["ngbTooltip", "Conditions", 1, "item-action", 3, "click"], [1, "fa", "fa-cogs"], ["ngbTooltip", "Edit", 1, "item-action", 3, "click"], [1, "fa", "fa-wrench"], ["ngbTooltip", "Remove", 1, "item-action", 2, "color", "rgb(187, 53, 53)", 3, "click"], [1, "fa", "fa-trash-alt"], ["ngbTooltip", "Clone", 1, "item-action", 3, "click"], [1, "fa", "fa-copy"]], template: function DmogFormViewComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275listener("click", function DmogFormViewComponent_Template_div_click_0_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.formClick());
        })("drop", function DmogFormViewComponent_Template_div_drop_0_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.OnDropMainPanel($event));
        })("dropover", function DmogFormViewComponent_Template_div_dropover_0_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.OnDropOverMainPanel($event));
        })("keydown", function DmogFormViewComponent_Template_div_keydown_0_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onKeyDown($event));
        });
        \u0275\u0275elementStart(1, "div", 2)(2, "div");
        \u0275\u0275element(3, "div");
        \u0275\u0275elementStart(4, "div")(5, "div", 3);
        \u0275\u0275template(6, DmogFormViewComponent_ng_container_6_Template, 2, 1, "ng-container", 4)(7, DmogFormViewComponent_div_7_Template, 6, 0, "div", 5)(8, DmogFormViewComponent_div_8_Template, 6, 0, "div", 6);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275template(9, DmogFormViewComponent_ng_template_9_Template, 5, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
      }
      if (rf & 2) {
        \u0275\u0275advance(6);
        \u0275\u0275property("ngForOf", ctx.customorderDmogItem)("ngForTrackBy", ctx.trackByDmogId);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.readonly);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.readonly);
      }
    }, dependencies: [
      NgForOf,
      NgIf,
      DmogContainerComponent,
      ResizableDirectiveDirective,
      NgStyle,
      NgbTooltip
    ], styles: ['\n\n.form-view[_ngcontent-%COMP%] {\n  position: relative;\n  height: 68vh;\n  overflow: auto;\n}\n.form-view.scroll-top[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background:\n    linear-gradient(\n      to bottom,\n      rgba(0, 89, 150, 0.8),\n      transparent);\n  z-index: 1000;\n  pointer-events: none;\n}\n.form-view.scroll-bottom[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background:\n    linear-gradient(\n      to top,\n      rgba(0, 89, 150, 0.8),\n      transparent);\n  z-index: 1000;\n  pointer-events: none;\n}\n.leftlayout[_ngcontent-%COMP%] {\n  height: 30px;\n  border: 1px solid #ddd;\n  margin-left: 7px;\n  padding: 4px;\n  font-size: 13px;\n  margin-right: 7px;\n}\n.leftlayoutdmotyp[_ngcontent-%COMP%] {\n  height: 415px;\n  border: 1px solid #ddd;\n  margin-right: 5px;\n  padding: 6px;\n  font-size: 15px;\n}\n.leftlayout1[_ngcontent-%COMP%] {\n  height: 30px;\n  border-bottom: 1px solid #ddd;\n  font-size: 13px;\n}\n.formcomponents[_ngcontent-%COMP%] {\n  overflow-y: auto;\n  max-height: 358px;\n  overflow-x: hidden;\n}\ndiv.scroll-list[_ngcontent-%COMP%] {\n  overflow: auto;\n  max-height: 70vh;\n}\n.close[_ngcontent-%COMP%] {\n  color: white;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n.close[_ngcontent-%COMP%]:hover, \n.close[_ngcontent-%COMP%]:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px !important;\n  background-color: transparent !important;\n  padding: 7px !important;\n  cursor: pointer;\n}\n.formarea[_ngcontent-%COMP%] {\n  visibility: visible;\n  position: relative;\n  min-height: 450px;\n  padding: 10px;\n  border: dotted 2px #e8e8e8;\n  float: right;\n}\n.col[_ngcontent-%COMP%] {\n  float: left;\n}\n.alert[_ngcontent-%COMP%] {\n  border-radius: 0;\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  text-align: center;\n  font-size: 12px;\n}\n.alert-info[_ngcontent-%COMP%] {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  margin: 10px 20px;\n}\n.dmo-columns[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 5px;\n  margin-bottom: 5px;\n}\n.dmo-columns[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  align-self: self-start;\n}\n.dmo-columns[_ngcontent-%COMP%]   .span-2[_ngcontent-%COMP%] {\n  grid-column: span 2;\n}\n.cdk-drop-list[_ngcontent-%COMP%]:not(#form-controls) {\n  border: 2px dotted #e8e8e8;\n  transform: translate3d(0, 0, 0);\n}\n.cdk-drop-list-receiving[_ngcontent-%COMP%]:not(#form-controls) {\n  border: #4c9e00 dotted 2px;\n}\n.drag-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-list-item[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  min-width: 250px;\n  transform: translate3d(0, 0, 0);\n}\n.item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  position: absolute;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  display: none;\n}\n.item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.leftlayoutdmoPaneltyp[_ngcontent-%COMP%] {\n  border: 1px solid #ddd;\n  margin-right: 5px;\n  padding: 6px;\n  font-size: 15px;\n}\n.rectangle[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  width: 200px;\n  height: 200px;\n  border: solid 1px #121621;\n  color: #121621;\n  margin: auto;\n}\n.input-label[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n.container-new-close[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 0fr 4fr;\n}\n.container-new-open[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 300px 3.25fr;\n}\n.side-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.25fr 0.75fr;\n  position: sticky;\n  top: 0;\n  opacity: 0;\n  transform: translateX(-100%);\n  transition: opacity 0.5s ease-in, transform 0.5s ease-in;\n}\n.side-nav.open[_ngcontent-%COMP%] {\n  opacity: 1;\n  transform: translateX(0);\n  padding-top: 20px;\n}\n.divider[_ngcontent-%COMP%] {\n  height: 5px;\n  width: 4px;\n}\n.open-close-side-menu[_ngcontent-%COMP%] {\n  position: relative;\n  text-align: center;\n  top: calc(50% - 10px);\n}\n#elementor-mode-switcher[_ngcontent-%COMP%] {\n  --e-a-mode-switcher-width: 15px;\n  --e-a-mode-switcher-height: 50px;\n  --e-a-mode-switcher-icon-size: 15px;\n  position: absolute;\n  left: 100%;\n  top: 50%;\n  transform: translateY(-50%);\n  background-color: var(--e-a-bg-default);\n  box-shadow: 3px 1px 3px rgba(0, 0, 0, 0.05);\n  transition: opacity 0.3s;\n}\n.mainWrap[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.open-close-side-menu-arrow-black[_ngcontent-%COMP%] {\n  height: 50px;\n  width: 24px;\n  border-radius: 0px 4px 4px 0px;\n  border-top: 1px solid #CCC;\n  border-right: 1px solid #CCC;\n  border-bottom: 1px solid #CCC;\n  background: var(--C2M-Dark-Blue, #005996);\n  padding: 9px 0px 0px 0px;\n}\n.open-close-side-menu-arrow[_ngcontent-%COMP%] {\n  width: 24px;\n  height: 50px;\n  flex-shrink: 0;\n  filter: drop-shadow(3px 0px 5px rgba(0, 0, 0, 0.03));\n  padding: 9px 0px 0px 0px;\n  border-radius: 0px 4px 4px 0px;\n  border-top: 1px solid #CCC;\n  border-right: 1px solid #CCC;\n  border-bottom: 1px solid #CCC;\n  background: var(--C2M-Dark-Blue, #005996);\n}\n.side-nav[_ngcontent-%COMP%]   .open-side-menu[_ngcontent-%COMP%] {\n  position: relative;\n  text-align: center;\n  top: calc(40% - 10px);\n  transition: background-color 0.3s ease;\n}\n.side-nav[_ngcontent-%COMP%]   .close-side-menu[_ngcontent-%COMP%] {\n  position: relative;\n  text-align: center;\n  top: calc(500% - 10px);\n  transition: background-color 0.3s ease;\n}\n.open-close-side-menu-button[_ngcontent-%COMP%] {\n  position: fixed;\n  margin-left: -2px;\n}\n.open-side-menu-button[_ngcontent-%COMP%] {\n  position: relative;\n  left: 298px;\n  top: 300px;\n  z-index: 999;\n  transition: left 0.5s ease;\n}\n.drawer-open[_ngcontent-%COMP%] {\n  left: 300px !important;\n}\n.drawer-closed[_ngcontent-%COMP%] {\n  left: 0px !important;\n}\n.stick-side-bar-nav[_ngcontent-%COMP%] {\n  position: fixed;\n  z-index: 999;\n  margin-top: 175px;\n  width: 300px !important;\n}\n.main-contanier[_ngcontent-%COMP%] {\n  padding: 25px 15px 15px 22px;\n  position: relative;\n}\n.list-group-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  cursor: move;\n  background: white;\n  padding: 0 20px;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n}\n.list-group-item-success[_ngcontent-%COMP%] {\n  color: #155724;\n  background-color: #c3e6cb;\n}\n.list-group-item[_ngcontent-%COMP%]:first-child {\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n}\n.modal-body[_ngcontent-%COMP%] {\n  position: relative;\n  flex: 1 1 auto;\n  padding: 1rem;\n}\n.leftcol[_ngcontent-%COMP%] {\n  min-height: 550px;\n  float: left;\n  padding: 0;\n  position: sticky;\n  top: 0;\n}\n.list-group[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n  border-radius: 0.25rem;\n}\n.resizable[_ngcontent-%COMP%] {\n  resize: horizontal;\n  overflow: auto;\n  min-width: 50px;\n  max-width: 100%;\n  height: fit-content;\n}\n.reszingContainer[_ngcontent-%COMP%] {\n  min-width: 50px;\n  max-width: 100%;\n  height: fit-content;\n}\n.resizableinnerdiv[_ngcontent-%COMP%] {\n  resize: horizontal;\n  overflow: auto;\n  max-width: 100%;\n  height: fit-content;\n}\n.flex-container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n.flex-item[_ngcontent-%COMP%] {\n  flex: 1 5 50%;\n  height: 600px;\n  border: 1px solid black;\n}\n.grabber[_ngcontent-%COMP%] {\n  width: 5px;\n}\n.grabber[_ngcontent-%COMP%]:hover {\n  cursor: e-resize;\n  resize: horizontal;\n  overflow: auto;\n}\n.side-panel[_ngcontent-%COMP%] {\n  background-color: lightgray;\n}\n.btn-primary[_ngcontent-%COMP%] {\n  background-color: rgb(0, 89, 150);\n  border-color: rgb(0, 89, 150);\n}\n.add-section[_ngcontent-%COMP%] {\n  border: 2px dotted #CCCCCC !important;\n  background: #F2FBFE !important;\n  border-radius: 10px;\n}\n.add-container-content[_ngcontent-%COMP%] {\n  font-family: "Roboto", sans-serif;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 100%;\n  letter-spacing: 5%;\n  text-align: center;\n  color: rgba(0, 0, 0, 0.6980392157);\n}\n.card-group-children[_ngcontent-%COMP%] {\n  margin-left: 20px;\n  border-left: 3px solid #3f51b5;\n  padding-left: 10px;\n  margin-bottom: 15px;\n  width: 100%;\n}\n.child-card[_ngcontent-%COMP%] {\n  margin-top: 5px;\n  margin-bottom: 5px;\n  display: inline-block;\n  border: none !important;\n  margin-left: 0px !important;\n  padding-left: 0.25rem !important;\n  padding-right: 0.25rem !important;\n}\n.main-cardGroup[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  transform: translate3d(0, 0, 0);\n}\n.drag-list-item[_ngcontent-%COMP%]:last-child {\n  border: none;\n}\n.drag-list-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  cursor: move;\n  background: white;\n  padding: 0 20px;\n}\n.Parent-card[_ngcontent-%COMP%] {\n  padding-left: 0.25rem !important;\n  padding-right: 0.25rem !important;\n}\n/*# sourceMappingURL=dmog-form-view.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmogFormViewComponent, { className: "DmogFormViewComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-form-view\\dmog-form-view.component.ts", lineNumber: 63 });
})();

// node_modules/@angular/material/fesm2022/tabs.mjs
var _c09 = ["*"];
function MatTab_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
var _c16 = ["tabListContainer"];
var _c25 = ["tabList"];
var _c33 = ["tabListInner"];
var _c42 = ["nextPaginator"];
var _c5 = ["previousPaginator"];
var _c6 = (a0) => ({
  animationDuration: a0
});
var _c7 = (a0, a1) => ({
  value: a0,
  params: a1
});
function MatTabBody_ng_template_2_Template(rf, ctx) {
}
var _c8 = ["tabBodyWrapper"];
var _c9 = ["tabHeader"];
function MatTabGroup_For_3_Conditional_6_ng_template_0_Template(rf, ctx) {
}
function MatTabGroup_For_3_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, MatTabGroup_For_3_Conditional_6_ng_template_0_Template, 0, 0, "ng-template", 12);
  }
  if (rf & 2) {
    const tab_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("cdkPortalOutlet", tab_r4.templateLabel);
  }
}
function MatTabGroup_For_3_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const tab_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275textInterpolate(tab_r4.textLabel);
  }
}
function MatTabGroup_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7, 2);
    \u0275\u0275listener("click", function MatTabGroup_For_3_Template_div_click_0_listener() {
      const ctx_r2 = \u0275\u0275restoreView(_r2);
      const tab_r4 = ctx_r2.$implicit;
      const \u0275$index_3_r5 = ctx_r2.$index;
      const ctx_r5 = \u0275\u0275nextContext();
      const tabHeader_r7 = \u0275\u0275reference(1);
      return \u0275\u0275resetView(ctx_r5._handleClick(tab_r4, tabHeader_r7, \u0275$index_3_r5));
    })("cdkFocusChange", function MatTabGroup_For_3_Template_div_cdkFocusChange_0_listener($event) {
      const \u0275$index_3_r5 = \u0275\u0275restoreView(_r2).$index;
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5._tabFocusChanged($event, \u0275$index_3_r5));
    });
    \u0275\u0275element(2, "span", 8)(3, "div", 9);
    \u0275\u0275elementStart(4, "span", 10)(5, "span", 11);
    \u0275\u0275template(6, MatTabGroup_For_3_Conditional_6_Template, 1, 1, null, 12)(7, MatTabGroup_For_3_Conditional_7_Template, 1, 1);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const tab_r4 = ctx.$implicit;
    const \u0275$index_3_r5 = ctx.$index;
    const tabNode_r8 = \u0275\u0275reference(1);
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275classMap(tab_r4.labelClass);
    \u0275\u0275classProp("mdc-tab--active", ctx_r5.selectedIndex === \u0275$index_3_r5);
    \u0275\u0275property("id", ctx_r5._getTabLabelId(\u0275$index_3_r5))("disabled", tab_r4.disabled)("fitInkBarToContent", ctx_r5.fitInkBarToContent);
    \u0275\u0275attribute("tabIndex", ctx_r5._getTabIndex(\u0275$index_3_r5))("aria-posinset", \u0275$index_3_r5 + 1)("aria-setsize", ctx_r5._tabs.length)("aria-controls", ctx_r5._getTabContentId(\u0275$index_3_r5))("aria-selected", ctx_r5.selectedIndex === \u0275$index_3_r5)("aria-label", tab_r4.ariaLabel || null)("aria-labelledby", !tab_r4.ariaLabel && tab_r4.ariaLabelledby ? tab_r4.ariaLabelledby : null);
    \u0275\u0275advance(3);
    \u0275\u0275property("matRippleTrigger", tabNode_r8)("matRippleDisabled", tab_r4.disabled || ctx_r5.disableRipple);
    \u0275\u0275advance(3);
    \u0275\u0275conditional(tab_r4.templateLabel ? 6 : 7);
  }
}
function MatTabGroup_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
function MatTabGroup_For_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-tab-body", 13);
    \u0275\u0275listener("_onCentered", function MatTabGroup_For_8_Template_mat_tab_body__onCentered_0_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5._removeTabBodyWrapperHeight());
    })("_onCentering", function MatTabGroup_For_8_Template_mat_tab_body__onCentering_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5._setTabBodyWrapperHeight($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const tab_r10 = ctx.$implicit;
    const \u0275$index_23_r11 = ctx.$index;
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275classMap(tab_r10.bodyClass);
    \u0275\u0275classProp("mat-mdc-tab-body-active", ctx_r5.selectedIndex === \u0275$index_23_r11);
    \u0275\u0275property("id", ctx_r5._getTabContentId(\u0275$index_23_r11))("content", tab_r10.content)("position", tab_r10.position)("origin", tab_r10.origin)("animationDuration", ctx_r5.animationDuration)("preserveContent", ctx_r5.preserveContent);
    \u0275\u0275attribute("tabindex", ctx_r5.contentTabIndex != null && ctx_r5.selectedIndex === \u0275$index_23_r11 ? ctx_r5.contentTabIndex : null)("aria-labelledby", ctx_r5._getTabLabelId(\u0275$index_23_r11))("aria-hidden", ctx_r5.selectedIndex !== \u0275$index_23_r11);
  }
}
var _c10 = ["mat-tab-nav-bar", ""];
var _c11 = ["mat-tab-link", ""];
var MAT_TAB_CONTENT = new InjectionToken("MatTabContent");
var MatTabContent = class _MatTabContent {
  constructor(template) {
    this.template = template;
  }
  static {
    this.\u0275fac = function MatTabContent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabContent)(\u0275\u0275directiveInject(TemplateRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _MatTabContent,
      selectors: [["", "matTabContent", ""]],
      standalone: true,
      features: [\u0275\u0275ProvidersFeature([{
        provide: MAT_TAB_CONTENT,
        useExisting: _MatTabContent
      }])]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabContent, [{
    type: Directive,
    args: [{
      selector: "[matTabContent]",
      providers: [{
        provide: MAT_TAB_CONTENT,
        useExisting: MatTabContent
      }],
      standalone: true
    }]
  }], () => [{
    type: TemplateRef
  }], null);
})();
var MAT_TAB_LABEL = new InjectionToken("MatTabLabel");
var MAT_TAB = new InjectionToken("MAT_TAB");
var MatTabLabel = class _MatTabLabel extends CdkPortal {
  constructor(templateRef, viewContainerRef, _closestTab) {
    super(templateRef, viewContainerRef);
    this._closestTab = _closestTab;
  }
  static {
    this.\u0275fac = function MatTabLabel_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabLabel)(\u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(MAT_TAB, 8));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _MatTabLabel,
      selectors: [["", "mat-tab-label", ""], ["", "matTabLabel", ""]],
      standalone: true,
      features: [\u0275\u0275ProvidersFeature([{
        provide: MAT_TAB_LABEL,
        useExisting: _MatTabLabel
      }]), \u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabLabel, [{
    type: Directive,
    args: [{
      selector: "[mat-tab-label], [matTabLabel]",
      providers: [{
        provide: MAT_TAB_LABEL,
        useExisting: MatTabLabel
      }],
      standalone: true
    }]
  }], () => [{
    type: TemplateRef
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_TAB]
    }, {
      type: Optional
    }]
  }], null);
})();
var MAT_TAB_GROUP = new InjectionToken("MAT_TAB_GROUP");
var MatTab = class _MatTab {
  /** Content for the tab label given by `<ng-template mat-tab-label>`. */
  get templateLabel() {
    return this._templateLabel;
  }
  set templateLabel(value) {
    this._setTemplateLabelInput(value);
  }
  /** @docs-private */
  get content() {
    return this._contentPortal;
  }
  constructor(_viewContainerRef, _closestTabGroup) {
    this._viewContainerRef = _viewContainerRef;
    this._closestTabGroup = _closestTabGroup;
    this.disabled = false;
    this._explicitContent = void 0;
    this.textLabel = "";
    this._contentPortal = null;
    this._stateChanges = new Subject();
    this.position = null;
    this.origin = null;
    this.isActive = false;
  }
  ngOnChanges(changes) {
    if (changes.hasOwnProperty("textLabel") || changes.hasOwnProperty("disabled")) {
      this._stateChanges.next();
    }
  }
  ngOnDestroy() {
    this._stateChanges.complete();
  }
  ngOnInit() {
    this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);
  }
  /**
   * This has been extracted to a util because of TS 4 and VE.
   * View Engine doesn't support property rename inheritance.
   * TS 4.0 doesn't allow properties to override accessors or vice-versa.
   * @docs-private
   */
  _setTemplateLabelInput(value) {
    if (value && value._closestTab === this) {
      this._templateLabel = value;
    }
  }
  static {
    this.\u0275fac = function MatTab_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTab)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(MAT_TAB_GROUP, 8));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatTab,
      selectors: [["mat-tab"]],
      contentQueries: function MatTab_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, MatTabLabel, 5);
          \u0275\u0275contentQuery(dirIndex, MatTabContent, 7, TemplateRef);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.templateLabel = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._explicitContent = _t.first);
        }
      },
      viewQuery: function MatTab_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(TemplateRef, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._implicitContent = _t.first);
        }
      },
      hostAttrs: ["hidden", ""],
      inputs: {
        disabled: [2, "disabled", "disabled", booleanAttribute],
        textLabel: [0, "label", "textLabel"],
        ariaLabel: [0, "aria-label", "ariaLabel"],
        ariaLabelledby: [0, "aria-labelledby", "ariaLabelledby"],
        labelClass: "labelClass",
        bodyClass: "bodyClass"
      },
      exportAs: ["matTab"],
      standalone: true,
      features: [\u0275\u0275ProvidersFeature([{
        provide: MAT_TAB,
        useExisting: _MatTab
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
      ngContentSelectors: _c09,
      decls: 1,
      vars: 0,
      template: function MatTab_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, MatTab_ng_template_0_Template, 1, 0, "ng-template");
        }
      },
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTab, [{
    type: Component,
    args: [{
      selector: "mat-tab",
      changeDetection: ChangeDetectionStrategy.Default,
      encapsulation: ViewEncapsulation$1.None,
      exportAs: "matTab",
      providers: [{
        provide: MAT_TAB,
        useExisting: MatTab
      }],
      standalone: true,
      host: {
        // This element will be rendered on the server in order to support hydration.
        // Hide it so it doesn't cause a layout shift when it's removed on the client.
        "hidden": ""
      },
      template: "<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    tab-group. -->\n<ng-template><ng-content></ng-content></ng-template>\n"
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_TAB_GROUP]
    }, {
      type: Optional
    }]
  }], {
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    templateLabel: [{
      type: ContentChild,
      args: [MatTabLabel]
    }],
    _explicitContent: [{
      type: ContentChild,
      args: [MatTabContent, {
        read: TemplateRef,
        static: true
      }]
    }],
    _implicitContent: [{
      type: ViewChild,
      args: [TemplateRef, {
        static: true
      }]
    }],
    textLabel: [{
      type: Input,
      args: ["label"]
    }],
    ariaLabel: [{
      type: Input,
      args: ["aria-label"]
    }],
    ariaLabelledby: [{
      type: Input,
      args: ["aria-labelledby"]
    }],
    labelClass: [{
      type: Input
    }],
    bodyClass: [{
      type: Input
    }]
  });
})();
var ACTIVE_CLASS = "mdc-tab-indicator--active";
var NO_TRANSITION_CLASS = "mdc-tab-indicator--no-transition";
var MatInkBar = class {
  constructor(_items) {
    this._items = _items;
  }
  /** Hides the ink bar. */
  hide() {
    this._items.forEach((item) => item.deactivateInkBar());
  }
  /** Aligns the ink bar to a DOM node. */
  alignToElement(element) {
    const correspondingItem = this._items.find((item) => item.elementRef.nativeElement === element);
    const currentItem = this._currentItem;
    if (correspondingItem === currentItem) {
      return;
    }
    currentItem?.deactivateInkBar();
    if (correspondingItem) {
      const domRect = currentItem?.elementRef.nativeElement.getBoundingClientRect?.();
      correspondingItem.activateInkBar(domRect);
      this._currentItem = correspondingItem;
    }
  }
};
var InkBarItem = class _InkBarItem {
  constructor() {
    this._elementRef = inject(ElementRef);
    this._fitToContent = false;
  }
  /** Whether the ink bar should fit to the entire tab or just its content. */
  get fitInkBarToContent() {
    return this._fitToContent;
  }
  set fitInkBarToContent(newValue) {
    if (this._fitToContent !== newValue) {
      this._fitToContent = newValue;
      if (this._inkBarElement) {
        this._appendInkBarElement();
      }
    }
  }
  /** Aligns the ink bar to the current item. */
  activateInkBar(previousIndicatorClientRect) {
    const element = this._elementRef.nativeElement;
    if (!previousIndicatorClientRect || !element.getBoundingClientRect || !this._inkBarContentElement) {
      element.classList.add(ACTIVE_CLASS);
      return;
    }
    const currentClientRect = element.getBoundingClientRect();
    const widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
    const xPosition = previousIndicatorClientRect.left - currentClientRect.left;
    element.classList.add(NO_TRANSITION_CLASS);
    this._inkBarContentElement.style.setProperty("transform", `translateX(${xPosition}px) scaleX(${widthDelta})`);
    element.getBoundingClientRect();
    element.classList.remove(NO_TRANSITION_CLASS);
    element.classList.add(ACTIVE_CLASS);
    this._inkBarContentElement.style.setProperty("transform", "");
  }
  /** Removes the ink bar from the current item. */
  deactivateInkBar() {
    this._elementRef.nativeElement.classList.remove(ACTIVE_CLASS);
  }
  /** Initializes the foundation. */
  ngOnInit() {
    this._createInkBarElement();
  }
  /** Destroys the foundation. */
  ngOnDestroy() {
    this._inkBarElement?.remove();
    this._inkBarElement = this._inkBarContentElement = null;
  }
  /** Creates and appends the ink bar element. */
  _createInkBarElement() {
    const documentNode = this._elementRef.nativeElement.ownerDocument || document;
    const inkBarElement = this._inkBarElement = documentNode.createElement("span");
    const inkBarContentElement = this._inkBarContentElement = documentNode.createElement("span");
    inkBarElement.className = "mdc-tab-indicator";
    inkBarContentElement.className = "mdc-tab-indicator__content mdc-tab-indicator__content--underline";
    inkBarElement.appendChild(this._inkBarContentElement);
    this._appendInkBarElement();
  }
  /**
   * Appends the ink bar to the tab host element or content, depending on whether
   * the ink bar should fit to content.
   */
  _appendInkBarElement() {
    if (!this._inkBarElement && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("Ink bar element has not been created and cannot be appended");
    }
    const parentElement = this._fitToContent ? this._elementRef.nativeElement.querySelector(".mdc-tab__content") : this._elementRef.nativeElement;
    if (!parentElement && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("Missing element to host the ink bar");
    }
    parentElement.appendChild(this._inkBarElement);
  }
  static {
    this.\u0275fac = function InkBarItem_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _InkBarItem)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _InkBarItem,
      inputs: {
        fitInkBarToContent: [2, "fitInkBarToContent", "fitInkBarToContent", booleanAttribute]
      },
      features: [\u0275\u0275InputTransformsFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InkBarItem, [{
    type: Directive
  }], null, {
    fitInkBarToContent: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
function _MAT_INK_BAR_POSITIONER_FACTORY() {
  const method = (element) => ({
    left: element ? (element.offsetLeft || 0) + "px" : "0",
    width: element ? (element.offsetWidth || 0) + "px" : "0"
  });
  return method;
}
var _MAT_INK_BAR_POSITIONER = new InjectionToken("MatInkBarPositioner", {
  providedIn: "root",
  factory: _MAT_INK_BAR_POSITIONER_FACTORY
});
var MatTabLabelWrapper = class _MatTabLabelWrapper extends InkBarItem {
  constructor(elementRef) {
    super();
    this.elementRef = elementRef;
    this.disabled = false;
  }
  /** Sets focus on the wrapper element */
  focus() {
    this.elementRef.nativeElement.focus();
  }
  getOffsetLeft() {
    return this.elementRef.nativeElement.offsetLeft;
  }
  getOffsetWidth() {
    return this.elementRef.nativeElement.offsetWidth;
  }
  static {
    this.\u0275fac = function MatTabLabelWrapper_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabLabelWrapper)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _MatTabLabelWrapper,
      selectors: [["", "matTabLabelWrapper", ""]],
      hostVars: 3,
      hostBindings: function MatTabLabelWrapper_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275attribute("aria-disabled", !!ctx.disabled);
          \u0275\u0275classProp("mat-mdc-tab-disabled", ctx.disabled);
        }
      },
      inputs: {
        disabled: [2, "disabled", "disabled", booleanAttribute]
      },
      standalone: true,
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabLabelWrapper, [{
    type: Directive,
    args: [{
      selector: "[matTabLabelWrapper]",
      host: {
        "[class.mat-mdc-tab-disabled]": "disabled",
        "[attr.aria-disabled]": "!!disabled"
      },
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }], {
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var passiveEventListenerOptions2 = normalizePassiveListenerOptions({
  passive: true
});
var HEADER_SCROLL_DELAY = 650;
var HEADER_SCROLL_INTERVAL = 100;
var MatPaginatedTabHeader = class _MatPaginatedTabHeader {
  /** The index of the active tab. */
  get selectedIndex() {
    return this._selectedIndex;
  }
  set selectedIndex(v) {
    const value = isNaN(v) ? 0 : v;
    if (this._selectedIndex != value) {
      this._selectedIndexChanged = true;
      this._selectedIndex = value;
      if (this._keyManager) {
        this._keyManager.updateActiveItem(value);
      }
    }
  }
  constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {
    this._elementRef = _elementRef;
    this._changeDetectorRef = _changeDetectorRef;
    this._viewportRuler = _viewportRuler;
    this._dir = _dir;
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._animationMode = _animationMode;
    this._scrollDistance = 0;
    this._selectedIndexChanged = false;
    this._destroyed = new Subject();
    this._showPaginationControls = false;
    this._disableScrollAfter = true;
    this._disableScrollBefore = true;
    this._stopScrolling = new Subject();
    this.disablePagination = false;
    this._selectedIndex = 0;
    this.selectFocusedIndex = new EventEmitter();
    this.indexFocused = new EventEmitter();
    this._sharedResizeObserver = inject(SharedResizeObserver);
    this._injector = inject(Injector);
    _ngZone.runOutsideAngular(() => {
      fromEvent(_elementRef.nativeElement, "mouseleave").pipe(takeUntil(this._destroyed)).subscribe(() => {
        this._stopInterval();
      });
    });
  }
  ngAfterViewInit() {
    fromEvent(this._previousPaginator.nativeElement, "touchstart", passiveEventListenerOptions2).pipe(takeUntil(this._destroyed)).subscribe(() => {
      this._handlePaginatorPress("before");
    });
    fromEvent(this._nextPaginator.nativeElement, "touchstart", passiveEventListenerOptions2).pipe(takeUntil(this._destroyed)).subscribe(() => {
      this._handlePaginatorPress("after");
    });
  }
  ngAfterContentInit() {
    const dirChange = this._dir ? this._dir.change : of("ltr");
    const resize = this._sharedResizeObserver.observe(this._elementRef.nativeElement).pipe(debounceTime(32), takeUntil(this._destroyed));
    const viewportResize = this._viewportRuler.change(150).pipe(takeUntil(this._destroyed));
    const realign = () => {
      this.updatePagination();
      this._alignInkBarToSelectedTab();
    };
    this._keyManager = new FocusKeyManager(this._items).withHorizontalOrientation(this._getLayoutDirection()).withHomeAndEnd().withWrap().skipPredicate(() => false);
    this._keyManager.updateActiveItem(this._selectedIndex);
    afterNextRender(realign, {
      injector: this._injector
    });
    merge(dirChange, viewportResize, resize, this._items.changes, this._itemsResized()).pipe(takeUntil(this._destroyed)).subscribe(() => {
      this._ngZone.run(() => {
        Promise.resolve().then(() => {
          this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), this._scrollDistance));
          realign();
        });
      });
      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());
    });
    this._keyManager.change.subscribe((newFocusIndex) => {
      this.indexFocused.emit(newFocusIndex);
      this._setTabFocus(newFocusIndex);
    });
  }
  /** Sends any changes that could affect the layout of the items. */
  _itemsResized() {
    if (typeof ResizeObserver !== "function") {
      return EMPTY;
    }
    return this._items.changes.pipe(
      startWith(this._items),
      switchMap((tabItems) => new Observable((observer) => this._ngZone.runOutsideAngular(() => {
        const resizeObserver = new ResizeObserver((entries) => observer.next(entries));
        tabItems.forEach((item) => resizeObserver.observe(item.elementRef.nativeElement));
        return () => {
          resizeObserver.disconnect();
        };
      }))),
      // Skip the first emit since the resize observer emits when an item
      // is observed for new items when the tab is already inserted
      skip(1),
      // Skip emissions where all the elements are invisible since we don't want
      // the header to try and re-render with invalid measurements. See #25574.
      filter((entries) => entries.some((e) => e.contentRect.width > 0 && e.contentRect.height > 0))
    );
  }
  ngAfterContentChecked() {
    if (this._tabLabelCount != this._items.length) {
      this.updatePagination();
      this._tabLabelCount = this._items.length;
      this._changeDetectorRef.markForCheck();
    }
    if (this._selectedIndexChanged) {
      this._scrollToLabel(this._selectedIndex);
      this._checkScrollingControls();
      this._alignInkBarToSelectedTab();
      this._selectedIndexChanged = false;
      this._changeDetectorRef.markForCheck();
    }
    if (this._scrollDistanceChanged) {
      this._updateTabScrollPosition();
      this._scrollDistanceChanged = false;
      this._changeDetectorRef.markForCheck();
    }
  }
  ngOnDestroy() {
    this._keyManager?.destroy();
    this._destroyed.next();
    this._destroyed.complete();
    this._stopScrolling.complete();
  }
  /** Handles keyboard events on the header. */
  _handleKeydown(event) {
    if (hasModifierKey(event)) {
      return;
    }
    switch (event.keyCode) {
      case ENTER:
      case SPACE:
        if (this.focusIndex !== this.selectedIndex) {
          const item = this._items.get(this.focusIndex);
          if (item && !item.disabled) {
            this.selectFocusedIndex.emit(this.focusIndex);
            this._itemSelected(event);
          }
        }
        break;
      default:
        this._keyManager.onKeydown(event);
    }
  }
  /**
   * Callback for when the MutationObserver detects that the content has changed.
   */
  _onContentChanges() {
    const textContent = this._elementRef.nativeElement.textContent;
    if (textContent !== this._currentTextContent) {
      this._currentTextContent = textContent || "";
      this._ngZone.run(() => {
        this.updatePagination();
        this._alignInkBarToSelectedTab();
        this._changeDetectorRef.markForCheck();
      });
    }
  }
  /**
   * Updates the view whether pagination should be enabled or not.
   *
   * WARNING: Calling this method can be very costly in terms of performance. It should be called
   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the
   * page.
   */
  updatePagination() {
    this._checkPaginationEnabled();
    this._checkScrollingControls();
    this._updateTabScrollPosition();
  }
  /** Tracks which element has focus; used for keyboard navigation */
  get focusIndex() {
    return this._keyManager ? this._keyManager.activeItemIndex : 0;
  }
  /** When the focus index is set, we must manually send focus to the correct label */
  set focusIndex(value) {
    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {
      return;
    }
    this._keyManager.setActiveItem(value);
  }
  /**
   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
   * providing a valid index and return true.
   */
  _isValidIndex(index) {
    return this._items ? !!this._items.toArray()[index] : true;
  }
  /**
   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
   * scrolling is enabled.
   */
  _setTabFocus(tabIndex) {
    if (this._showPaginationControls) {
      this._scrollToLabel(tabIndex);
    }
    if (this._items && this._items.length) {
      this._items.toArray()[tabIndex].focus();
      const containerEl = this._tabListContainer.nativeElement;
      const dir = this._getLayoutDirection();
      if (dir == "ltr") {
        containerEl.scrollLeft = 0;
      } else {
        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;
      }
    }
  }
  /** The layout direction of the containing app. */
  _getLayoutDirection() {
    return this._dir && this._dir.value === "rtl" ? "rtl" : "ltr";
  }
  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */
  _updateTabScrollPosition() {
    if (this.disablePagination) {
      return;
    }
    const scrollDistance = this.scrollDistance;
    const translateX = this._getLayoutDirection() === "ltr" ? -scrollDistance : scrollDistance;
    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;
    if (this._platform.TRIDENT || this._platform.EDGE) {
      this._tabListContainer.nativeElement.scrollLeft = 0;
    }
  }
  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */
  get scrollDistance() {
    return this._scrollDistance;
  }
  set scrollDistance(value) {
    this._scrollTo(value);
  }
  /**
   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
   * the end of the list, respectively). The distance to scroll is computed to be a third of the
   * length of the tab list view window.
   *
   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
   * should be called sparingly.
   */
  _scrollHeader(direction) {
    const viewLength = this._tabListContainer.nativeElement.offsetWidth;
    const scrollAmount = (direction == "before" ? -1 : 1) * viewLength / 3;
    return this._scrollTo(this._scrollDistance + scrollAmount);
  }
  /** Handles click events on the pagination arrows. */
  _handlePaginatorClick(direction) {
    this._stopInterval();
    this._scrollHeader(direction);
  }
  /**
   * Moves the tab list such that the desired tab label (marked by index) is moved into view.
   *
   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
   * should be called sparingly.
   */
  _scrollToLabel(labelIndex) {
    if (this.disablePagination) {
      return;
    }
    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;
    if (!selectedLabel) {
      return;
    }
    const viewLength = this._tabListContainer.nativeElement.offsetWidth;
    const {
      offsetLeft,
      offsetWidth
    } = selectedLabel.elementRef.nativeElement;
    let labelBeforePos, labelAfterPos;
    if (this._getLayoutDirection() == "ltr") {
      labelBeforePos = offsetLeft;
      labelAfterPos = labelBeforePos + offsetWidth;
    } else {
      labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;
      labelBeforePos = labelAfterPos - offsetWidth;
    }
    const beforeVisiblePos = this.scrollDistance;
    const afterVisiblePos = this.scrollDistance + viewLength;
    if (labelBeforePos < beforeVisiblePos) {
      this.scrollDistance -= beforeVisiblePos - labelBeforePos;
    } else if (labelAfterPos > afterVisiblePos) {
      this.scrollDistance += Math.min(labelAfterPos - afterVisiblePos, labelBeforePos - beforeVisiblePos);
    }
  }
  /**
   * Evaluate whether the pagination controls should be displayed. If the scroll width of the
   * tab list is wider than the size of the header container, then the pagination controls should
   * be shown.
   *
   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
   * should be called sparingly.
   */
  _checkPaginationEnabled() {
    if (this.disablePagination) {
      this._showPaginationControls = false;
    } else {
      const scrollWidth = this._tabListInner.nativeElement.scrollWidth;
      const containerWidth = this._elementRef.nativeElement.offsetWidth;
      const isEnabled = scrollWidth - containerWidth >= 5;
      if (!isEnabled) {
        this.scrollDistance = 0;
      }
      if (isEnabled !== this._showPaginationControls) {
        this._showPaginationControls = isEnabled;
        this._changeDetectorRef.markForCheck();
      }
    }
  }
  /**
   * Evaluate whether the before and after controls should be enabled or disabled.
   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
   * before button. If the header is at the end of the list (scroll distance is equal to the
   * maximum distance we can scroll), then disable the after button.
   *
   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
   * should be called sparingly.
   */
  _checkScrollingControls() {
    if (this.disablePagination) {
      this._disableScrollAfter = this._disableScrollBefore = true;
    } else {
      this._disableScrollBefore = this.scrollDistance == 0;
      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();
      this._changeDetectorRef.markForCheck();
    }
  }
  /**
   * Determines what is the maximum length in pixels that can be set for the scroll distance. This
   * is equal to the difference in width between the tab list container and tab header container.
   *
   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
   * should be called sparingly.
   */
  _getMaxScrollDistance() {
    const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;
    const viewLength = this._tabListContainer.nativeElement.offsetWidth;
    return lengthOfTabList - viewLength || 0;
  }
  /** Tells the ink-bar to align itself to the current label wrapper */
  _alignInkBarToSelectedTab() {
    const selectedItem = this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;
    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;
    if (selectedLabelWrapper) {
      this._inkBar.alignToElement(selectedLabelWrapper);
    } else {
      this._inkBar.hide();
    }
  }
  /** Stops the currently-running paginator interval.  */
  _stopInterval() {
    this._stopScrolling.next();
  }
  /**
   * Handles the user pressing down on one of the paginators.
   * Starts scrolling the header after a certain amount of time.
   * @param direction In which direction the paginator should be scrolled.
   */
  _handlePaginatorPress(direction, mouseEvent) {
    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {
      return;
    }
    this._stopInterval();
    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL).pipe(takeUntil(merge(this._stopScrolling, this._destroyed))).subscribe(() => {
      const {
        maxScrollDistance,
        distance
      } = this._scrollHeader(direction);
      if (distance === 0 || distance >= maxScrollDistance) {
        this._stopInterval();
      }
    });
  }
  /**
   * Scrolls the header to a given position.
   * @param position Position to which to scroll.
   * @returns Information on the current scroll distance and the maximum.
   */
  _scrollTo(position) {
    if (this.disablePagination) {
      return {
        maxScrollDistance: 0,
        distance: 0
      };
    }
    const maxScrollDistance = this._getMaxScrollDistance();
    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));
    this._scrollDistanceChanged = true;
    this._checkScrollingControls();
    return {
      maxScrollDistance,
      distance: this._scrollDistance
    };
  }
  static {
    this.\u0275fac = function MatPaginatedTabHeader_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatPaginatedTabHeader)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ViewportRuler), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _MatPaginatedTabHeader,
      inputs: {
        disablePagination: [2, "disablePagination", "disablePagination", booleanAttribute],
        selectedIndex: [2, "selectedIndex", "selectedIndex", numberAttribute]
      },
      outputs: {
        selectFocusedIndex: "selectFocusedIndex",
        indexFocused: "indexFocused"
      },
      features: [\u0275\u0275InputTransformsFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatPaginatedTabHeader, [{
    type: Directive
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: ViewportRuler
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], {
    disablePagination: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    selectedIndex: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    selectFocusedIndex: [{
      type: Output
    }],
    indexFocused: [{
      type: Output
    }]
  });
})();
var MatTabHeader = class _MatTabHeader extends MatPaginatedTabHeader {
  constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {
    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);
    this.disableRipple = false;
  }
  ngAfterContentInit() {
    this._inkBar = new MatInkBar(this._items);
    super.ngAfterContentInit();
  }
  _itemSelected(event) {
    event.preventDefault();
  }
  static {
    this.\u0275fac = function MatTabHeader_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabHeader)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ViewportRuler), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatTabHeader,
      selectors: [["mat-tab-header"]],
      contentQueries: function MatTabHeader_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, MatTabLabelWrapper, 4);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._items = _t);
        }
      },
      viewQuery: function MatTabHeader_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c16, 7);
          \u0275\u0275viewQuery(_c25, 7);
          \u0275\u0275viewQuery(_c33, 7);
          \u0275\u0275viewQuery(_c42, 5);
          \u0275\u0275viewQuery(_c5, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabListContainer = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabList = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabListInner = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._nextPaginator = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._previousPaginator = _t.first);
        }
      },
      hostAttrs: [1, "mat-mdc-tab-header"],
      hostVars: 4,
      hostBindings: function MatTabHeader_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("mat-mdc-tab-header-pagination-controls-enabled", ctx._showPaginationControls)("mat-mdc-tab-header-rtl", ctx._getLayoutDirection() == "rtl");
        }
      },
      inputs: {
        ariaLabel: [0, "aria-label", "ariaLabel"],
        ariaLabelledby: [0, "aria-labelledby", "ariaLabelledby"],
        disableRipple: [2, "disableRipple", "disableRipple", booleanAttribute]
      },
      standalone: true,
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
      ngContentSelectors: _c09,
      decls: 13,
      vars: 10,
      consts: [["previousPaginator", ""], ["tabListContainer", ""], ["tabList", ""], ["tabListInner", ""], ["nextPaginator", ""], ["mat-ripple", "", 1, "mat-mdc-tab-header-pagination", "mat-mdc-tab-header-pagination-before", 3, "click", "mousedown", "touchend", "matRippleDisabled"], [1, "mat-mdc-tab-header-pagination-chevron"], [1, "mat-mdc-tab-label-container", 3, "keydown"], ["role", "tablist", 1, "mat-mdc-tab-list", 3, "cdkObserveContent"], [1, "mat-mdc-tab-labels"], ["mat-ripple", "", 1, "mat-mdc-tab-header-pagination", "mat-mdc-tab-header-pagination-after", 3, "mousedown", "click", "touchend", "matRippleDisabled"]],
      template: function MatTabHeader_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "div", 5, 0);
          \u0275\u0275listener("click", function MatTabHeader_Template_div_click_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorClick("before"));
          })("mousedown", function MatTabHeader_Template_div_mousedown_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorPress("before", $event));
          })("touchend", function MatTabHeader_Template_div_touchend_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._stopInterval());
          });
          \u0275\u0275element(2, "div", 6);
          \u0275\u0275elementEnd();
          \u0275\u0275elementStart(3, "div", 7, 1);
          \u0275\u0275listener("keydown", function MatTabHeader_Template_div_keydown_3_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handleKeydown($event));
          });
          \u0275\u0275elementStart(5, "div", 8, 2);
          \u0275\u0275listener("cdkObserveContent", function MatTabHeader_Template_div_cdkObserveContent_5_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._onContentChanges());
          });
          \u0275\u0275elementStart(7, "div", 9, 3);
          \u0275\u0275projection(9);
          \u0275\u0275elementEnd()()();
          \u0275\u0275elementStart(10, "div", 10, 4);
          \u0275\u0275listener("mousedown", function MatTabHeader_Template_div_mousedown_10_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorPress("after", $event));
          })("click", function MatTabHeader_Template_div_click_10_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorClick("after"));
          })("touchend", function MatTabHeader_Template_div_touchend_10_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._stopInterval());
          });
          \u0275\u0275element(12, "div", 6);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275classProp("mat-mdc-tab-header-pagination-disabled", ctx._disableScrollBefore);
          \u0275\u0275property("matRippleDisabled", ctx._disableScrollBefore || ctx.disableRipple);
          \u0275\u0275advance(3);
          \u0275\u0275classProp("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
          \u0275\u0275advance(2);
          \u0275\u0275attribute("aria-label", ctx.ariaLabel || null)("aria-labelledby", ctx.ariaLabelledby || null);
          \u0275\u0275advance(5);
          \u0275\u0275classProp("mat-mdc-tab-header-pagination-disabled", ctx._disableScrollAfter);
          \u0275\u0275property("matRippleDisabled", ctx._disableScrollAfter || ctx.disableRipple);
        }
      },
      dependencies: [MatRipple, CdkObserveContent],
      styles: [".mat-mdc-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mdc-tab-indicator .mdc-tab-indicator__content{transition-duration:var(--mat-tab-animation-duration, 250ms)}.mat-mdc-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:rgba(0,0,0,0);touch-action:none;box-sizing:content-box;outline:0}.mat-mdc-tab-header-pagination::-moz-focus-inner{border:0}.mat-mdc-tab-header-pagination .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-controls-enabled .mat-mdc-tab-header-pagination{display:flex}.mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after{padding-left:4px}.mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-pagination-after{padding-right:4px}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-mdc-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px;border-color:var(--mat-tab-header-pagination-icon-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-disabled{box-shadow:none;cursor:default;pointer-events:none}.mat-mdc-tab-header-pagination-disabled .mat-mdc-tab-header-pagination-chevron{opacity:.4}.mat-mdc-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-mdc-tab-list{transition:none}.mat-mdc-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1;border-bottom-style:solid;border-bottom-width:var(--mat-tab-header-divider-height);border-bottom-color:var(--mat-tab-header-divider-color, var(--mat-app-surface-variant))}.mat-mdc-tab-group-inverted-header .mat-mdc-tab-label-container{border-bottom:none;border-top-style:solid;border-top-width:var(--mat-tab-header-divider-height);border-top-color:var(--mat-tab-header-divider-color, var(--mat-app-surface-variant))}.mat-mdc-tab-labels{display:flex;flex:1 0 auto}[mat-align-tabs=center]>.mat-mdc-tab-header .mat-mdc-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-mdc-tab-header .mat-mdc-tab-labels{justify-content:flex-end}.cdk-drop-list .mat-mdc-tab-labels,.mat-mdc-tab-labels.cdk-drop-list{min-height:var(--mdc-secondary-navigation-tab-container-height)}.mat-mdc-tab::before{margin:5px}.cdk-high-contrast-active .mat-mdc-tab[aria-disabled=true]{color:GrayText}"],
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabHeader, [{
    type: Component,
    args: [{
      selector: "mat-tab-header",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.Default,
      host: {
        "class": "mat-mdc-tab-header",
        "[class.mat-mdc-tab-header-pagination-controls-enabled]": "_showPaginationControls",
        "[class.mat-mdc-tab-header-rtl]": "_getLayoutDirection() == 'rtl'"
      },
      standalone: true,
      imports: [MatRipple, CdkObserveContent],
      template: `<!--
 Note that this intentionally uses a \`div\` instead of a \`button\`, because it's not part of
 the regular tabs flow and is only here to support mouse users. It should also not be focusable.
-->
<div class="mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-before"
     #previousPaginator
     mat-ripple
     [matRippleDisabled]="_disableScrollBefore || disableRipple"
     [class.mat-mdc-tab-header-pagination-disabled]="_disableScrollBefore"
     (click)="_handlePaginatorClick('before')"
     (mousedown)="_handlePaginatorPress('before', $event)"
     (touchend)="_stopInterval()">
  <div class="mat-mdc-tab-header-pagination-chevron"></div>
</div>

<div
  class="mat-mdc-tab-label-container"
  #tabListContainer
  (keydown)="_handleKeydown($event)"
  [class._mat-animation-noopable]="_animationMode === 'NoopAnimations'">
  <div
    #tabList
    class="mat-mdc-tab-list"
    role="tablist"
    [attr.aria-label]="ariaLabel || null"
    [attr.aria-labelledby]="ariaLabelledby || null"
    (cdkObserveContent)="_onContentChanges()">
    <div class="mat-mdc-tab-labels" #tabListInner>
      <ng-content></ng-content>
    </div>
  </div>
</div>

<div class="mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-after"
     #nextPaginator
     mat-ripple
     [matRippleDisabled]="_disableScrollAfter || disableRipple"
     [class.mat-mdc-tab-header-pagination-disabled]="_disableScrollAfter"
     (mousedown)="_handlePaginatorPress('after', $event)"
     (click)="_handlePaginatorClick('after')"
     (touchend)="_stopInterval()">
  <div class="mat-mdc-tab-header-pagination-chevron"></div>
</div>
`,
      styles: [".mat-mdc-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mdc-tab-indicator .mdc-tab-indicator__content{transition-duration:var(--mat-tab-animation-duration, 250ms)}.mat-mdc-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:rgba(0,0,0,0);touch-action:none;box-sizing:content-box;outline:0}.mat-mdc-tab-header-pagination::-moz-focus-inner{border:0}.mat-mdc-tab-header-pagination .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-controls-enabled .mat-mdc-tab-header-pagination{display:flex}.mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after{padding-left:4px}.mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-pagination-after{padding-right:4px}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-mdc-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px;border-color:var(--mat-tab-header-pagination-icon-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-disabled{box-shadow:none;cursor:default;pointer-events:none}.mat-mdc-tab-header-pagination-disabled .mat-mdc-tab-header-pagination-chevron{opacity:.4}.mat-mdc-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-mdc-tab-list{transition:none}.mat-mdc-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1;border-bottom-style:solid;border-bottom-width:var(--mat-tab-header-divider-height);border-bottom-color:var(--mat-tab-header-divider-color, var(--mat-app-surface-variant))}.mat-mdc-tab-group-inverted-header .mat-mdc-tab-label-container{border-bottom:none;border-top-style:solid;border-top-width:var(--mat-tab-header-divider-height);border-top-color:var(--mat-tab-header-divider-color, var(--mat-app-surface-variant))}.mat-mdc-tab-labels{display:flex;flex:1 0 auto}[mat-align-tabs=center]>.mat-mdc-tab-header .mat-mdc-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-mdc-tab-header .mat-mdc-tab-labels{justify-content:flex-end}.cdk-drop-list .mat-mdc-tab-labels,.mat-mdc-tab-labels.cdk-drop-list{min-height:var(--mdc-secondary-navigation-tab-container-height)}.mat-mdc-tab::before{margin:5px}.cdk-high-contrast-active .mat-mdc-tab[aria-disabled=true]{color:GrayText}"]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: ViewportRuler
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], {
    _items: [{
      type: ContentChildren,
      args: [MatTabLabelWrapper, {
        descendants: false
      }]
    }],
    _tabListContainer: [{
      type: ViewChild,
      args: ["tabListContainer", {
        static: true
      }]
    }],
    _tabList: [{
      type: ViewChild,
      args: ["tabList", {
        static: true
      }]
    }],
    _tabListInner: [{
      type: ViewChild,
      args: ["tabListInner", {
        static: true
      }]
    }],
    _nextPaginator: [{
      type: ViewChild,
      args: ["nextPaginator"]
    }],
    _previousPaginator: [{
      type: ViewChild,
      args: ["previousPaginator"]
    }],
    ariaLabel: [{
      type: Input,
      args: ["aria-label"]
    }],
    ariaLabelledby: [{
      type: Input,
      args: ["aria-labelledby"]
    }],
    disableRipple: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var MAT_TABS_CONFIG = new InjectionToken("MAT_TABS_CONFIG");
var matTabsAnimations = {
  /** Animation translates a tab along the X axis. */
  translateTab: trigger("translateTab", [
    // Transitions to `none` instead of 0, because some browsers might blur the content.
    state("center, void, left-origin-center, right-origin-center", style({
      transform: "none",
      visibility: "visible"
    })),
    // If the tab is either on the left or right, we additionally add a `min-height` of 1px
    // in order to ensure that the element has a height before its state changes. This is
    // necessary because Chrome does seem to skip the transition in RTL mode if the element does
    // not have a static height and is not rendered. See related issue: #9465
    state("left", style({
      transform: "translate3d(-100%, 0, 0)",
      minHeight: "1px",
      // Normally this is redundant since we detach the content from the DOM, but if the user
      // opted into keeping the content in the DOM, we have to hide it so it isn't focusable.
      visibility: "hidden"
    })),
    state("right", style({
      transform: "translate3d(100%, 0, 0)",
      minHeight: "1px",
      visibility: "hidden"
    })),
    transition("* => left, * => right, left => center, right => center", animate("{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)")),
    transition("void => left-origin-center", [style({
      transform: "translate3d(-100%, 0, 0)",
      visibility: "hidden"
    }), animate("{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)")]),
    transition("void => right-origin-center", [style({
      transform: "translate3d(100%, 0, 0)",
      visibility: "hidden"
    }), animate("{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)")])
  ])
};
var MatTabBodyPortal = class _MatTabBodyPortal extends CdkPortalOutlet {
  constructor(componentFactoryResolver, viewContainerRef, _host, _document) {
    super(componentFactoryResolver, viewContainerRef, _document);
    this._host = _host;
    this._centeringSub = Subscription.EMPTY;
    this._leavingSub = Subscription.EMPTY;
  }
  /** Set initial visibility or set up subscription for changing visibility. */
  ngOnInit() {
    super.ngOnInit();
    this._centeringSub = this._host._beforeCentering.pipe(startWith(this._host._isCenterPosition(this._host._position))).subscribe((isCentering) => {
      if (this._host._content && isCentering && !this.hasAttached()) {
        this.attach(this._host._content);
      }
    });
    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {
      if (!this._host.preserveContent) {
        this.detach();
      }
    });
  }
  /** Clean up centering subscription. */
  ngOnDestroy() {
    super.ngOnDestroy();
    this._centeringSub.unsubscribe();
    this._leavingSub.unsubscribe();
  }
  static {
    this.\u0275fac = function MatTabBodyPortal_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabBodyPortal)(\u0275\u0275directiveInject(ComponentFactoryResolver$1), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(forwardRef(() => MatTabBody)), \u0275\u0275directiveInject(DOCUMENT));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _MatTabBodyPortal,
      selectors: [["", "matTabBodyHost", ""]],
      standalone: true,
      features: [\u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabBodyPortal, [{
    type: Directive,
    args: [{
      selector: "[matTabBodyHost]",
      standalone: true
    }]
  }], () => [{
    type: ComponentFactoryResolver$1
  }, {
    type: ViewContainerRef
  }, {
    type: MatTabBody,
    decorators: [{
      type: Inject,
      args: [forwardRef(() => MatTabBody)]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var MatTabBody = class _MatTabBody {
  /** The shifted index position of the tab body, where zero represents the active center tab. */
  set position(position) {
    this._positionIndex = position;
    this._computePositionAnimationState();
  }
  constructor(_elementRef, _dir, changeDetectorRef) {
    this._elementRef = _elementRef;
    this._dir = _dir;
    this._dirChangeSubscription = Subscription.EMPTY;
    this._translateTabComplete = new Subject();
    this._onCentering = new EventEmitter();
    this._beforeCentering = new EventEmitter();
    this._afterLeavingCenter = new EventEmitter();
    this._onCentered = new EventEmitter(true);
    this.animationDuration = "500ms";
    this.preserveContent = false;
    if (_dir) {
      this._dirChangeSubscription = _dir.change.subscribe((dir) => {
        this._computePositionAnimationState(dir);
        changeDetectorRef.markForCheck();
      });
    }
    this._translateTabComplete.subscribe((event) => {
      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {
        this._onCentered.emit();
      }
      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {
        this._afterLeavingCenter.emit();
      }
    });
  }
  /**
   * After initialized, check if the content is centered and has an origin. If so, set the
   * special position states that transition the tab from the left or right before centering.
   */
  ngOnInit() {
    if (this._position == "center" && this.origin != null) {
      this._position = this._computePositionFromOrigin(this.origin);
    }
  }
  ngOnDestroy() {
    this._dirChangeSubscription.unsubscribe();
    this._translateTabComplete.complete();
  }
  _onTranslateTabStarted(event) {
    const isCentering = this._isCenterPosition(event.toState);
    this._beforeCentering.emit(isCentering);
    if (isCentering) {
      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);
    }
  }
  /** The text direction of the containing app. */
  _getLayoutDirection() {
    return this._dir && this._dir.value === "rtl" ? "rtl" : "ltr";
  }
  /** Whether the provided position state is considered center, regardless of origin. */
  _isCenterPosition(position) {
    return position == "center" || position == "left-origin-center" || position == "right-origin-center";
  }
  /** Computes the position state that will be used for the tab-body animation trigger. */
  _computePositionAnimationState(dir = this._getLayoutDirection()) {
    if (this._positionIndex < 0) {
      this._position = dir == "ltr" ? "left" : "right";
    } else if (this._positionIndex > 0) {
      this._position = dir == "ltr" ? "right" : "left";
    } else {
      this._position = "center";
    }
  }
  /**
   * Computes the position state based on the specified origin position. This is used if the
   * tab is becoming visible immediately after creation.
   */
  _computePositionFromOrigin(origin) {
    const dir = this._getLayoutDirection();
    if (dir == "ltr" && origin <= 0 || dir == "rtl" && origin > 0) {
      return "left-origin-center";
    }
    return "right-origin-center";
  }
  static {
    this.\u0275fac = function MatTabBody_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabBody)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatTabBody,
      selectors: [["mat-tab-body"]],
      viewQuery: function MatTabBody_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(CdkPortalOutlet, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._portalHost = _t.first);
        }
      },
      hostAttrs: [1, "mat-mdc-tab-body"],
      inputs: {
        _content: [0, "content", "_content"],
        origin: "origin",
        animationDuration: "animationDuration",
        preserveContent: "preserveContent",
        position: "position"
      },
      outputs: {
        _onCentering: "_onCentering",
        _beforeCentering: "_beforeCentering",
        _afterLeavingCenter: "_afterLeavingCenter",
        _onCentered: "_onCentered"
      },
      standalone: true,
      features: [\u0275\u0275StandaloneFeature],
      decls: 3,
      vars: 6,
      consts: [["content", ""], ["cdkScrollable", "", 1, "mat-mdc-tab-body-content"], ["matTabBodyHost", ""]],
      template: function MatTabBody_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275elementStart(0, "div", 1, 0);
          \u0275\u0275listener("@translateTab.start", function MatTabBody_Template_div_animation_translateTab_start_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._onTranslateTabStarted($event));
          })("@translateTab.done", function MatTabBody_Template_div_animation_translateTab_done_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._translateTabComplete.next($event));
          });
          \u0275\u0275template(2, MatTabBody_ng_template_2_Template, 0, 0, "ng-template", 2);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275property("@translateTab", \u0275\u0275pureFunction2(3, _c7, ctx._position, \u0275\u0275pureFunction1(1, _c6, ctx.animationDuration)));
        }
      },
      dependencies: [MatTabBodyPortal, CdkScrollable],
      styles: ['.mat-mdc-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;outline:0;flex-basis:100%}.mat-mdc-tab-body.mat-mdc-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-mdc-tab-group.mat-mdc-tab-group-dynamic-height .mat-mdc-tab-body.mat-mdc-tab-body-active{overflow-y:hidden}.mat-mdc-tab-body-content{height:100%;overflow:auto}.mat-mdc-tab-group-dynamic-height .mat-mdc-tab-body-content{overflow:hidden}.mat-mdc-tab-body-content[style*="visibility: hidden"]{display:none}'],
      encapsulation: 2,
      data: {
        animation: [matTabsAnimations.translateTab]
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabBody, [{
    type: Component,
    args: [{
      selector: "mat-tab-body",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.Default,
      animations: [matTabsAnimations.translateTab],
      host: {
        "class": "mat-mdc-tab-body"
      },
      standalone: true,
      imports: [MatTabBodyPortal, CdkScrollable],
      template: '<div class="mat-mdc-tab-body-content" #content\n     [@translateTab]="{\n        value: _position,\n        params: {animationDuration: animationDuration}\n     }"\n     (@translateTab.start)="_onTranslateTabStarted($event)"\n     (@translateTab.done)="_translateTabComplete.next($event)"\n     cdkScrollable>\n  <ng-template matTabBodyHost></ng-template>\n</div>\n',
      styles: ['.mat-mdc-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;outline:0;flex-basis:100%}.mat-mdc-tab-body.mat-mdc-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-mdc-tab-group.mat-mdc-tab-group-dynamic-height .mat-mdc-tab-body.mat-mdc-tab-body-active{overflow-y:hidden}.mat-mdc-tab-body-content{height:100%;overflow:auto}.mat-mdc-tab-group-dynamic-height .mat-mdc-tab-body-content{overflow:hidden}.mat-mdc-tab-body-content[style*="visibility: hidden"]{display:none}']
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: ChangeDetectorRef
  }], {
    _onCentering: [{
      type: Output
    }],
    _beforeCentering: [{
      type: Output
    }],
    _afterLeavingCenter: [{
      type: Output
    }],
    _onCentered: [{
      type: Output
    }],
    _portalHost: [{
      type: ViewChild,
      args: [CdkPortalOutlet]
    }],
    _content: [{
      type: Input,
      args: ["content"]
    }],
    origin: [{
      type: Input
    }],
    animationDuration: [{
      type: Input
    }],
    preserveContent: [{
      type: Input
    }],
    position: [{
      type: Input
    }]
  });
})();
var nextId = 0;
var ENABLE_BACKGROUND_INPUT = true;
var MatTabGroup = class _MatTabGroup {
  /** Whether the ink bar should fit its width to the size of the tab label content. */
  get fitInkBarToContent() {
    return this._fitInkBarToContent;
  }
  set fitInkBarToContent(value) {
    this._fitInkBarToContent = value;
    this._changeDetectorRef.markForCheck();
  }
  /** The index of the active tab. */
  get selectedIndex() {
    return this._selectedIndex;
  }
  set selectedIndex(value) {
    this._indexToSelect = isNaN(value) ? null : value;
  }
  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */
  get animationDuration() {
    return this._animationDuration;
  }
  set animationDuration(value) {
    const stringValue = value + "";
    this._animationDuration = /^\d+$/.test(stringValue) ? value + "ms" : stringValue;
  }
  /**
   * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved
   * accessibility when the tab does not have focusable elements or if it has scrollable content.
   * The `tabindex` will be removed automatically for inactive tabs.
   * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html
   */
  get contentTabIndex() {
    return this._contentTabIndex;
  }
  set contentTabIndex(value) {
    this._contentTabIndex = isNaN(value) ? null : value;
  }
  /**
   * Theme color of the background of the tab group. This API is supported in M2 themes only, it
   * has no effect in M3 themes.
   *
   * For information on applying color variants in M3, see
   * https://material.angular.io/guide/theming#using-component-color-variants.
   *
   * @deprecated The background color should be customized through Sass theming APIs.
   * @breaking-change 20.0.0 Remove this input
   */
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(value) {
    if (!ENABLE_BACKGROUND_INPUT) {
      throw new Error(`mat-tab-group background color must be set through the Sass theming API`);
    }
    const classList = this._elementRef.nativeElement.classList;
    classList.remove("mat-tabs-with-background", `mat-background-${this.backgroundColor}`);
    if (value) {
      classList.add("mat-tabs-with-background", `mat-background-${value}`);
    }
    this._backgroundColor = value;
  }
  constructor(_elementRef, _changeDetectorRef, defaultConfig, _animationMode) {
    this._elementRef = _elementRef;
    this._changeDetectorRef = _changeDetectorRef;
    this._animationMode = _animationMode;
    this._tabs = new QueryList();
    this._indexToSelect = 0;
    this._lastFocusedTabIndex = null;
    this._tabBodyWrapperHeight = 0;
    this._tabsSubscription = Subscription.EMPTY;
    this._tabLabelSubscription = Subscription.EMPTY;
    this._fitInkBarToContent = false;
    this.stretchTabs = true;
    this.dynamicHeight = false;
    this._selectedIndex = null;
    this.headerPosition = "above";
    this.disablePagination = false;
    this.disableRipple = false;
    this.preserveContent = false;
    this.selectedIndexChange = new EventEmitter();
    this.focusChange = new EventEmitter();
    this.animationDone = new EventEmitter();
    this.selectedTabChange = new EventEmitter(true);
    this._isServer = !inject(Platform).isBrowser;
    this._groupId = nextId++;
    this.animationDuration = defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : "500ms";
    this.disablePagination = defaultConfig && defaultConfig.disablePagination != null ? defaultConfig.disablePagination : false;
    this.dynamicHeight = defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;
    if (defaultConfig?.contentTabIndex != null) {
      this.contentTabIndex = defaultConfig.contentTabIndex;
    }
    this.preserveContent = !!defaultConfig?.preserveContent;
    this.fitInkBarToContent = defaultConfig && defaultConfig.fitInkBarToContent != null ? defaultConfig.fitInkBarToContent : false;
    this.stretchTabs = defaultConfig && defaultConfig.stretchTabs != null ? defaultConfig.stretchTabs : true;
  }
  /**
   * After the content is checked, this component knows what tabs have been defined
   * and what the selected index should be. This is where we can know exactly what position
   * each tab should be in according to the new selected index, and additionally we know how
   * a new selected tab should transition in (from the left or right).
   */
  ngAfterContentChecked() {
    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);
    if (this._selectedIndex != indexToSelect) {
      const isFirstRun = this._selectedIndex == null;
      if (!isFirstRun) {
        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));
        const wrapper = this._tabBodyWrapper.nativeElement;
        wrapper.style.minHeight = wrapper.clientHeight + "px";
      }
      Promise.resolve().then(() => {
        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);
        if (!isFirstRun) {
          this.selectedIndexChange.emit(indexToSelect);
          this._tabBodyWrapper.nativeElement.style.minHeight = "";
        }
      });
    }
    this._tabs.forEach((tab, index) => {
      tab.position = index - indexToSelect;
      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {
        tab.origin = indexToSelect - this._selectedIndex;
      }
    });
    if (this._selectedIndex !== indexToSelect) {
      this._selectedIndex = indexToSelect;
      this._lastFocusedTabIndex = null;
      this._changeDetectorRef.markForCheck();
    }
  }
  ngAfterContentInit() {
    this._subscribeToAllTabChanges();
    this._subscribeToTabLabels();
    this._tabsSubscription = this._tabs.changes.subscribe(() => {
      const indexToSelect = this._clampTabIndex(this._indexToSelect);
      if (indexToSelect === this._selectedIndex) {
        const tabs = this._tabs.toArray();
        let selectedTab;
        for (let i = 0; i < tabs.length; i++) {
          if (tabs[i].isActive) {
            this._indexToSelect = this._selectedIndex = i;
            this._lastFocusedTabIndex = null;
            selectedTab = tabs[i];
            break;
          }
        }
        if (!selectedTab && tabs[indexToSelect]) {
          Promise.resolve().then(() => {
            tabs[indexToSelect].isActive = true;
            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));
          });
        }
      }
      this._changeDetectorRef.markForCheck();
    });
  }
  /** Listens to changes in all of the tabs. */
  _subscribeToAllTabChanges() {
    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs) => {
      this._tabs.reset(tabs.filter((tab) => {
        return tab._closestTabGroup === this || !tab._closestTabGroup;
      }));
      this._tabs.notifyOnChanges();
    });
  }
  ngOnDestroy() {
    this._tabs.destroy();
    this._tabsSubscription.unsubscribe();
    this._tabLabelSubscription.unsubscribe();
  }
  /** Re-aligns the ink bar to the selected tab element. */
  realignInkBar() {
    if (this._tabHeader) {
      this._tabHeader._alignInkBarToSelectedTab();
    }
  }
  /**
   * Recalculates the tab group's pagination dimensions.
   *
   * WARNING: Calling this method can be very costly in terms of performance. It should be called
   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the
   * page.
   */
  updatePagination() {
    if (this._tabHeader) {
      this._tabHeader.updatePagination();
    }
  }
  /**
   * Sets focus to a particular tab.
   * @param index Index of the tab to be focused.
   */
  focusTab(index) {
    const header = this._tabHeader;
    if (header) {
      header.focusIndex = index;
    }
  }
  _focusChanged(index) {
    this._lastFocusedTabIndex = index;
    this.focusChange.emit(this._createChangeEvent(index));
  }
  _createChangeEvent(index) {
    const event = new MatTabChangeEvent();
    event.index = index;
    if (this._tabs && this._tabs.length) {
      event.tab = this._tabs.toArray()[index];
    }
    return event;
  }
  /**
   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is
   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the
   * binding to be updated, we need to subscribe to changes in it and trigger change detection
   * manually.
   */
  _subscribeToTabLabels() {
    if (this._tabLabelSubscription) {
      this._tabLabelSubscription.unsubscribe();
    }
    this._tabLabelSubscription = merge(...this._tabs.map((tab) => tab._stateChanges)).subscribe(() => this._changeDetectorRef.markForCheck());
  }
  /** Clamps the given index to the bounds of 0 and the tabs length. */
  _clampTabIndex(index) {
    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));
  }
  /** Returns a unique id for each tab label element */
  _getTabLabelId(i) {
    return `mat-tab-label-${this._groupId}-${i}`;
  }
  /** Returns a unique id for each tab content element */
  _getTabContentId(i) {
    return `mat-tab-content-${this._groupId}-${i}`;
  }
  /**
   * Sets the height of the body wrapper to the height of the activating tab if dynamic
   * height property is true.
   */
  _setTabBodyWrapperHeight(tabHeight) {
    if (!this.dynamicHeight || !this._tabBodyWrapperHeight) {
      return;
    }
    const wrapper = this._tabBodyWrapper.nativeElement;
    wrapper.style.height = this._tabBodyWrapperHeight + "px";
    if (this._tabBodyWrapper.nativeElement.offsetHeight) {
      wrapper.style.height = tabHeight + "px";
    }
  }
  /** Removes the height of the tab body wrapper. */
  _removeTabBodyWrapperHeight() {
    const wrapper = this._tabBodyWrapper.nativeElement;
    this._tabBodyWrapperHeight = wrapper.clientHeight;
    wrapper.style.height = "";
    this.animationDone.emit();
  }
  /** Handle click events, setting new selected index if appropriate. */
  _handleClick(tab, tabHeader, index) {
    tabHeader.focusIndex = index;
    if (!tab.disabled) {
      this.selectedIndex = index;
    }
  }
  /** Retrieves the tabindex for the tab. */
  _getTabIndex(index) {
    const targetIndex = this._lastFocusedTabIndex ?? this.selectedIndex;
    return index === targetIndex ? 0 : -1;
  }
  /** Callback for when the focused state of a tab has changed. */
  _tabFocusChanged(focusOrigin, index) {
    if (focusOrigin && focusOrigin !== "mouse" && focusOrigin !== "touch") {
      this._tabHeader.focusIndex = index;
    }
  }
  static {
    this.\u0275fac = function MatTabGroup_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabGroup)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(MAT_TABS_CONFIG, 8), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatTabGroup,
      selectors: [["mat-tab-group"]],
      contentQueries: function MatTabGroup_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, MatTab, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._allTabs = _t);
        }
      },
      viewQuery: function MatTabGroup_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c8, 5);
          \u0275\u0275viewQuery(_c9, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabBodyWrapper = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabHeader = _t.first);
        }
      },
      hostAttrs: [1, "mat-mdc-tab-group"],
      hostVars: 10,
      hostBindings: function MatTabGroup_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classMap("mat-" + (ctx.color || "primary"));
          \u0275\u0275styleProp("--mat-tab-animation-duration", ctx.animationDuration);
          \u0275\u0275classProp("mat-mdc-tab-group-dynamic-height", ctx.dynamicHeight)("mat-mdc-tab-group-inverted-header", ctx.headerPosition === "below")("mat-mdc-tab-group-stretch-tabs", ctx.stretchTabs);
        }
      },
      inputs: {
        color: "color",
        fitInkBarToContent: [2, "fitInkBarToContent", "fitInkBarToContent", booleanAttribute],
        stretchTabs: [2, "mat-stretch-tabs", "stretchTabs", booleanAttribute],
        dynamicHeight: [2, "dynamicHeight", "dynamicHeight", booleanAttribute],
        selectedIndex: [2, "selectedIndex", "selectedIndex", numberAttribute],
        headerPosition: "headerPosition",
        animationDuration: "animationDuration",
        contentTabIndex: [2, "contentTabIndex", "contentTabIndex", numberAttribute],
        disablePagination: [2, "disablePagination", "disablePagination", booleanAttribute],
        disableRipple: [2, "disableRipple", "disableRipple", booleanAttribute],
        preserveContent: [2, "preserveContent", "preserveContent", booleanAttribute],
        backgroundColor: "backgroundColor",
        ariaLabel: [0, "aria-label", "ariaLabel"],
        ariaLabelledby: [0, "aria-labelledby", "ariaLabelledby"]
      },
      outputs: {
        selectedIndexChange: "selectedIndexChange",
        focusChange: "focusChange",
        animationDone: "animationDone",
        selectedTabChange: "selectedTabChange"
      },
      exportAs: ["matTabGroup"],
      standalone: true,
      features: [\u0275\u0275ProvidersFeature([{
        provide: MAT_TAB_GROUP,
        useExisting: _MatTabGroup
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275StandaloneFeature],
      ngContentSelectors: _c09,
      decls: 9,
      vars: 8,
      consts: [["tabHeader", ""], ["tabBodyWrapper", ""], ["tabNode", ""], [3, "indexFocused", "selectFocusedIndex", "selectedIndex", "disableRipple", "disablePagination", "aria-label", "aria-labelledby"], ["role", "tab", "matTabLabelWrapper", "", "cdkMonitorElementFocus", "", 1, "mdc-tab", "mat-mdc-tab", "mat-mdc-focus-indicator", 3, "id", "mdc-tab--active", "class", "disabled", "fitInkBarToContent"], [1, "mat-mdc-tab-body-wrapper"], ["role", "tabpanel", 3, "id", "mat-mdc-tab-body-active", "class", "content", "position", "origin", "animationDuration", "preserveContent"], ["role", "tab", "matTabLabelWrapper", "", "cdkMonitorElementFocus", "", 1, "mdc-tab", "mat-mdc-tab", "mat-mdc-focus-indicator", 3, "click", "cdkFocusChange", "id", "disabled", "fitInkBarToContent"], [1, "mdc-tab__ripple"], ["mat-ripple", "", 1, "mat-mdc-tab-ripple", 3, "matRippleTrigger", "matRippleDisabled"], [1, "mdc-tab__content"], [1, "mdc-tab__text-label"], [3, "cdkPortalOutlet"], ["role", "tabpanel", 3, "_onCentered", "_onCentering", "id", "content", "position", "origin", "animationDuration", "preserveContent"]],
      template: function MatTabGroup_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "mat-tab-header", 3, 0);
          \u0275\u0275listener("indexFocused", function MatTabGroup_Template_mat_tab_header_indexFocused_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._focusChanged($event));
          })("selectFocusedIndex", function MatTabGroup_Template_mat_tab_header_selectFocusedIndex_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.selectedIndex = $event);
          });
          \u0275\u0275repeaterCreate(2, MatTabGroup_For_3_Template, 8, 17, "div", 4, \u0275\u0275repeaterTrackByIdentity);
          \u0275\u0275elementEnd();
          \u0275\u0275template(4, MatTabGroup_Conditional_4_Template, 1, 0);
          \u0275\u0275elementStart(5, "div", 5, 1);
          \u0275\u0275repeaterCreate(7, MatTabGroup_For_8_Template, 1, 13, "mat-tab-body", 6, \u0275\u0275repeaterTrackByIdentity);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275property("selectedIndex", ctx.selectedIndex || 0)("disableRipple", ctx.disableRipple)("disablePagination", ctx.disablePagination)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby);
          \u0275\u0275advance(2);
          \u0275\u0275repeater(ctx._tabs);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx._isServer ? 4 : -1);
          \u0275\u0275advance();
          \u0275\u0275classProp("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
          \u0275\u0275advance(2);
          \u0275\u0275repeater(ctx._tabs);
        }
      },
      dependencies: [MatTabHeader, MatTabLabelWrapper, CdkMonitorFocus, MatRipple, CdkPortalOutlet, MatTabBody],
      styles: ['.mdc-tab{min-width:90px;padding:0 24px;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;border:none;outline:none;text-align:center;white-space:nowrap;cursor:pointer;z-index:1}.mdc-tab__content{display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab--active .mdc-tab__text-label{transition-delay:100ms}._mat-animation-noopable .mdc-tab__text-label{transition:none}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator__content{transition:var(--mat-tab-animation-duration, 250ms) transform cubic-bezier(0.4, 0, 0.2, 1);transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}._mat-animation-noopable .mdc-tab-indicator__content,.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mat-mdc-tab-ripple{position:absolute;top:0;left:0;bottom:0;right:0;pointer-events:none}.mat-mdc-tab{-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-decoration:none;background:none;height:var(--mdc-secondary-navigation-tab-container-height);font-family:var(--mat-tab-header-label-text-font, var(--mat-app-title-small-font));font-size:var(--mat-tab-header-label-text-size, var(--mat-app-title-small-size));letter-spacing:var(--mat-tab-header-label-text-tracking, var(--mat-app-title-small-tracking));line-height:var(--mat-tab-header-label-text-line-height, var(--mat-app-title-small-line-height));font-weight:var(--mat-tab-header-label-text-weight, var(--mat-app-title-small-weight))}.mat-mdc-tab.mdc-tab{flex-grow:0}.mat-mdc-tab .mdc-tab-indicator__content--underline{border-color:var(--mdc-tab-indicator-active-indicator-color, var(--mat-app-primary));border-top-width:var(--mdc-tab-indicator-active-indicator-height);border-radius:var(--mdc-tab-indicator-active-indicator-shape)}.mat-mdc-tab:hover .mdc-tab__text-label{color:var(--mat-tab-header-inactive-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab:focus .mdc-tab__text-label{color:var(--mat-tab-header-inactive-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active .mdc-tab__text-label{color:var(--mat-tab-header-active-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active .mdc-tab__ripple::before,.mat-mdc-tab.mdc-tab--active .mat-ripple-element{background-color:var(--mat-tab-header-active-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active:hover .mdc-tab__text-label{color:var(--mat-tab-header-active-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active:hover .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-hover-indicator-color, var(--mat-app-primary))}.mat-mdc-tab.mdc-tab--active:focus .mdc-tab__text-label{color:var(--mat-tab-header-active-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active:focus .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-focus-indicator-color, var(--mat-app-primary))}.mat-mdc-tab.mat-mdc-tab-disabled{opacity:.4;pointer-events:none}.mat-mdc-tab.mat-mdc-tab-disabled .mdc-tab__content{pointer-events:none}.mat-mdc-tab.mat-mdc-tab-disabled .mdc-tab__ripple::before,.mat-mdc-tab.mat-mdc-tab-disabled .mat-ripple-element{background-color:var(--mat-tab-header-disabled-ripple-color)}.mat-mdc-tab .mdc-tab__ripple::before{content:"";display:block;position:absolute;top:0;left:0;right:0;bottom:0;opacity:0;pointer-events:none;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab .mdc-tab__text-label{color:var(--mat-tab-header-inactive-label-text-color, var(--mat-app-on-surface));display:inline-flex;align-items:center}.mat-mdc-tab .mdc-tab__content{position:relative;pointer-events:auto}.mat-mdc-tab:hover .mdc-tab__ripple::before{opacity:.04}.mat-mdc-tab.cdk-program-focused .mdc-tab__ripple::before,.mat-mdc-tab.cdk-keyboard-focused .mdc-tab__ripple::before{opacity:.12}.mat-mdc-tab .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-group.mat-mdc-tab-group-stretch-tabs>.mat-mdc-tab-header .mat-mdc-tab{flex-grow:1}.mat-mdc-tab-group{display:flex;flex-direction:column;max-width:100%}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination{background-color:var(--mat-tab-header-with-background-background-color)}.mat-mdc-tab-group.mat-tabs-with-background.mat-primary>.mat-mdc-tab-header .mat-mdc-tab .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background.mat-primary>.mat-mdc-tab-header .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-header .mat-mdc-tab:not(.mdc-tab--active) .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-header .mat-mdc-tab:not(.mdc-tab--active) .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-mdc-focus-indicator::before,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-focus-indicator::before{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-ripple-element,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mdc-tab__ripple::before,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-ripple-element,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mdc-tab__ripple::before{background-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-mdc-tab-group-inverted-header{flex-direction:column-reverse}.mat-mdc-tab-group.mat-mdc-tab-group-inverted-header .mdc-tab-indicator__content--underline{align-self:flex-start}.mat-mdc-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-mdc-tab-body-wrapper._mat-animation-noopable{transition:none !important;animation:none !important}'],
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabGroup, [{
    type: Component,
    args: [{
      selector: "mat-tab-group",
      exportAs: "matTabGroup",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.Default,
      providers: [{
        provide: MAT_TAB_GROUP,
        useExisting: MatTabGroup
      }],
      host: {
        "class": "mat-mdc-tab-group",
        "[class]": '"mat-" + (color || "primary")',
        "[class.mat-mdc-tab-group-dynamic-height]": "dynamicHeight",
        "[class.mat-mdc-tab-group-inverted-header]": 'headerPosition === "below"',
        "[class.mat-mdc-tab-group-stretch-tabs]": "stretchTabs",
        "[style.--mat-tab-animation-duration]": "animationDuration"
      },
      standalone: true,
      imports: [MatTabHeader, MatTabLabelWrapper, CdkMonitorFocus, MatRipple, CdkPortalOutlet, MatTabBody],
      template: '<mat-tab-header #tabHeader\n                [selectedIndex]="selectedIndex || 0"\n                [disableRipple]="disableRipple"\n                [disablePagination]="disablePagination"\n                [aria-label]="ariaLabel"\n                [aria-labelledby]="ariaLabelledby"\n                (indexFocused)="_focusChanged($event)"\n                (selectFocusedIndex)="selectedIndex = $event">\n\n  @for (tab of _tabs; track tab; let i = $index) {\n    <div class="mdc-tab mat-mdc-tab mat-mdc-focus-indicator"\n        #tabNode\n        role="tab"\n        matTabLabelWrapper\n        cdkMonitorElementFocus\n        [id]="_getTabLabelId(i)"\n        [attr.tabIndex]="_getTabIndex(i)"\n        [attr.aria-posinset]="i + 1"\n        [attr.aria-setsize]="_tabs.length"\n        [attr.aria-controls]="_getTabContentId(i)"\n        [attr.aria-selected]="selectedIndex === i"\n        [attr.aria-label]="tab.ariaLabel || null"\n        [attr.aria-labelledby]="(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null"\n        [class.mdc-tab--active]="selectedIndex === i"\n        [class]="tab.labelClass"\n        [disabled]="tab.disabled"\n        [fitInkBarToContent]="fitInkBarToContent"\n        (click)="_handleClick(tab, tabHeader, i)"\n        (cdkFocusChange)="_tabFocusChanged($event, i)">\n      <span class="mdc-tab__ripple"></span>\n\n      <!-- Needs to be a separate element, because we can\'t put\n          `overflow: hidden` on tab due to the ink bar. -->\n      <div\n        class="mat-mdc-tab-ripple"\n        mat-ripple\n        [matRippleTrigger]="tabNode"\n        [matRippleDisabled]="tab.disabled || disableRipple"></div>\n\n      <span class="mdc-tab__content">\n        <span class="mdc-tab__text-label">\n          <!--\n            If there is a label template, use it, otherwise fall back to the text label.\n            Note that we don\'t have indentation around the text label, because it adds\n            whitespace around the text which breaks some internal tests.\n          -->\n          @if (tab.templateLabel) {\n            <ng-template [cdkPortalOutlet]="tab.templateLabel"></ng-template>\n          } @else {{{tab.textLabel}}}\n        </span>\n      </span>\n    </div>\n  }\n</mat-tab-header>\n\n<!--\n  We need to project the content somewhere to avoid hydration errors. Some observations:\n  1. This is only necessary on the server.\n  2. We get a hydration error if there aren\'t any nodes after the `ng-content`.\n  3. We get a hydration error if `ng-content` is wrapped in another element.\n-->\n@if (_isServer) {\n  <ng-content/>\n}\n\n<div\n  class="mat-mdc-tab-body-wrapper"\n  [class._mat-animation-noopable]="_animationMode === \'NoopAnimations\'"\n  #tabBodyWrapper>\n  @for (tab of _tabs; track tab; let i = $index) {\n    <mat-tab-body role="tabpanel"\n                 [id]="_getTabContentId(i)"\n                 [attr.tabindex]="(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null"\n                 [attr.aria-labelledby]="_getTabLabelId(i)"\n                 [attr.aria-hidden]="selectedIndex !== i"\n                 [class.mat-mdc-tab-body-active]="selectedIndex === i"\n                 [class]="tab.bodyClass"\n                 [content]="tab.content!"\n                 [position]="tab.position!"\n                 [origin]="tab.origin"\n                 [animationDuration]="animationDuration"\n                 [preserveContent]="preserveContent"\n                 (_onCentered)="_removeTabBodyWrapperHeight()"\n                 (_onCentering)="_setTabBodyWrapperHeight($event)">\n    </mat-tab-body>\n  }\n</div>\n',
      styles: ['.mdc-tab{min-width:90px;padding:0 24px;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;border:none;outline:none;text-align:center;white-space:nowrap;cursor:pointer;z-index:1}.mdc-tab__content{display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab--active .mdc-tab__text-label{transition-delay:100ms}._mat-animation-noopable .mdc-tab__text-label{transition:none}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator__content{transition:var(--mat-tab-animation-duration, 250ms) transform cubic-bezier(0.4, 0, 0.2, 1);transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}._mat-animation-noopable .mdc-tab-indicator__content,.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mat-mdc-tab-ripple{position:absolute;top:0;left:0;bottom:0;right:0;pointer-events:none}.mat-mdc-tab{-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-decoration:none;background:none;height:var(--mdc-secondary-navigation-tab-container-height);font-family:var(--mat-tab-header-label-text-font, var(--mat-app-title-small-font));font-size:var(--mat-tab-header-label-text-size, var(--mat-app-title-small-size));letter-spacing:var(--mat-tab-header-label-text-tracking, var(--mat-app-title-small-tracking));line-height:var(--mat-tab-header-label-text-line-height, var(--mat-app-title-small-line-height));font-weight:var(--mat-tab-header-label-text-weight, var(--mat-app-title-small-weight))}.mat-mdc-tab.mdc-tab{flex-grow:0}.mat-mdc-tab .mdc-tab-indicator__content--underline{border-color:var(--mdc-tab-indicator-active-indicator-color, var(--mat-app-primary));border-top-width:var(--mdc-tab-indicator-active-indicator-height);border-radius:var(--mdc-tab-indicator-active-indicator-shape)}.mat-mdc-tab:hover .mdc-tab__text-label{color:var(--mat-tab-header-inactive-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab:focus .mdc-tab__text-label{color:var(--mat-tab-header-inactive-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active .mdc-tab__text-label{color:var(--mat-tab-header-active-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active .mdc-tab__ripple::before,.mat-mdc-tab.mdc-tab--active .mat-ripple-element{background-color:var(--mat-tab-header-active-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active:hover .mdc-tab__text-label{color:var(--mat-tab-header-active-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active:hover .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-hover-indicator-color, var(--mat-app-primary))}.mat-mdc-tab.mdc-tab--active:focus .mdc-tab__text-label{color:var(--mat-tab-header-active-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab.mdc-tab--active:focus .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-focus-indicator-color, var(--mat-app-primary))}.mat-mdc-tab.mat-mdc-tab-disabled{opacity:.4;pointer-events:none}.mat-mdc-tab.mat-mdc-tab-disabled .mdc-tab__content{pointer-events:none}.mat-mdc-tab.mat-mdc-tab-disabled .mdc-tab__ripple::before,.mat-mdc-tab.mat-mdc-tab-disabled .mat-ripple-element{background-color:var(--mat-tab-header-disabled-ripple-color)}.mat-mdc-tab .mdc-tab__ripple::before{content:"";display:block;position:absolute;top:0;left:0;right:0;bottom:0;opacity:0;pointer-events:none;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab .mdc-tab__text-label{color:var(--mat-tab-header-inactive-label-text-color, var(--mat-app-on-surface));display:inline-flex;align-items:center}.mat-mdc-tab .mdc-tab__content{position:relative;pointer-events:auto}.mat-mdc-tab:hover .mdc-tab__ripple::before{opacity:.04}.mat-mdc-tab.cdk-program-focused .mdc-tab__ripple::before,.mat-mdc-tab.cdk-keyboard-focused .mdc-tab__ripple::before{opacity:.12}.mat-mdc-tab .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-group.mat-mdc-tab-group-stretch-tabs>.mat-mdc-tab-header .mat-mdc-tab{flex-grow:1}.mat-mdc-tab-group{display:flex;flex-direction:column;max-width:100%}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination{background-color:var(--mat-tab-header-with-background-background-color)}.mat-mdc-tab-group.mat-tabs-with-background.mat-primary>.mat-mdc-tab-header .mat-mdc-tab .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background.mat-primary>.mat-mdc-tab-header .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-header .mat-mdc-tab:not(.mdc-tab--active) .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-header .mat-mdc-tab:not(.mdc-tab--active) .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-mdc-focus-indicator::before,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-focus-indicator::before{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-ripple-element,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mdc-tab__ripple::before,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-ripple-element,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mdc-tab__ripple::before{background-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-group.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-group.mat-mdc-tab-group-inverted-header{flex-direction:column-reverse}.mat-mdc-tab-group.mat-mdc-tab-group-inverted-header .mdc-tab-indicator__content--underline{align-self:flex-start}.mat-mdc-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-mdc-tab-body-wrapper._mat-animation-noopable{transition:none !important;animation:none !important}']
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_TABS_CONFIG]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], {
    _allTabs: [{
      type: ContentChildren,
      args: [MatTab, {
        descendants: true
      }]
    }],
    _tabBodyWrapper: [{
      type: ViewChild,
      args: ["tabBodyWrapper"]
    }],
    _tabHeader: [{
      type: ViewChild,
      args: ["tabHeader"]
    }],
    color: [{
      type: Input
    }],
    fitInkBarToContent: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    stretchTabs: [{
      type: Input,
      args: [{
        alias: "mat-stretch-tabs",
        transform: booleanAttribute
      }]
    }],
    dynamicHeight: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    selectedIndex: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    headerPosition: [{
      type: Input
    }],
    animationDuration: [{
      type: Input
    }],
    contentTabIndex: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    disablePagination: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    disableRipple: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    preserveContent: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    backgroundColor: [{
      type: Input
    }],
    ariaLabel: [{
      type: Input,
      args: ["aria-label"]
    }],
    ariaLabelledby: [{
      type: Input,
      args: ["aria-labelledby"]
    }],
    selectedIndexChange: [{
      type: Output
    }],
    focusChange: [{
      type: Output
    }],
    animationDone: [{
      type: Output
    }],
    selectedTabChange: [{
      type: Output
    }]
  });
})();
var MatTabChangeEvent = class {
};
var nextUniqueId = 0;
var MatTabNav = class _MatTabNav extends MatPaginatedTabHeader {
  /** Whether the ink bar should fit its width to the size of the tab label content. */
  get fitInkBarToContent() {
    return this._fitInkBarToContent.value;
  }
  set fitInkBarToContent(value) {
    this._fitInkBarToContent.next(value);
    this._changeDetectorRef.markForCheck();
  }
  get animationDuration() {
    return this._animationDuration;
  }
  set animationDuration(value) {
    const stringValue = value + "";
    this._animationDuration = /^\d+$/.test(stringValue) ? value + "ms" : stringValue;
  }
  /**
   * Theme color of the background of the tab nav. This API is supported in M2 themes only, it
   * has no effect in M3 themes.
   *
   * For information on applying color variants in M3, see
   * https://material.angular.io/guide/theming#using-component-color-variants.
   */
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(value) {
    const classList = this._elementRef.nativeElement.classList;
    classList.remove("mat-tabs-with-background", `mat-background-${this.backgroundColor}`);
    if (value) {
      classList.add("mat-tabs-with-background", `mat-background-${value}`);
    }
    this._backgroundColor = value;
  }
  constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode, defaultConfig) {
    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);
    this._fitInkBarToContent = new BehaviorSubject(false);
    this.stretchTabs = true;
    this.disableRipple = false;
    this.color = "primary";
    this.disablePagination = defaultConfig && defaultConfig.disablePagination != null ? defaultConfig.disablePagination : false;
    this.fitInkBarToContent = defaultConfig && defaultConfig.fitInkBarToContent != null ? defaultConfig.fitInkBarToContent : false;
    this.stretchTabs = defaultConfig && defaultConfig.stretchTabs != null ? defaultConfig.stretchTabs : true;
  }
  _itemSelected() {
  }
  ngAfterContentInit() {
    this._inkBar = new MatInkBar(this._items);
    this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
      this.updateActiveLink();
    });
    super.ngAfterContentInit();
  }
  ngAfterViewInit() {
    if (!this.tabPanel && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw new Error("A mat-tab-nav-panel must be specified via [tabPanel].");
    }
    super.ngAfterViewInit();
  }
  /** Notifies the component that the active link has been changed. */
  updateActiveLink() {
    if (!this._items) {
      return;
    }
    const items = this._items.toArray();
    for (let i = 0; i < items.length; i++) {
      if (items[i].active) {
        this.selectedIndex = i;
        this._changeDetectorRef.markForCheck();
        if (this.tabPanel) {
          this.tabPanel._activeTabId = items[i].id;
        }
        return;
      }
    }
    this.selectedIndex = -1;
    this._inkBar.hide();
  }
  _getRole() {
    return this.tabPanel ? "tablist" : this._elementRef.nativeElement.getAttribute("role");
  }
  static {
    this.\u0275fac = function MatTabNav_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabNav)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ViewportRuler), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8), \u0275\u0275directiveInject(MAT_TABS_CONFIG, 8));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatTabNav,
      selectors: [["", "mat-tab-nav-bar", ""]],
      contentQueries: function MatTabNav_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, MatTabLink, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._items = _t);
        }
      },
      viewQuery: function MatTabNav_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c16, 7);
          \u0275\u0275viewQuery(_c25, 7);
          \u0275\u0275viewQuery(_c33, 7);
          \u0275\u0275viewQuery(_c42, 5);
          \u0275\u0275viewQuery(_c5, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabListContainer = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabList = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tabListInner = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._nextPaginator = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._previousPaginator = _t.first);
        }
      },
      hostAttrs: [1, "mat-mdc-tab-nav-bar", "mat-mdc-tab-header"],
      hostVars: 17,
      hostBindings: function MatTabNav_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275attribute("role", ctx._getRole());
          \u0275\u0275styleProp("--mat-tab-animation-duration", ctx.animationDuration);
          \u0275\u0275classProp("mat-mdc-tab-header-pagination-controls-enabled", ctx._showPaginationControls)("mat-mdc-tab-header-rtl", ctx._getLayoutDirection() == "rtl")("mat-mdc-tab-nav-bar-stretch-tabs", ctx.stretchTabs)("mat-primary", ctx.color !== "warn" && ctx.color !== "accent")("mat-accent", ctx.color === "accent")("mat-warn", ctx.color === "warn")("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
        }
      },
      inputs: {
        fitInkBarToContent: [2, "fitInkBarToContent", "fitInkBarToContent", booleanAttribute],
        stretchTabs: [2, "mat-stretch-tabs", "stretchTabs", booleanAttribute],
        animationDuration: "animationDuration",
        backgroundColor: "backgroundColor",
        disableRipple: [2, "disableRipple", "disableRipple", booleanAttribute],
        color: "color",
        tabPanel: "tabPanel"
      },
      exportAs: ["matTabNavBar", "matTabNav"],
      standalone: true,
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
      attrs: _c10,
      ngContentSelectors: _c09,
      decls: 13,
      vars: 6,
      consts: [["previousPaginator", ""], ["tabListContainer", ""], ["tabList", ""], ["tabListInner", ""], ["nextPaginator", ""], ["mat-ripple", "", 1, "mat-mdc-tab-header-pagination", "mat-mdc-tab-header-pagination-before", 3, "click", "mousedown", "touchend", "matRippleDisabled"], [1, "mat-mdc-tab-header-pagination-chevron"], [1, "mat-mdc-tab-link-container", 3, "keydown"], [1, "mat-mdc-tab-list", 3, "cdkObserveContent"], [1, "mat-mdc-tab-links"], ["mat-ripple", "", 1, "mat-mdc-tab-header-pagination", "mat-mdc-tab-header-pagination-after", 3, "mousedown", "click", "touchend", "matRippleDisabled"]],
      template: function MatTabNav_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "div", 5, 0);
          \u0275\u0275listener("click", function MatTabNav_Template_div_click_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorClick("before"));
          })("mousedown", function MatTabNav_Template_div_mousedown_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorPress("before", $event));
          })("touchend", function MatTabNav_Template_div_touchend_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._stopInterval());
          });
          \u0275\u0275element(2, "div", 6);
          \u0275\u0275elementEnd();
          \u0275\u0275elementStart(3, "div", 7, 1);
          \u0275\u0275listener("keydown", function MatTabNav_Template_div_keydown_3_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handleKeydown($event));
          });
          \u0275\u0275elementStart(5, "div", 8, 2);
          \u0275\u0275listener("cdkObserveContent", function MatTabNav_Template_div_cdkObserveContent_5_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._onContentChanges());
          });
          \u0275\u0275elementStart(7, "div", 9, 3);
          \u0275\u0275projection(9);
          \u0275\u0275elementEnd()()();
          \u0275\u0275elementStart(10, "div", 10, 4);
          \u0275\u0275listener("mousedown", function MatTabNav_Template_div_mousedown_10_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorPress("after", $event));
          })("click", function MatTabNav_Template_div_click_10_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._handlePaginatorClick("after"));
          })("touchend", function MatTabNav_Template_div_touchend_10_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx._stopInterval());
          });
          \u0275\u0275element(12, "div", 6);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275classProp("mat-mdc-tab-header-pagination-disabled", ctx._disableScrollBefore);
          \u0275\u0275property("matRippleDisabled", ctx._disableScrollBefore || ctx.disableRipple);
          \u0275\u0275advance(10);
          \u0275\u0275classProp("mat-mdc-tab-header-pagination-disabled", ctx._disableScrollAfter);
          \u0275\u0275property("matRippleDisabled", ctx._disableScrollAfter || ctx.disableRipple);
        }
      },
      dependencies: [MatRipple, CdkObserveContent],
      styles: [".mdc-tab{min-width:90px;padding:0 24px;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;border:none;outline:none;text-align:center;white-space:nowrap;cursor:pointer;z-index:1}.mdc-tab__content{display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab--active .mdc-tab__text-label{transition-delay:100ms}._mat-animation-noopable .mdc-tab__text-label{transition:none}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator__content{transition:var(--mat-tab-animation-duration, 250ms) transform cubic-bezier(0.4, 0, 0.2, 1);transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}._mat-animation-noopable .mdc-tab-indicator__content,.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mat-mdc-tab-ripple{position:absolute;top:0;left:0;bottom:0;right:0;pointer-events:none}.mat-mdc-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mdc-tab-indicator .mdc-tab-indicator__content{transition-duration:var(--mat-tab-animation-duration, 250ms)}.mat-mdc-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:rgba(0,0,0,0);touch-action:none;box-sizing:content-box;outline:0}.mat-mdc-tab-header-pagination::-moz-focus-inner{border:0}.mat-mdc-tab-header-pagination .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-controls-enabled .mat-mdc-tab-header-pagination{display:flex}.mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after{padding-left:4px}.mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-pagination-after{padding-right:4px}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-mdc-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px;border-color:var(--mat-tab-header-pagination-icon-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-disabled{box-shadow:none;cursor:default;pointer-events:none}.mat-mdc-tab-header-pagination-disabled .mat-mdc-tab-header-pagination-chevron{opacity:.4}.mat-mdc-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-mdc-tab-list{transition:none}.mat-mdc-tab-links{display:flex;flex:1 0 auto}[mat-align-tabs=center]>.mat-mdc-tab-link-container .mat-mdc-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-mdc-tab-link-container .mat-mdc-tab-links{justify-content:flex-end}.cdk-drop-list .mat-mdc-tab-links,.mat-mdc-tab-links.cdk-drop-list{min-height:var(--mdc-secondary-navigation-tab-container-height)}.mat-mdc-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1;border-bottom-style:solid;border-bottom-width:var(--mat-tab-header-divider-height);border-bottom-color:var(--mat-tab-header-divider-color, var(--mat-app-surface-variant))}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination{background-color:var(--mat-tab-header-with-background-background-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background.mat-primary>.mat-mdc-tab-link-container .mat-mdc-tab-link .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background.mat-primary>.mat-mdc-tab-link-container .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-link-container .mat-mdc-tab-link:not(.mdc-tab--active) .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-link-container .mat-mdc-tab-link:not(.mdc-tab--active) .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-mdc-focus-indicator::before,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-focus-indicator::before{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-ripple-element,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mdc-tab__ripple::before,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-ripple-element,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mdc-tab__ripple::before{background-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron{color:var(--mat-tab-header-with-background-foreground-color)}"],
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabNav, [{
    type: Component,
    args: [{
      selector: "[mat-tab-nav-bar]",
      exportAs: "matTabNavBar, matTabNav",
      host: {
        "[attr.role]": "_getRole()",
        "class": "mat-mdc-tab-nav-bar mat-mdc-tab-header",
        "[class.mat-mdc-tab-header-pagination-controls-enabled]": "_showPaginationControls",
        "[class.mat-mdc-tab-header-rtl]": "_getLayoutDirection() == 'rtl'",
        "[class.mat-mdc-tab-nav-bar-stretch-tabs]": "stretchTabs",
        "[class.mat-primary]": 'color !== "warn" && color !== "accent"',
        "[class.mat-accent]": 'color === "accent"',
        "[class.mat-warn]": 'color === "warn"',
        "[class._mat-animation-noopable]": '_animationMode === "NoopAnimations"',
        "[style.--mat-tab-animation-duration]": "animationDuration"
      },
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.Default,
      standalone: true,
      imports: [MatRipple, CdkObserveContent],
      template: `<!--
 Note that this intentionally uses a \`div\` instead of a \`button\`, because it's not part of
 the regular tabs flow and is only here to support mouse users. It should also not be focusable.
-->
<div class="mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-before"
     #previousPaginator
     mat-ripple
     [matRippleDisabled]="_disableScrollBefore || disableRipple"
     [class.mat-mdc-tab-header-pagination-disabled]="_disableScrollBefore"
     (click)="_handlePaginatorClick('before')"
     (mousedown)="_handlePaginatorPress('before', $event)"
     (touchend)="_stopInterval()">
  <div class="mat-mdc-tab-header-pagination-chevron"></div>
</div>

<div class="mat-mdc-tab-link-container" #tabListContainer (keydown)="_handleKeydown($event)">
  <div class="mat-mdc-tab-list" #tabList (cdkObserveContent)="_onContentChanges()">
    <div class="mat-mdc-tab-links" #tabListInner>
      <ng-content></ng-content>
    </div>
  </div>
</div>

<div class="mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-after"
     #nextPaginator
     mat-ripple
     [matRippleDisabled]="_disableScrollAfter || disableRipple"
     [class.mat-mdc-tab-header-pagination-disabled]="_disableScrollAfter"
     (mousedown)="_handlePaginatorPress('after', $event)"
     (click)="_handlePaginatorClick('after')"
     (touchend)="_stopInterval()">
  <div class="mat-mdc-tab-header-pagination-chevron"></div>
</div>
`,
      styles: [".mdc-tab{min-width:90px;padding:0 24px;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;border:none;outline:none;text-align:center;white-space:nowrap;cursor:pointer;z-index:1}.mdc-tab__content{display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab--active .mdc-tab__text-label{transition-delay:100ms}._mat-animation-noopable .mdc-tab__text-label{transition:none}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator__content{transition:var(--mat-tab-animation-duration, 250ms) transform cubic-bezier(0.4, 0, 0.2, 1);transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}._mat-animation-noopable .mdc-tab-indicator__content,.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mat-mdc-tab-ripple{position:absolute;top:0;left:0;bottom:0;right:0;pointer-events:none}.mat-mdc-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mdc-tab-indicator .mdc-tab-indicator__content{transition-duration:var(--mat-tab-animation-duration, 250ms)}.mat-mdc-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:rgba(0,0,0,0);touch-action:none;box-sizing:content-box;outline:0}.mat-mdc-tab-header-pagination::-moz-focus-inner{border:0}.mat-mdc-tab-header-pagination .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-controls-enabled .mat-mdc-tab-header-pagination{display:flex}.mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after{padding-left:4px}.mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before,.mat-mdc-tab-header-pagination-after{padding-right:4px}.mat-mdc-tab-header-rtl .mat-mdc-tab-header-pagination-before .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-header-pagination-after .mat-mdc-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-mdc-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px;border-color:var(--mat-tab-header-pagination-icon-color, var(--mat-app-on-surface))}.mat-mdc-tab-header-pagination-disabled{box-shadow:none;cursor:default;pointer-events:none}.mat-mdc-tab-header-pagination-disabled .mat-mdc-tab-header-pagination-chevron{opacity:.4}.mat-mdc-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-mdc-tab-list{transition:none}.mat-mdc-tab-links{display:flex;flex:1 0 auto}[mat-align-tabs=center]>.mat-mdc-tab-link-container .mat-mdc-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-mdc-tab-link-container .mat-mdc-tab-links{justify-content:flex-end}.cdk-drop-list .mat-mdc-tab-links,.mat-mdc-tab-links.cdk-drop-list{min-height:var(--mdc-secondary-navigation-tab-container-height)}.mat-mdc-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1;border-bottom-style:solid;border-bottom-width:var(--mat-tab-header-divider-height);border-bottom-color:var(--mat-tab-header-divider-color, var(--mat-app-surface-variant))}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination{background-color:var(--mat-tab-header-with-background-background-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background.mat-primary>.mat-mdc-tab-link-container .mat-mdc-tab-link .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background.mat-primary>.mat-mdc-tab-link-container .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-link-container .mat-mdc-tab-link:not(.mdc-tab--active) .mdc-tab__text-label{color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background:not(.mat-primary)>.mat-mdc-tab-link-container .mat-mdc-tab-link:not(.mdc-tab--active) .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-mdc-focus-indicator::before,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-focus-indicator::before{border-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-ripple-element,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mdc-tab__ripple::before,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-ripple-element,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mdc-tab__ripple::before{background-color:var(--mat-tab-header-with-background-foreground-color)}.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-link-container .mat-mdc-tab-header-pagination-chevron,.mat-mdc-tab-nav-bar.mat-tabs-with-background>.mat-mdc-tab-header-pagination .mat-mdc-tab-header-pagination-chevron{color:var(--mat-tab-header-with-background-foreground-color)}"]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: ViewportRuler
  }, {
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_TABS_CONFIG]
    }]
  }], {
    fitInkBarToContent: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    stretchTabs: [{
      type: Input,
      args: [{
        alias: "mat-stretch-tabs",
        transform: booleanAttribute
      }]
    }],
    animationDuration: [{
      type: Input
    }],
    _items: [{
      type: ContentChildren,
      args: [forwardRef(() => MatTabLink), {
        descendants: true
      }]
    }],
    backgroundColor: [{
      type: Input
    }],
    disableRipple: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    color: [{
      type: Input
    }],
    tabPanel: [{
      type: Input
    }],
    _tabListContainer: [{
      type: ViewChild,
      args: ["tabListContainer", {
        static: true
      }]
    }],
    _tabList: [{
      type: ViewChild,
      args: ["tabList", {
        static: true
      }]
    }],
    _tabListInner: [{
      type: ViewChild,
      args: ["tabListInner", {
        static: true
      }]
    }],
    _nextPaginator: [{
      type: ViewChild,
      args: ["nextPaginator"]
    }],
    _previousPaginator: [{
      type: ViewChild,
      args: ["previousPaginator"]
    }]
  });
})();
var MatTabLink = class _MatTabLink extends InkBarItem {
  /** Whether the link is active. */
  get active() {
    return this._isActive;
  }
  set active(value) {
    if (value !== this._isActive) {
      this._isActive = value;
      this._tabNavBar.updateActiveLink();
    }
  }
  /**
   * Whether ripples are disabled on interaction.
   * @docs-private
   */
  get rippleDisabled() {
    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple || !!this.rippleConfig.disabled;
  }
  constructor(_tabNavBar, elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {
    super();
    this._tabNavBar = _tabNavBar;
    this.elementRef = elementRef;
    this._focusMonitor = _focusMonitor;
    this._destroyed = new Subject();
    this._isActive = false;
    this.disabled = false;
    this.disableRipple = false;
    this.tabIndex = 0;
    this.id = `mat-tab-link-${nextUniqueId++}`;
    this.rippleConfig = globalRippleOptions || {};
    this.tabIndex = parseInt(tabIndex) || 0;
    if (animationMode === "NoopAnimations") {
      this.rippleConfig.animation = {
        enterDuration: 0,
        exitDuration: 0
      };
    }
    _tabNavBar._fitInkBarToContent.pipe(takeUntil(this._destroyed)).subscribe((fitInkBarToContent) => {
      this.fitInkBarToContent = fitInkBarToContent;
    });
  }
  /** Focuses the tab link. */
  focus() {
    this.elementRef.nativeElement.focus();
  }
  ngAfterViewInit() {
    this._focusMonitor.monitor(this.elementRef);
  }
  ngOnDestroy() {
    this._destroyed.next();
    this._destroyed.complete();
    super.ngOnDestroy();
    this._focusMonitor.stopMonitoring(this.elementRef);
  }
  _handleFocus() {
    this._tabNavBar.focusIndex = this._tabNavBar._items.toArray().indexOf(this);
  }
  _handleKeydown(event) {
    if (event.keyCode === SPACE || event.keyCode === ENTER) {
      if (this.disabled) {
        event.preventDefault();
      } else if (this._tabNavBar.tabPanel) {
        if (event.keyCode === SPACE) {
          event.preventDefault();
        }
        this.elementRef.nativeElement.click();
      }
    }
  }
  _getAriaControls() {
    return this._tabNavBar.tabPanel ? this._tabNavBar.tabPanel?.id : this.elementRef.nativeElement.getAttribute("aria-controls");
  }
  _getAriaSelected() {
    if (this._tabNavBar.tabPanel) {
      return this.active ? "true" : "false";
    } else {
      return this.elementRef.nativeElement.getAttribute("aria-selected");
    }
  }
  _getAriaCurrent() {
    return this.active && !this._tabNavBar.tabPanel ? "page" : null;
  }
  _getRole() {
    return this._tabNavBar.tabPanel ? "tab" : this.elementRef.nativeElement.getAttribute("role");
  }
  _getTabIndex() {
    if (this._tabNavBar.tabPanel) {
      return this._isActive && !this.disabled ? 0 : -1;
    } else {
      return this.disabled ? -1 : this.tabIndex;
    }
  }
  static {
    this.\u0275fac = function MatTabLink_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabLink)(\u0275\u0275directiveInject(MatTabNav), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), \u0275\u0275injectAttribute("tabindex"), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatTabLink,
      selectors: [["", "mat-tab-link", ""], ["", "matTabLink", ""]],
      hostAttrs: [1, "mdc-tab", "mat-mdc-tab-link", "mat-mdc-focus-indicator"],
      hostVars: 11,
      hostBindings: function MatTabLink_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("focus", function MatTabLink_focus_HostBindingHandler() {
            return ctx._handleFocus();
          })("keydown", function MatTabLink_keydown_HostBindingHandler($event) {
            return ctx._handleKeydown($event);
          });
        }
        if (rf & 2) {
          \u0275\u0275attribute("aria-controls", ctx._getAriaControls())("aria-current", ctx._getAriaCurrent())("aria-disabled", ctx.disabled)("aria-selected", ctx._getAriaSelected())("id", ctx.id)("tabIndex", ctx._getTabIndex())("role", ctx._getRole());
          \u0275\u0275classProp("mat-mdc-tab-disabled", ctx.disabled)("mdc-tab--active", ctx.active);
        }
      },
      inputs: {
        active: [2, "active", "active", booleanAttribute],
        disabled: [2, "disabled", "disabled", booleanAttribute],
        disableRipple: [2, "disableRipple", "disableRipple", booleanAttribute],
        tabIndex: [2, "tabIndex", "tabIndex", (value) => value == null ? 0 : numberAttribute(value)],
        id: "id"
      },
      exportAs: ["matTabLink"],
      standalone: true,
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
      attrs: _c11,
      ngContentSelectors: _c09,
      decls: 5,
      vars: 2,
      consts: [[1, "mdc-tab__ripple"], ["mat-ripple", "", 1, "mat-mdc-tab-ripple", 3, "matRippleTrigger", "matRippleDisabled"], [1, "mdc-tab__content"], [1, "mdc-tab__text-label"]],
      template: function MatTabLink_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275element(0, "span", 0)(1, "div", 1);
          \u0275\u0275elementStart(2, "span", 2)(3, "span", 3);
          \u0275\u0275projection(4);
          \u0275\u0275elementEnd()();
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275property("matRippleTrigger", ctx.elementRef.nativeElement)("matRippleDisabled", ctx.rippleDisabled);
        }
      },
      dependencies: [MatRipple],
      styles: ['.mat-mdc-tab-link{-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-decoration:none;background:none;height:var(--mdc-secondary-navigation-tab-container-height);font-family:var(--mat-tab-header-label-text-font, var(--mat-app-title-small-font));font-size:var(--mat-tab-header-label-text-size, var(--mat-app-title-small-size));letter-spacing:var(--mat-tab-header-label-text-tracking, var(--mat-app-title-small-tracking));line-height:var(--mat-tab-header-label-text-line-height, var(--mat-app-title-small-line-height));font-weight:var(--mat-tab-header-label-text-weight, var(--mat-app-title-small-weight))}.mat-mdc-tab-link.mdc-tab{flex-grow:0}.mat-mdc-tab-link .mdc-tab-indicator__content--underline{border-color:var(--mdc-tab-indicator-active-indicator-color, var(--mat-app-primary));border-top-width:var(--mdc-tab-indicator-active-indicator-height);border-radius:var(--mdc-tab-indicator-active-indicator-shape)}.mat-mdc-tab-link:hover .mdc-tab__text-label{color:var(--mat-tab-header-inactive-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link:focus .mdc-tab__text-label{color:var(--mat-tab-header-inactive-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active .mdc-tab__text-label{color:var(--mat-tab-header-active-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active .mdc-tab__ripple::before,.mat-mdc-tab-link.mdc-tab--active .mat-ripple-element{background-color:var(--mat-tab-header-active-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active:hover .mdc-tab__text-label{color:var(--mat-tab-header-active-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active:hover .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-hover-indicator-color, var(--mat-app-primary))}.mat-mdc-tab-link.mdc-tab--active:focus .mdc-tab__text-label{color:var(--mat-tab-header-active-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active:focus .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-focus-indicator-color, var(--mat-app-primary))}.mat-mdc-tab-link.mat-mdc-tab-disabled{opacity:.4;pointer-events:none}.mat-mdc-tab-link.mat-mdc-tab-disabled .mdc-tab__content{pointer-events:none}.mat-mdc-tab-link.mat-mdc-tab-disabled .mdc-tab__ripple::before,.mat-mdc-tab-link.mat-mdc-tab-disabled .mat-ripple-element{background-color:var(--mat-tab-header-disabled-ripple-color)}.mat-mdc-tab-link .mdc-tab__ripple::before{content:"";display:block;position:absolute;top:0;left:0;right:0;bottom:0;opacity:0;pointer-events:none;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-link .mdc-tab__text-label{color:var(--mat-tab-header-inactive-label-text-color, var(--mat-app-on-surface));display:inline-flex;align-items:center}.mat-mdc-tab-link .mdc-tab__content{position:relative;pointer-events:auto}.mat-mdc-tab-link:hover .mdc-tab__ripple::before{opacity:.04}.mat-mdc-tab-link.cdk-program-focused .mdc-tab__ripple::before,.mat-mdc-tab-link.cdk-keyboard-focused .mdc-tab__ripple::before{opacity:.12}.mat-mdc-tab-link .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-header.mat-mdc-tab-nav-bar-stretch-tabs .mat-mdc-tab-link{flex-grow:1}.mat-mdc-tab-link::before{margin:5px}@media(max-width: 599px){.mat-mdc-tab-link{min-width:72px}}'],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabLink, [{
    type: Component,
    args: [{
      selector: "[mat-tab-link], [matTabLink]",
      exportAs: "matTabLink",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      host: {
        "class": "mdc-tab mat-mdc-tab-link mat-mdc-focus-indicator",
        "[attr.aria-controls]": "_getAriaControls()",
        "[attr.aria-current]": "_getAriaCurrent()",
        "[attr.aria-disabled]": "disabled",
        "[attr.aria-selected]": "_getAriaSelected()",
        "[attr.id]": "id",
        "[attr.tabIndex]": "_getTabIndex()",
        "[attr.role]": "_getRole()",
        "[class.mat-mdc-tab-disabled]": "disabled",
        "[class.mdc-tab--active]": "active",
        "(focus)": "_handleFocus()",
        "(keydown)": "_handleKeydown($event)"
      },
      standalone: true,
      imports: [MatRipple],
      template: '<span class="mdc-tab__ripple"></span>\n\n<div\n  class="mat-mdc-tab-ripple"\n  mat-ripple\n  [matRippleTrigger]="elementRef.nativeElement"\n  [matRippleDisabled]="rippleDisabled"></div>\n\n<span class="mdc-tab__content">\n  <span class="mdc-tab__text-label">\n    <ng-content></ng-content>\n  </span>\n</span>\n\n',
      styles: ['.mat-mdc-tab-link{-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-decoration:none;background:none;height:var(--mdc-secondary-navigation-tab-container-height);font-family:var(--mat-tab-header-label-text-font, var(--mat-app-title-small-font));font-size:var(--mat-tab-header-label-text-size, var(--mat-app-title-small-size));letter-spacing:var(--mat-tab-header-label-text-tracking, var(--mat-app-title-small-tracking));line-height:var(--mat-tab-header-label-text-line-height, var(--mat-app-title-small-line-height));font-weight:var(--mat-tab-header-label-text-weight, var(--mat-app-title-small-weight))}.mat-mdc-tab-link.mdc-tab{flex-grow:0}.mat-mdc-tab-link .mdc-tab-indicator__content--underline{border-color:var(--mdc-tab-indicator-active-indicator-color, var(--mat-app-primary));border-top-width:var(--mdc-tab-indicator-active-indicator-height);border-radius:var(--mdc-tab-indicator-active-indicator-shape)}.mat-mdc-tab-link:hover .mdc-tab__text-label{color:var(--mat-tab-header-inactive-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link:focus .mdc-tab__text-label{color:var(--mat-tab-header-inactive-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active .mdc-tab__text-label{color:var(--mat-tab-header-active-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active .mdc-tab__ripple::before,.mat-mdc-tab-link.mdc-tab--active .mat-ripple-element{background-color:var(--mat-tab-header-active-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active:hover .mdc-tab__text-label{color:var(--mat-tab-header-active-hover-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active:hover .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-hover-indicator-color, var(--mat-app-primary))}.mat-mdc-tab-link.mdc-tab--active:focus .mdc-tab__text-label{color:var(--mat-tab-header-active-focus-label-text-color, var(--mat-app-on-surface))}.mat-mdc-tab-link.mdc-tab--active:focus .mdc-tab-indicator__content--underline{border-color:var(--mat-tab-header-active-focus-indicator-color, var(--mat-app-primary))}.mat-mdc-tab-link.mat-mdc-tab-disabled{opacity:.4;pointer-events:none}.mat-mdc-tab-link.mat-mdc-tab-disabled .mdc-tab__content{pointer-events:none}.mat-mdc-tab-link.mat-mdc-tab-disabled .mdc-tab__ripple::before,.mat-mdc-tab-link.mat-mdc-tab-disabled .mat-ripple-element{background-color:var(--mat-tab-header-disabled-ripple-color)}.mat-mdc-tab-link .mdc-tab__ripple::before{content:"";display:block;position:absolute;top:0;left:0;right:0;bottom:0;opacity:0;pointer-events:none;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-link .mdc-tab__text-label{color:var(--mat-tab-header-inactive-label-text-color, var(--mat-app-on-surface));display:inline-flex;align-items:center}.mat-mdc-tab-link .mdc-tab__content{position:relative;pointer-events:auto}.mat-mdc-tab-link:hover .mdc-tab__ripple::before{opacity:.04}.mat-mdc-tab-link.cdk-program-focused .mdc-tab__ripple::before,.mat-mdc-tab-link.cdk-keyboard-focused .mdc-tab__ripple::before{opacity:.12}.mat-mdc-tab-link .mat-ripple-element{opacity:.12;background-color:var(--mat-tab-header-inactive-ripple-color, var(--mat-app-on-surface))}.mat-mdc-tab-header.mat-mdc-tab-nav-bar-stretch-tabs .mat-mdc-tab-link{flex-grow:1}.mat-mdc-tab-link::before{margin:5px}@media(max-width: 599px){.mat-mdc-tab-link{min-width:72px}}']
    }]
  }], () => [{
    type: MatTabNav
  }, {
    type: ElementRef
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_RIPPLE_GLOBAL_OPTIONS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Attribute,
      args: ["tabindex"]
    }]
  }, {
    type: FocusMonitor
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], {
    active: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    disableRipple: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    tabIndex: [{
      type: Input,
      args: [{
        transform: (value) => value == null ? 0 : numberAttribute(value)
      }]
    }],
    id: [{
      type: Input
    }]
  });
})();
var MatTabNavPanel = class _MatTabNavPanel {
  constructor() {
    this.id = `mat-tab-nav-panel-${nextUniqueId++}`;
  }
  static {
    this.\u0275fac = function MatTabNavPanel_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabNavPanel)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _MatTabNavPanel,
      selectors: [["mat-tab-nav-panel"]],
      hostAttrs: ["role", "tabpanel", 1, "mat-mdc-tab-nav-panel"],
      hostVars: 2,
      hostBindings: function MatTabNavPanel_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275attribute("aria-labelledby", ctx._activeTabId)("id", ctx.id);
        }
      },
      inputs: {
        id: "id"
      },
      exportAs: ["matTabNavPanel"],
      standalone: true,
      features: [\u0275\u0275StandaloneFeature],
      ngContentSelectors: _c09,
      decls: 1,
      vars: 0,
      template: function MatTabNavPanel_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabNavPanel, [{
    type: Component,
    args: [{
      selector: "mat-tab-nav-panel",
      exportAs: "matTabNavPanel",
      template: "<ng-content></ng-content>",
      host: {
        "[attr.aria-labelledby]": "_activeTabId",
        "[attr.id]": "id",
        "class": "mat-mdc-tab-nav-panel",
        "role": "tabpanel"
      },
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      standalone: true
    }]
  }], null, {
    id: [{
      type: Input
    }]
  });
})();
var MatTabsModule = class _MatTabsModule {
  static {
    this.\u0275fac = function MatTabsModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MatTabsModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _MatTabsModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [MatCommonModule, MatCommonModule]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTabsModule, [{
    type: NgModule,
    args: [{
      imports: [MatCommonModule, MatTabContent, MatTabLabel, MatTab, MatTabGroup, MatTabNav, MatTabNavPanel, MatTabLink],
      exports: [MatCommonModule, MatTabContent, MatTabLabel, MatTab, MatTabGroup, MatTabNav, MatTabNavPanel, MatTabLink]
    }]
  }], null, null);
})();

// src/app/admin/data-modeler1/components1/dmog-settings/dmog-settings.component.ts
var _c010 = (a0) => ({ "border-style": a0, "border-color": "black" });
var _c17 = (a0) => ({ "lebal-selected-postion-align": a0 });
function DmogSettingsComponent_mat_tab_group_3_span_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "uppercase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(2, 1, ctx_r1.background_color));
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_51_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1, "#FFFFFF");
    \u0275\u0275elementEnd();
  }
}
function DmogSettingsComponent_mat_tab_group_3_option_65_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 104);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r3 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("value", item_r3.name);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", item_r3.name, " ");
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_72_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "uppercase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(2, 1, ctx_r1.border_color));
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_73_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1, "#FFFFFF");
    \u0275\u0275elementEnd();
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_157_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "uppercase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(2, 1, ctx_r1.label_color));
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_158_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1, "#FFFFFF");
    \u0275\u0275elementEnd();
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_165_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "uppercase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(2, 1, ctx_r1.help_icon_color));
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_166_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1, "#FFFFFF");
    \u0275\u0275elementEnd();
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_187_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "uppercase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(2, 1, ctx_r1.header_fill_color));
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_188_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1, "#FFFFFF");
    \u0275\u0275elementEnd();
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_195_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "uppercase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(2, 1, ctx_r1.header_text_color));
  }
}
function DmogSettingsComponent_mat_tab_group_3_span_196_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1, "#FFFFFF");
    \u0275\u0275elementEnd();
  }
}
function DmogSettingsComponent_mat_tab_group_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-tab-group", 5);
    \u0275\u0275listener("selectedTabChange", function DmogSettingsComponent_mat_tab_group_3_Template_mat_tab_group_selectedTabChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabChange($event));
    });
    \u0275\u0275elementStart(1, "mat-tab", 6)(2, "div", 7);
    \u0275\u0275text(3, "Settings");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 8)(5, "div", 9);
    \u0275\u0275text(6, "Card Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "div", 10);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(9, "div", 8)(10, "div", 9);
    \u0275\u0275text(11, "Card Width (%)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "div", 11)(13, "div", 12)(14, "div", 13)(15, "input", 14);
    \u0275\u0275listener("input", function DmogSettingsComponent_mat_tab_group_3_Template_input_input_15_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.changeWidth($event));
    })("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_15_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.SaveWidthWidth($event));
    });
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_15_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.width, $event) || (ctx_r1.width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "div", 15)(17, "input", 16);
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_17_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.SaveWidthWidth($event));
    });
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_17_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.width, $event) || (ctx_r1.width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275element(18, "hr", 17);
    \u0275\u0275elementStart(19, "div", 7);
    \u0275\u0275text(20, "Drag Items");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "div", 18);
    \u0275\u0275listener("dragstart", function DmogSettingsComponent_mat_tab_group_3_Template_div_dragstart_21_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dragRow($event));
    })("dragover", function DmogSettingsComponent_mat_tab_group_3_Template_div_dragover_21_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onDragOver($event));
    });
    \u0275\u0275elementStart(22, "div", 19)(23, "div", 20);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(24, "svg", 21);
    \u0275\u0275element(25, "path", 22);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(26, "span", 23);
    \u0275\u0275text(27, "Inner Row");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(28, "div", 24)(29, "div", 25);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(30, "svg", 26);
    \u0275\u0275element(31, "path", 27)(32, "path", 28)(33, "path", 29)(34, "path", 30)(35, "path", 31)(36, "path", 32);
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(37, "mat-tab", 33)(38, "div", 34)(39, "div", 35);
    \u0275\u0275element(40, "input", 36);
    \u0275\u0275elementStart(41, "div", 37)(42, "div", 38);
    \u0275\u0275text(43, " Background ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(44, "div", 39)(45, "div")(46, "label", 40);
    \u0275\u0275text(47, "Fill Color");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(48, "div", 41)(49, "input", 42);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_49_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.background_color, $event) || (ctx_r1.background_color = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_49_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(50, DmogSettingsComponent_mat_tab_group_3_span_50_Template, 3, 3, "span", 43)(51, DmogSettingsComponent_mat_tab_group_3_span_51_Template, 2, 0, "span", 43);
    \u0275\u0275elementEnd()();
    \u0275\u0275element(52, "hr", 17);
    \u0275\u0275elementStart(53, "div", 44)(54, "div", 45);
    \u0275\u0275text(55, " Border ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(56, "div", 39)(57, "label", 46);
    \u0275\u0275text(58, "Border Type");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(59, "div", 47)(60, "div", 48)(61, "div")(62, "span", 49);
    \u0275\u0275text(63, " ----- ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(64, "select", 50);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_select_ngModelChange_64_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.border, $event) || (ctx_r1.border = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_select_change_64_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275template(65, DmogSettingsComponent_mat_tab_group_3_option_65_Template, 2, 2, "option", 51);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(66, "div", 39)(67, "div")(68, "label", 52);
    \u0275\u0275text(69, "Border Color ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(70, "div", 41)(71, "input", 42);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_71_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.border_color, $event) || (ctx_r1.border_color = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_71_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(72, DmogSettingsComponent_mat_tab_group_3_span_72_Template, 3, 3, "span", 43)(73, DmogSettingsComponent_mat_tab_group_3_span_73_Template, 2, 0, "span", 43);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(74, "div", 39)(75, "div")(76, "label", 52);
    \u0275\u0275text(77, "Border Width");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(78, "div", 53)(79, "input", 54);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_79_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.border_width, $event) || (ctx_r1.border_width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_79_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(80, "input", 55);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_80_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.border_width, $event) || (ctx_r1.border_width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_80_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(81, "div", 47)(82, "div")(83, "label", 56);
    \u0275\u0275text(84, "Border Radius");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(85, "div", 57)(86, "div", 58)(87, "input", 59);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_87_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.corner_radius_top, $event) || (ctx_r1.corner_radius_top = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_87_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(88, "select", 60)(89, "option", 61);
    \u0275\u0275text(90, "px");
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementStart(91, "div", 35);
    \u0275\u0275element(92, "input", 62);
    \u0275\u0275elementEnd();
    \u0275\u0275element(93, "hr");
    \u0275\u0275elementStart(94, "div", 45);
    \u0275\u0275text(95, " Label ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(96, "div", 37)(97, "div", 47)(98, "label", 63);
    \u0275\u0275text(99, "Label Position");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(100, "div", 64)(101, "div", 65);
    \u0275\u0275listener("click", function DmogSettingsComponent_mat_tab_group_3_Template_div_click_101_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.ChangeLabelPostion("Top"));
    });
    \u0275\u0275elementStart(102, "span");
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(103, "svg", 66);
    \u0275\u0275element(104, "path", 67)(105, "rect", 68);
    \u0275\u0275elementEnd()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(106, "div", 69);
    \u0275\u0275listener("click", function DmogSettingsComponent_mat_tab_group_3_Template_div_click_106_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.ChangeLabelPostion("Left"));
    });
    \u0275\u0275elementStart(107, "span");
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(108, "svg", 70);
    \u0275\u0275element(109, "path", 71)(110, "rect", 72);
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(111, "div", 47)(112, "label", 63);
    \u0275\u0275text(113, "Label Alignment");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(114, "div", 73)(115, "span", 74);
    \u0275\u0275listener("click", function DmogSettingsComponent_mat_tab_group_3_Template_span_click_115_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.ChangeLabelAlignment("Left"));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(116, "svg", 75)(117, "g", 76);
    \u0275\u0275element(118, "path", 77)(119, "path", 78)(120, "path", 79)(121, "path", 80);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(122, "defs")(123, "clipPath", 81);
    \u0275\u0275element(124, "rect", 82);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(125, "span", 83);
    \u0275\u0275listener("click", function DmogSettingsComponent_mat_tab_group_3_Template_span_click_125_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.ChangeLabelAlignment("Center"));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(126, "svg", 75)(127, "g", 84);
    \u0275\u0275element(128, "path", 85)(129, "path", 78)(130, "path", 86)(131, "path", 80);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(132, "defs")(133, "clipPath", 87);
    \u0275\u0275element(134, "rect", 82);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(135, "span", 88);
    \u0275\u0275listener("click", function DmogSettingsComponent_mat_tab_group_3_Template_span_click_135_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.ChangeLabelAlignment("Right"));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(136, "svg", 75)(137, "g", 89);
    \u0275\u0275element(138, "path", 90)(139, "path", 78)(140, "path", 91)(141, "path", 80);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(142, "defs")(143, "clipPath", 92);
    \u0275\u0275element(144, "rect", 82);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(145, "span", 93);
    \u0275\u0275listener("click", function DmogSettingsComponent_mat_tab_group_3_Template_span_click_145_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.ChangeLabelAlignment("justify"));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(146, "svg", 75);
    \u0275\u0275element(147, "path", 94)(148, "path", 78)(149, "path", 95)(150, "path", 80);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(151, "div", 39)(152, "div")(153, "label", 52);
    \u0275\u0275text(154, "Label Color");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(155, "div", 41)(156, "input", 42);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_156_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.label_color, $event) || (ctx_r1.label_color = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_156_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(157, DmogSettingsComponent_mat_tab_group_3_span_157_Template, 3, 3, "span", 43)(158, DmogSettingsComponent_mat_tab_group_3_span_158_Template, 2, 0, "span", 43);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(159, "div", 39)(160, "div")(161, "label", 52);
    \u0275\u0275text(162, "Help Icon Color");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(163, "div", 41)(164, "input", 42);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_164_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.help_icon_color, $event) || (ctx_r1.help_icon_color = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_164_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(165, DmogSettingsComponent_mat_tab_group_3_span_165_Template, 3, 3, "span", 43)(166, DmogSettingsComponent_mat_tab_group_3_span_166_Template, 2, 0, "span", 43);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(167, "div", 35);
    \u0275\u0275element(168, "input", 96)(169, "hr");
    \u0275\u0275elementStart(170, "div", 45);
    \u0275\u0275text(171, " Header ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(172, "div", 37)(173, "div", 47)(174, "label", 63);
    \u0275\u0275text(175, "Header Style");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(176, "div", 97)(177, "div", 98)(178, "label", 99)(179, "input", 100);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_179_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.header_border, $event) || (ctx_r1.header_border = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_179_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onHeaderBorderChange(ctx_r1.header_border));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275element(180, "span");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(181, "div", 39)(182, "div")(183, "label", 52);
    \u0275\u0275text(184, "Fill Color");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(185, "div", 41)(186, "input", 42);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_186_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.header_fill_color, $event) || (ctx_r1.header_fill_color = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_186_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(187, DmogSettingsComponent_mat_tab_group_3_span_187_Template, 3, 3, "span", 43)(188, DmogSettingsComponent_mat_tab_group_3_span_188_Template, 2, 0, "span", 43);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(189, "div", 39)(190, "div")(191, "label", 52);
    \u0275\u0275text(192, "Text Color");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(193, "div", 41)(194, "input", 42);
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_mat_tab_group_3_Template_input_ngModelChange_194_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.header_text_color, $event) || (ctx_r1.header_text_color = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function DmogSettingsComponent_mat_tab_group_3_Template_input_change_194_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.RealTimeStyleChanges());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(195, DmogSettingsComponent_mat_tab_group_3_span_195_Template, 3, 3, "span", 43)(196, DmogSettingsComponent_mat_tab_group_3_span_196_Template, 2, 0, "span", 43);
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementStart(197, "div", 101)(198, "button", 102);
    \u0275\u0275listener("click", function DmogSettingsComponent_mat_tab_group_3_Template_button_click_198_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.SaveChanges());
    });
    \u0275\u0275text(199, "Save Changes");
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(8);
    \u0275\u0275textInterpolate(ctx_r1.sideNavModel.dmog.DisplayName);
    \u0275\u0275advance(7);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.width);
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.width);
    \u0275\u0275advance(4);
    \u0275\u0275propertyInterpolate("id", ctx_r1.rowdmogId);
    \u0275\u0275attribute("data.rowsId-drag", ctx_r1.rowdmogId);
    \u0275\u0275advance(28);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.background_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.background_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.background_color);
    \u0275\u0275advance(11);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(36, _c010, ctx_r1.border !== "none" ? ctx_r1.border : "none"));
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.border);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.borderStyle);
    \u0275\u0275advance(6);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.border_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.border_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.border_color);
    \u0275\u0275advance(6);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.border_width);
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.border_width);
    \u0275\u0275advance(7);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.corner_radius_top);
    \u0275\u0275advance(14);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(38, _c17, ctx_r1.label_position === "Top"));
    \u0275\u0275advance(5);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(40, _c17, ctx_r1.label_position === "Left"));
    \u0275\u0275advance(9);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(42, _c17, ctx_r1.label_align === "Left"));
    \u0275\u0275advance(10);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(44, _c17, ctx_r1.label_align === "Center"));
    \u0275\u0275advance(10);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(46, _c17, ctx_r1.label_align === "Right"));
    \u0275\u0275advance(10);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(48, _c17, ctx_r1.label_align === "justify"));
    \u0275\u0275advance(11);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.label_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.label_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.label_color);
    \u0275\u0275advance(6);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.help_icon_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.help_icon_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.help_icon_color);
    \u0275\u0275advance(13);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.header_border);
    \u0275\u0275advance(7);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.header_fill_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.header_fill_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.header_fill_color);
    \u0275\u0275advance(6);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.header_text_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.header_text_color);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.header_text_color);
  }
}
function DmogSettingsComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "div", 7);
    \u0275\u0275text(2, "Settings");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 8)(4, "div", 9);
    \u0275\u0275text(5, "Card Group Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 10);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 8)(9, "div", 9);
    \u0275\u0275text(10, "Card Group Width (%)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "div", 11)(12, "div", 12)(13, "div", 13)(14, "input", 14);
    \u0275\u0275listener("input", function DmogSettingsComponent_div_4_Template_input_input_14_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.changeWidth($event));
    })("change", function DmogSettingsComponent_div_4_Template_input_change_14_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.SaveWidthWidth($event));
    });
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_div_4_Template_input_ngModelChange_14_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.width, $event) || (ctx_r1.width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(15, "div", 15)(16, "input", 16);
    \u0275\u0275listener("change", function DmogSettingsComponent_div_4_Template_input_change_16_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.SaveWidthWidth($event));
    });
    \u0275\u0275twoWayListener("ngModelChange", function DmogSettingsComponent_div_4_Template_input_ngModelChange_16_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.width, $event) || (ctx_r1.width = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()()()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(ctx_r1.sideNavModel.dmog.DisplayName);
    \u0275\u0275advance(7);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.width);
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.width);
  }
}
var DmogSettingsComponent = class _DmogSettingsComponent {
  constructor(apiService, dataProvider, renderer) {
    this.apiService = apiService;
    this.dataProvider = dataProvider;
    this.renderer = renderer;
    this.UpdatedDataEmitter = new EventEmitter();
    this.borderStyle = Object.values(BorderStyle);
    this.width = 0;
    this.border = "Solid";
    this.label_position = "Top";
    this.corner_radius_top = 0;
    this.corner_radius_right = 0;
    this.corner_radius_left = 0;
    this.corner_radius_bottom = 0;
    this.border_width = 0;
    this.header_border = "Yes";
    this.dataProvider.geUpdatedContainerWidth().subscribe((data) => {
      if (data) {
        this.width = data;
      }
    });
  }
  formatLabel(value) {
    return `${value} width`;
  }
  ngOnInit() {
    if (this.sideNavModel) {
      console.log(this.sideNavModel);
      if (this.sideNavModel.type == "dmog") {
        this.panelMainContainer = this.sideNavModel.data;
        if (!this.panelMainContainer) {
          let temprows = [];
          this.panelMainContainer = {
            width: 100,
            rows: temprows
          };
        }
        this.width = this.panelMainContainer.width;
        this.rowdmogId = this.sideNavModel.dmog.DMOGID;
        this.containerStyle = this.panelMainContainer.style;
        this.UpdateStyleProp();
      }
    }
  }
  onHeaderBorderChange(value) {
    this.header_border = value;
    this.RealTimeStyleChanges();
  }
  ngAfterViewInit() {
    setTimeout(() => {
      this.SetDefultTabsettings();
    }, 300);
  }
  ngOnChanges() {
    if (this.sideNavModel) {
      console.log(this.sideNavModel);
      if (this.sideNavModel.type == "dmog") {
        this.panelMainContainer = this.sideNavModel.data;
        if (!this.panelMainContainer) {
          let temprows = [];
          this.panelMainContainer = {
            width: 100,
            rows: temprows
          };
        }
        this.width = this.panelMainContainer.width;
        this.containerStyle = this.panelMainContainer.style;
        this.rowdmogId = this.sideNavModel.dmog.DMOGID;
        this.UpdateStyleProp();
      }
    }
  }
  SetDefultTabsettings() {
    const tabIndex = 0;
    const inkBarElement = document.querySelector(".mat-ink-bar");
    if (inkBarElement && tabIndex == 0) {
      this.renderer.setStyle(inkBarElement, "left", `0px`);
    }
  }
  onTabChange(event) {
    const tabIndex = event.index;
    const inkBarElement = document.querySelector(".mat-ink-bar");
    if (inkBarElement) {
      if (tabIndex === 0) {
        this.renderer.setStyle(inkBarElement, "left", `0px`);
      } else {
        this.renderer.setStyle(inkBarElement, "left", `145px`);
      }
    }
  }
  onDragOver(event) {
    event.preventDefault();
  }
  dragRow(event) {
    event.dataTransfer.setData("dmogRows", event.target.id);
  }
  changeWidth(event) {
    this.width = event.value;
  }
  SaveWidthWidth(event) {
    console.log(this.width);
    if (this.width > 100 || this.width < 0)
      this.width = 100;
    if (this.sideNavModel.dmog && this.sideNavModel.dmog.DMOGProps) {
      this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      if (this.panelMainContainer) {
        this.panelMainContainer.width = this.width;
      }
      var model = {};
      model = {
        "DMOGID": this.sideNavModel.dmog.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
      const url = `wfapibm/DataModel/SaveDmogProps`;
      this.apiService.postgateway("", url, model).subscribe((r) => {
        this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
        this.UpdatedDataEmitter.emit(this.sideNavModel.dmog);
      }, (error) => {
        console.log(error);
      });
    }
  }
  UpdateStyleProp() {
    if (this.containerStyle) {
      this.background_color = this.containerStyle.container.background_color;
      this.border = this.containerStyle.container.border;
      this.border_color = this.containerStyle.container.border_color;
      this.border_width = this.containerStyle.container.border_width;
      this.corner_radius_top = this.containerStyle.container.corner_radius_top;
      this.corner_radius_top = this.corner_radius_bottom = this.corner_radius_left = this.corner_radius_right = this.containerStyle.container.corner_radius_top;
      this.label_color = this.containerStyle.dmolabel.label_color;
      this.label_position = this.containerStyle.dmolabel.label_position;
      this.help_icon_color = this.containerStyle.dmolabel.help_icon_color;
      this.label_align = this.containerStyle.dmolabel.label_align;
      this.header_border = this.containerStyle.header.header_border;
      this.header_fill_color = this.containerStyle.header.header_fill_color;
      this.header_text_color = this.containerStyle.header.header_text_color;
    }
  }
  ChangeLabelAlignment(postion) {
    if (postion) {
      this.label_align = postion;
      this.RealTimeStyleChanges();
    }
  }
  ChangeLabelPostion(postion) {
    if (postion) {
      this.label_position = postion;
      this.RealTimeStyleChanges();
    }
  }
  RealTimeStyleChanges() {
    if (this.sideNavModel.dmog && this.sideNavModel.dmog.DMOGProps) {
      this.corner_radius_bottom = this.corner_radius_left = this.corner_radius_right = this.corner_radius_top;
      const borderWidth = this.border_width || 1;
      const borderColor = this.border_color || "#000000";
      const borderStyle = this.border || "solid";
      let container = {
        "background_color": this.background_color,
        "border": borderStyle,
        "border_width": borderWidth,
        "corner_radius_top": this.corner_radius_top,
        "corner_radius_bottom": this.corner_radius_bottom,
        "corner_radius_left": this.corner_radius_left,
        "corner_radius_right": this.corner_radius_right,
        "border_color": borderColor
      };
      let header = {
        "header_border": this.header_border,
        "header_fill_color": this.header_fill_color,
        "header_text_color": this.header_text_color
      };
      let dmolabel = {
        "label_color": this.label_color,
        "label_position": this.label_position,
        "help_icon_color": this.help_icon_color,
        "label_align": this.label_align
      };
      this.containerStyle = {
        container,
        header,
        dmolabel
      };
      this.panelMainContainer.style = this.containerStyle;
      var model = {};
      model = {
        "DMOGID": this.sideNavModel.dmog.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
      this.dataProvider.setUpdateDmogStyleSettings(model);
    }
  }
  SaveChanges() {
    let container = {
      "background_color": this.background_color,
      "border": this.border,
      "border_width": this.border_width,
      "corner_radius_top": this.corner_radius_top,
      "corner_radius_bottom": this.corner_radius_bottom,
      "corner_radius_left": this.corner_radius_left,
      "corner_radius_right": this.corner_radius_right,
      "border_color": this.border_color
    };
    let header = {
      "header_border": this.header_border,
      "header_fill_color": this.header_fill_color,
      "header_text_color": this.header_text_color
    };
    let dmolabel = {
      "label_color": this.label_color,
      "label_position": this.label_position,
      "help_icon_color": this.help_icon_color,
      "label_align": this.label_align
    };
    this.containerStyle = {
      container,
      header,
      dmolabel
    };
    this.panelMainContainer.style = this.containerStyle;
    if (this.sideNavModel.dmog && this.sideNavModel.dmog.DMOGProps) {
      var model = {};
      model = {
        "DMOGID": this.sideNavModel.dmog.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
      const url = `wfapibm/DataModel/SaveDmogProps`;
      this.apiService.postgateway("", url, model).subscribe((r) => {
        this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
      }, (error) => {
        console.log(error);
      });
    }
  }
  static {
    this.\u0275fac = function DmogSettingsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmogSettingsComponent)(\u0275\u0275directiveInject(ApiService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmogSettingsComponent, selectors: [["app-dmog-settings"]], inputs: { sideNavModel: "sideNavModel" }, outputs: { UpdatedDataEmitter: "UpdatedDataEmitter" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 5, vars: 5, consts: [[1, "container"], [1, "tab-header", 3, "innerText"], [1, "drag-side-sidebar"], ["class", "custom-tab-container-settings", 3, "selectedTabChange", 4, "ngIf"], [4, "ngIf"], [1, "custom-tab-container-settings", 3, "selectedTabChange"], ["label", "Layout"], [1, "main-heading"], [1, "continer-header"], [1, "continer-heading"], [1, "continer-Name-bold"], [1, "continer-Name"], [1, "settings-range"], [1, "range-box"], ["type", "range", "min", "0", "max", "100", "step", "1", "displayWith", "formatLabel", 1, "range-line", 3, "input", "change", "ngModelChange", "ngModel"], [1, "range-counter"], ["min", "0", "max", "100", 1, "input", 3, "change", "ngModelChange", "ngModel"], [1, "break-line"], ["draggable", "true", 1, "rows-container", 3, "dragstart", "dragover", "id"], [1, "rows-content"], [1, "icons-main"], ["xmlns", "http://www.w3.org/2000/svg", "width", "22", "height", "22", "viewBox", "0 0 22 22", "fill", "none"], ["d", "M19.5312 0.0625H2.34375C1.0498 0.0625 0 1.1123 0 2.40625V19.5938C0 20.8877 1.0498 21.9375 2.34375 21.9375H19.5312C20.8252 21.9375 21.875 20.8877 21.875 19.5938V2.40625C21.875 1.1123 20.8252 0.0625 19.5312 0.0625ZM4.49219 12.9531C4.16992 12.9531 3.90625 12.6895 3.90625 12.3672V9.63281C3.90625 9.31055 4.16992 9.04688 4.49219 9.04688H17.3828C17.7051 9.04688 17.9688 9.31055 17.9688 9.63281V12.3672C17.9688 12.6895 17.7051 12.9531 17.3828 12.9531H4.49219Z", "fill", "black"], [1, "texts"], [1, "menus-box"], [1, "menus-main"], ["width", "12", "height", "20", "viewBox", "0 0 12 20", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M2 3C2.55228 3 3 2.55228 3 2C3 1.44772 2.55228 1 2 1C1.44772 1 1 1.44772 1 2C1 2.55228 1.44772 3 2 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 3C10.5523 3 11 2.55228 11 2C11 1.44772 10.5523 1 10 1C9.44772 1 9 1.44772 9 2C9 2.55228 9.44772 3 10 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 11C2.55228 11 3 10.5523 3 10C3 9.44772 2.55228 9 2 9C1.44772 9 1 9.44772 1 10C1 10.5523 1.44772 11 2 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 11C10.5523 11 11 10.5523 11 10C11 9.44772 10.5523 9 10 9C9.44772 9 9 9.44772 9 10C9 10.5523 9.44772 11 10 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 19C2.55228 19 3 18.5523 3 18C3 17.4477 2.55228 17 2 17C1.44772 17 1 17.4477 1 18C1 18.5523 1.44772 19 2 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 19C10.5523 19 11 18.5523 11 18C11 17.4477 10.5523 17 10 17C9.44772 17 9 17.4477 9 18C9 18.5523 9.44772 19 10 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["label", "Styling"], [1, "main-drag-side-menu"], [1, "drag-side-menu"], ["type", "checkbox", "id", "menu-toggle-1", 1, "drag-side-menu-checkbox"], [1, "drag-side-menu-content"], [1, "fill-heading"], [1, "drop-side-color"], [1, "drag-side-border-label-fill"], [1, "color-picker"], ["type", "color", 1, "color-picker-input", 3, "ngModelChange", "change", "ngModel"], ["class", "fill-code", 4, "ngIf"], [1, "border-class"], [1, "border-heading"], ["for", "dropdown", 1, "drag-side-bordertype-label"], [1, "drag-side-border-container"], [1, "border-type-content"], [1, "border-st", 3, "ngStyle"], [1, "drag-side-border-dropdown", 3, "ngModelChange", "change", "ngModel"], [3, "value", 4, "ngFor", "ngForOf"], [1, "drag-side-border-label"], [1, "range-picker"], ["type", "range", 1, "range-input", 3, "ngModelChange", "change", "ngModel"], ["type", "number", 1, "range-number-input", 3, "ngModelChange", "change", "ngModel"], ["for", "dropdown", 1, "drag-side-cornerborder-label"], [1, "drag-side-border-radius-dropdown"], [1, ""], ["type", "number", 1, "drag-side-border-inputpos", 3, "ngModelChange", "change", "ngModel"], ["id", "dropdown", "name", "dropdown", 1, "drag-side-border-radius-dropdown", "d-none"], ["value", "option1"], ["type", "checkbox", "id", "menu-toggle-2", 1, "drag-side-menu-checkbox"], ["for", "dropdown", 1, "drag-side-border-label"], [1, "lebal-postion-align"], [1, "lebal-postion-Top", 3, "click", "ngClass"], ["xmlns", "http://www.w3.org/2000/svg", "width", "15", "height", "14", "viewBox", "0 0 15 14", "fill", "none"], ["d", "M7.5 3L4.6875 6H6.5625V14H8.4375V6H10.3125L7.5 3Z", "fill", "black"], ["width", "15", "height", "2", "fill", "#090909"], [1, "lebal-postion-Left", 3, "click", "ngClass"], ["xmlns", "http://www.w3.org/2000/svg", "width", "15", "height", "16", "viewBox", "0 0 15 16", "fill", "none"], ["d", "M3.95591 8.48253L6.97236 11.2774L6.96136 9.40241L14.9612 9.35546L14.9502 7.48049L6.95035 7.52744L6.93935 5.65247L3.95591 8.48253Z", "fill", "black"], ["x", "1", "y", "16", "width", "15", "height", "2", "transform", "rotate(-90.3363 1 16)", "fill", "#090909"], [1, "lebal-aligment-position"], [1, "align-text-left", 3, "click", "ngClass"], ["xmlns", "http://www.w3.org/2000/svg", "width", "15", "height", "15", "viewBox", "0 0 15 15", "fill", "none"], ["clip-path", "url(#clip0_3038_117)"], ["d", "M10.3125 0.9375H0.9375V2.8125H10.3125V0.9375Z", "fill", "black"], ["d", "M0.9375 4.6875H14.0625V6.5625H0.9375V4.6875Z", "fill", "black"], ["d", "M10.3125 8.4375H0.9375V10.3125H10.3125V8.4375Z", "fill", "black"], ["d", "M14.0625 12.1875H0.9375V14.0625H14.0625V12.1875Z", "fill", "black"], ["id", "clip0_3038_117"], ["width", "15", "height", "15", "fill", "white"], [1, "align-text-center", 3, "click", "ngClass"], ["clip-path", "url(#clip0_3038_123)"], ["d", "M12.1875 0.9375H2.8125V2.8125H12.1875V0.9375Z", "fill", "black"], ["d", "M12.1875 8.4375H2.8125V10.3125H12.1875V8.4375Z", "fill", "black"], ["id", "clip0_3038_123"], [1, "align-text-right", 3, "click", "ngClass"], ["clip-path", "url(#clip0_3038_111)"], ["d", "M14.0625 0.9375H4.6875V2.8125H14.0625V0.9375Z", "fill", "black"], ["d", "M14.0625 8.4375H4.6875V10.3125H14.0625V8.4375Z", "fill", "black"], ["id", "clip0_3038_111"], [1, "align-text-justify", 3, "click", "ngClass"], ["d", "M14 1H1V3H14V1Z", "fill", "black"], ["d", "M14 8H1V10H14V8Z", "fill", "black"], ["type", "checkbox", "id", "menu-toggle-3", 1, "drag-side-menu-checkbox"], [1, "header-check"], [1, "header-check-input"], [1, "custom-checkbox"], ["type", "checkbox", 3, "ngModelChange", "change", "ngModel"], [1, "btn-save"], ["type", "button", 1, "styling-save-btn", 3, "click"], [1, "fill-code"], [3, "value"]], template: function DmogSettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "div", 1);
        \u0275\u0275elementStart(2, "div", 2);
        \u0275\u0275template(3, DmogSettingsComponent_mat_tab_group_3_Template, 200, 50, "mat-tab-group", 3)(4, DmogSettingsComponent_div_4_Template, 17, 3, "div", 4);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275styleProp("top", ctx.transformy);
        \u0275\u0275advance();
        \u0275\u0275property("innerText", ctx.sideNavModel.dmog.Type === "CardGroup" ? "Card Group Settings" : "Card Settings");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.sideNavModel.dmog.Type != "CardGroup");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.sideNavModel.dmog.Type === "CardGroup");
      }
    }, dependencies: [
      NgIf,
      MatTabGroup,
      MatTab,
      ReactiveFormsModule,
      NgSelectOption,
      \u0275NgSelectMultipleOption,
      DefaultValueAccessor,
      NumberValueAccessor,
      RangeValueAccessor,
      CheckboxControlValueAccessor,
      SelectControlValueAccessor,
      NgControlStatus,
      FormsModule,
      NgModel,
      NgStyle,
      NgForOf,
      NgClass,
      UpperCasePipe
    ], styles: ['\n\n.slider-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.75fr 0.1fr;\n}\n.container[_ngcontent-%COMP%] {\n  padding: 0px 0px 0px 0px !important;\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  background: var(--White, #FFF);\n  min-width: 100px !important;\n  min-height: 100px !important;\n  height: calc(100vh - 100px);\n  overflow-y: none;\n  width: 300px;\n  border-right: 1px solid #CCC;\n  box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 0.1);\n  -webkit-user-select: none;\n  user-select: none;\n}\n  .mat-tab-body-content {\n  overflow: hidden !important;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 10px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.width-input[_ngcontent-%COMP%] {\n  text-align: center;\n}\n.drag-side-sidebar[_ngcontent-%COMP%] {\n  width: 100%;\n}\n  .mat-tab-labels {\n  display: flex !important;\n  justify-content: space-around !important;\n  flex: 1 !important;\n}\n.drag-side-menu[_ngcontent-%COMP%] {\n  margin-bottom: 5px;\n}\n.drag-side-menu-header[_ngcontent-%COMP%] {\n  background-color: #5f8e13;\n  padding: 0 10px;\n  margin-top: 5px;\n  font-size: 15px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  color: white;\n  font-family: "Roboto", sans-serif;\n}\n.drag-side-menu-checkbox[_ngcontent-%COMP%] {\n  display: none;\n}\n.drag-side-menu-content[_ngcontent-%COMP%] {\n  margin-top: 5px;\n}\n.drag-side-menu-content[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, \n.drag-side-menu-content[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover {\n  background-color: #1abc9c;\n}\n.drag-side-menu-checkbox[_ngcontent-%COMP%]:checked    + .drag-side-menu-header[_ngcontent-%COMP%]    + .drag-side-menu-content[_ngcontent-%COMP%] {\n  background: rgba(236, 236, 236, 0.2588235294);\n}\n.drag-side-btn-cont[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n}\n.drag-side-btn[_ngcontent-%COMP%] {\n  padding: 2px auto;\n  width: 50%;\n  text-align: center;\n  background-color: #d5d8dc;\n}\n.drag-side-border-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-block: 15px;\n  padding: 0px 10px;\n}\n.drag-side-border-label[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-bottom: 0px !important;\n  padding: 0 10px;\n}\n.drag-side-border-dropdown[_ngcontent-%COMP%] {\n  font-size: 12px;\n  height: 28px;\n  width: 70px;\n  border: none;\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.drag-side-border-radius-dropdown[_ngcontent-%COMP%] {\n  width: 37px;\n  height: 30px;\n  padding: 0px 0px 6px 0px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-right: 10px;\n}\n.drag-side-border-containerpos[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: flex-start;\n  height: 30px;\n  flex-shrink: 0;\n  fill: var(--White, #FFF);\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n  margin-bottom: 40px;\n  width: 267px;\n  height: 30px;\n  flex-shrink: 0;\n  margin-left: 10px;\n}\n.drag-side-border-input-containerpos[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 25%;\n  box-sizing: border-box;\n  margin-left: 0px;\n  font-size: 14px;\n  padding: 0 10px;\n}\n.drag-side-border-labelpos[_ngcontent-%COMP%] {\n  margin-top: 3px;\n}\n.drag-side-border-inputpos[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 30px;\n  font-size: 12px;\n  fill: var(--White, #FFF);\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n  box-sizing: border-box;\n}\n.drop-side-bg-container[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n}\n.drop-side-bg-icon-container[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 4px;\n}\n.drop-side-bg-icon[_ngcontent-%COMP%] {\n  width: 20px;\n  height: 20px;\n  background-color: #ccc;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 4px;\n  font-size: 15px;\n}\n.important-info-alert[_ngcontent-%COMP%] {\n  border-left: 3px solid #f59e0b;\n  background-color: #faecd2;\n  margin-top: 10px;\n}\n.info-alert-text[_ngcontent-%COMP%] {\n  font-size: 11px;\n  font-style: italic;\n  padding: 10px;\n}\n.drop-side-color-container[_ngcontent-%COMP%] {\n  display: flex;\n}\n.drop-side-color[_ngcontent-%COMP%] {\n  height: 30px;\n  display: flex;\n  justify-content: space-between;\n  margin-top: 12px;\n  padding: 3px;\n  flex-shrink: 0;\n  padding: 0 10px;\n}\n.fill-code[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.color-picker[_ngcontent-%COMP%] {\n  display: flex;\n  width: 131px;\n  height: 30px;\n  padding: 0 10px;\n  align-items: center;\n  gap: 5px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n  color: rgb(204, 204, 204);\n  color: rgb(33, 37, 41);\n  margin-right: 10px;\n}\n.color-picker-input[_ngcontent-%COMP%] {\n  width: 20px;\n  height: 20px;\n  border: none;\n}\n.drag-side-border-label-fill[_ngcontent-%COMP%] {\n  color: #333;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.drop-side-color-svg[_ngcontent-%COMP%] {\n  width: 20px;\n  height: 20px;\n  background-color: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 4px;\n  font-size: 15px;\n}\n.drop-side-location-container[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  display: flex;\n}\n.lcoation-label-dropdown[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n}\n.location-select[_ngcontent-%COMP%] {\n  border: 1px solid #ccc;\n  width: 55px;\n}\n.location-range-input[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n}\n.location-range[_ngcontent-%COMP%] {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 8px;\n  background:\n    linear-gradient(\n      90deg,\n      #ddd,\n      #f0f0f0);\n  border-radius: 4px;\n  outline: none;\n  opacity: 0.9;\n  transition: opacity 0.2s;\n}\n.location-range[_ngcontent-%COMP%]:hover {\n  opacity: 1;\n}\n.location-range[_ngcontent-%COMP%]::-webkit-slider-runnable-track {\n  background:\n    linear-gradient(\n      90deg,\n      #ddd,\n      #f0f0f0);\n  height: 8px;\n  border-radius: 4px;\n}\n.location-range[_ngcontent-%COMP%]::-moz-range-track {\n  background:\n    linear-gradient(\n      90deg,\n      #ddd,\n      #f0f0f0);\n  height: 8px;\n  border-radius: 4px;\n}\n.location-range[_ngcontent-%COMP%]::-ms-track {\n  background:\n    linear-gradient(\n      90deg,\n      #ddd,\n      #f0f0f0);\n  height: 8px;\n  border-radius: 4px;\n  border-color: transparent;\n  color: transparent;\n}\n.location-range[_ngcontent-%COMP%]::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  width: 16px;\n  height: 16px;\n  background-color: #fff;\n  border: 2px solid #444;\n  border-radius: 50%;\n  cursor: pointer;\n  margin-top: -4px;\n  transition: background-color 0.3s;\n}\n.location-range[_ngcontent-%COMP%]::-moz-range-thumb {\n  width: 16px;\n  height: 16px;\n  background-color: #fff;\n  border: 2px solid #444;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n.location-range[_ngcontent-%COMP%]::-ms-thumb {\n  width: 16px;\n  height: 16px;\n  background-color: #fff;\n  border: 2px solid #444;\n  border-radius: 50%;\n  cursor: pointer;\n  margin-top: 0px;\n  transition: background-color 0.3s;\n}\n.location-range[_ngcontent-%COMP%]:hover::-webkit-slider-thumb, \n.location-range[_ngcontent-%COMP%]:hover::-moz-range-thumb, \n.location-range[_ngcontent-%COMP%]:hover::-ms-thumb {\n  background-color: #666;\n}\n.location-input[_ngcontent-%COMP%] {\n  width: 55px;\n  height: 20px;\n  margin-left: 10px;\n}\n.type-select[_ngcontent-%COMP%] {\n  width: 117px;\n}\n.toggle-container[_ngcontent-%COMP%] {\n  display: inline-block;\n  padding: 10px 0;\n}\n.toggle-button[_ngcontent-%COMP%] {\n  position: relative;\n  width: 60px;\n  height: 30px;\n  background-color: #fff;\n  box-shadow: 0 10px 20px -8px #c5d6d6;\n  border-radius: 18px;\n  overflow: hidden;\n}\n.toggle-checkbox[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  opacity: 0;\n  cursor: pointer;\n  z-index: 3;\n}\n.toggle-knob[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 3px;\n  left: 3px;\n  width: 25px;\n  height: 25px;\n  background-color: #03a9f4;\n  border-radius: 50%;\n  transition: left 0.3s ease, background-color 0.3s ease;\n  z-index: 2;\n}\n.toggle-layer[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #ebf7fc;\n  transition: background-color 0.3s ease;\n  z-index: 1;\n}\n.toggle-checkbox[_ngcontent-%COMP%]:checked    + .toggle-knob[_ngcontent-%COMP%] {\n  left: 30px;\n  background-color: #f44336;\n}\n.toggle-checkbox[_ngcontent-%COMP%]:checked    ~ .toggle-layer[_ngcontent-%COMP%] {\n  background-color: #fcebeb;\n}\n.toggle-knob[_ngcontent-%COMP%]:before {\n  content: "ON";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #fff;\n  font-size: 10px;\n  font-weight: bold;\n  transition: content 0.3s;\n}\n.toggle-checkbox[_ngcontent-%COMP%]:checked    + .toggle-knob[_ngcontent-%COMP%]:before {\n  content: "OFF";\n}\n.gray-bar[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 1px;\n  background-color: #ccc;\n  margin: 20px 0 0 0;\n  border-radius: 5px;\n}\n.gray-bar-2[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 1px;\n  background-color: #ccc;\n  margin: 5px 0 0 0;\n  border-radius: 5px;\n}\n.scrolling-effect-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.radio-option[_ngcontent-%COMP%] {\n  margin-left: 13px;\n}\n.border-input[_ngcontent-%COMP%] {\n  width: 51px !important;\n  height: 23px !important;\n}\n.drop-down-Lebal-align[_ngcontent-%COMP%] {\n  width: 51px !important;\n}\n.fill-heading[_ngcontent-%COMP%] {\n  color: var(--Color-2, #333);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  padding: 0 15px;\n  margin-top: 15px;\n}\n.break-line[_ngcontent-%COMP%] {\n  width: 304px;\n  height: 0px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n}\n.color-picker-fill[_ngcontent-%COMP%] {\n  display: flex;\n  width: 131px;\n  height: 30px;\n  padding: 5px;\n  align-items: center;\n  gap: 5px;\n  flex-shrink: 0;\n}\n.border-heading[_ngcontent-%COMP%] {\n  color: var(--Dark-Black, #000);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  padding: 0 15px;\n}\n.drag-side-bordertype-label[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.drag-side-cornerborder-label[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.border-type-content[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  display: flex;\n  height: 30px;\n  padding: 5px;\n  align-items: center;\n  gap: 20px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n  width: 136px !important;\n}\n.border-type-content-Attr[_ngcontent-%COMP%] {\n  display: flex;\n  width: 284px;\n  justify-content: space-between;\n  align-items: center;\n}\n.range-picker[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  align-items: baseline;\n  padding: 0 10px;\n}\n.range-number-input[_ngcontent-%COMP%] {\n  display: flex;\n  width: 37px;\n  height: 30px;\n  font-size: 12px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n}\n.range-input[_ngcontent-%COMP%] {\n  width: 78px;\n  height: 10px;\n  flex-shrink: 0;\n  padding: 0 10px;\n}\n.range-number-input[_ngcontent-%COMP%]::-webkit-inner-spin-button, \n.range-number-input[_ngcontent-%COMP%]::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  appearance: none;\n  margin: 0;\n}\n.border-required[_ngcontent-%COMP%] {\n  border: 1px solid #000 !important;\n}\n.margin-top-4px[_ngcontent-%COMP%] {\n  margin-top: 4px;\n  text-align: left !important;\n  font-size: 10px;\n  padding: 0px !important;\n}\n.lebal-aligment-position[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  height: 30px;\n  flex-shrink: 0;\n  padding: 0 10px;\n}\n.align-text-left[_ngcontent-%COMP%] {\n  width: 33.333px;\n  height: 30px;\n  flex-shrink: 0;\n  border-radius: 2px 0px 0px 2px;\n  padding: 0px 0px 4px 10px;\n  border-top: 1px solid var(--border-color, #CCC);\n  border-bottom: 1px solid var(--border-color, #CCC);\n  border-left: 1px solid var(--border-color, #CCC);\n}\n.align-text-center[_ngcontent-%COMP%] {\n  width: 33.333px;\n  height: 30px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  padding: 0px 0px 4px 10px;\n  border-top: 1px solid var(--border-color, #CCC);\n  border-left: 1px solid var(--border-color, #CCC);\n  border-right: 1px solid var(--border-color, #CCC);\n  border-bottom: 1px solid var(--border-color, #CCC);\n}\n.align-text-right[_ngcontent-%COMP%] {\n  width: 33.333px;\n  height: 30px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  padding: 0px 0px 4px 10px;\n  border-top: 1px solid var(--border-color, #CCC);\n  border-right: 1px solid var(--border-color, #CCC);\n  border-bottom: 1px solid var(--border-color, #CCC);\n}\n.align-text-justify[_ngcontent-%COMP%] {\n  width: 33.333px;\n  height: 30px;\n  flex-shrink: 0;\n  padding: 0px 0px 4px 10px;\n  border-radius: 0px 2px 2px 0px;\n  border-top: 1px solid var(--border-color, #CCC);\n  border-bottom: 1px solid var(--border-color, #CCC);\n  border-right: 1px solid var(--border-color, #CCC);\n}\n.header-check[_ngcontent-%COMP%] {\n  width: 28.289px;\n  height: 19px;\n  flex-shrink: 0;\n}\n.header-check-input[_ngcontent-%COMP%] {\n  display: inline-flex;\n  align-items: flex-start;\n}\n.header-check-mark[_ngcontent-%COMP%] {\n  display: flex;\n  padding: 2px;\n  align-items: flex-start;\n  gap: 10px;\n}\n.custom-checkbox[_ngcontent-%COMP%] {\n  display: inline-block;\n  position: relative;\n  cursor: pointer;\n}\n.custom-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%] {\n  display: none;\n}\n.custom-checkbox[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 24px;\n  height: 24px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  display: inline-block;\n  position: relative;\n  transition: all 0.3s ease;\n}\n.custom-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked    + span[_ngcontent-%COMP%] {\n  background-color: rgb(235, 88, 59);\n}\n.custom-checkbox[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]::after {\n  content: "";\n  width: 6px;\n  height: 12px;\n  border: solid white;\n  border-width: 0 2px 2px 0;\n  position: absolute;\n  top: 4px;\n  left: 8px;\n  transform: rotate(45deg);\n  display: none;\n}\n.custom-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked    + span[_ngcontent-%COMP%]::after {\n  display: block;\n}\n.btn-save[_ngcontent-%COMP%] {\n  display: flex;\n  width: 100%;\n  height: 120px;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n}\n.styling-save-btn[_ngcontent-%COMP%] {\n  display: flex;\n  width: 120px;\n  height: 40px;\n  justify-content: center;\n  gap: 10px;\n  align-items: center;\n  flex-shrink: 0;\n  background: rgb(234, 89, 60);\n  border-radius: 5px;\n  border: none;\n  flex-shrink: 0;\n  color: #FFF;\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-bottom: 30px;\n}\n.border-st[_ngcontent-%COMP%] {\n  display: inline-block;\n  text-align: center;\n  line-height: 0;\n  font-family: monospace;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n}\n.lebal-selected-postion-align[_ngcontent-%COMP%] {\n  background: var(--border-color, #CCC);\n}\n.lebal-postion-align[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  flex-shrink: 0;\n  height: 30px;\n  flex-shrink: 0;\n  padding: 0 10px;\n}\n.lebal-postion-Top[_ngcontent-%COMP%] {\n  width: 33.333px;\n  height: 30px;\n  padding: 0px 0px 0px 8px;\n  flex-shrink: 0;\n  border-radius: 2px 0px 0px 2px;\n  border: 1px solid var(--border-color, #CCC);\n}\n.lebal-postion-Left[_ngcontent-%COMP%] {\n  width: 33.333px;\n  height: 30px;\n  padding: 0px 0px 0px 8px;\n  flex-shrink: 0;\n  border-radius: 2px 0px 0px 2px;\n  border-top: 1px solid var(--border-color, #CCC);\n  border-bottom: 1px solid var(--border-color, #CCC);\n  border-left: 1px solid var(--border-color, #CCC);\n  border-right: 1px solid var(--border-color, #CCC);\n}\n.customTabs[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n.tab-header[_ngcontent-%COMP%] {\n  height: 38px;\n  text-align: center;\n  background: #005996;\n  line-height: 2;\n  padding: 2px;\n  font-weight: 500;\n  color: var(--White, #FFF);\n  text-align: center;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  line-height: 40px;\n}\n.continer-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  gap: 0;\n  font-size: 14px;\n  margin-top: 5px;\n  font-family: "Roboto";\n  color: black;\n  padding: 10px;\n}\n.continer-heading[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.continer-Name-bold[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n  padding-left: 20px;\n}\n.continer-Name[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.range-box[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n}\n.settings-range[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 10px;\n}\n.range-line[_ngcontent-%COMP%] {\n  width: 78px;\n  height: 10px;\n}\n.range-counter[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  display: flex;\n  width: 37px;\n  height: 30px;\n  padding: 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n}\ninput[type=range][_ngcontent-%COMP%] {\n  accent-color: #4A5CB3;\n}\n.main-heading[_ngcontent-%COMP%] {\n  color: var(--Dark-Black, #000);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  margin-top: 15px;\n  padding: 0 15px;\n}\n.menus-main[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  padding: 8px;\n  border-left: 2px solid #e4d2d2;\n  background: #f5f5f5;\n  border-radius: 0px 5px 5px 0px;\n  justify-content: center;\n}\n.rows-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 260px;\n  height: 40px;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\n  margin: 11px;\n  border-radius: 4px;\n  border: 1px solid var(--border-color, #CCC);\n  background: #FFF;\n}\n.rows-content[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  gap: 8px;\n}\n.icons-main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n.icons[_ngcontent-%COMP%] {\n  width: 33px;\n  height: 7px;\n  background-color: #d3d3d3;\n  border-radius: 2px;\n  margin-right: 8px;\n}\n.texts[_ngcontent-%COMP%] {\n  color: #333;\n  font-size: 14px;\n}\n.menus[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n.menu-dots[_ngcontent-%COMP%] {\n  width: 6px;\n  height: 6px;\n  margin: 1px 0;\n}\n.menus-box[_ngcontent-%COMP%] {\n  width: 29px;\n  height: 38px;\n  right: 1px;\n  top: 1px;\n  border-radius: 0px 5px 5px 0px;\n  background: rgba(204, 204, 204, 0.2);\n}\n.main-drag-side-menu[_ngcontent-%COMP%] {\n  overflow-y: auto;\n  overflow-x: hidden;\n  max-height: calc(100vh - 250px);\n}\n.main-drag-side-menu[_ngcontent-%COMP%]::-webkit-scrollbar {\n  width: 6px;\n  align-self: stretch;\n}\n.main-drag-side-menu[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n.main-drag-side-menu[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.main-drag-side-menu[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n/*# sourceMappingURL=dmog-settings.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmogSettingsComponent, { className: "DmogSettingsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-settings\\dmog-settings.component.ts", lineNumber: 32 });
})();

// src/app/admin/data-modeler1/components1/resizeable-panel/resizeable-panel.component.ts
var _c011 = (a0) => ({ item: a0 });
function ResizeablePanelComponent_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function ResizeablePanelComponent_div_8_div_2_div_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 23);
    \u0275\u0275listener("drop", function ResizeablePanelComponent_div_8_div_2_div_1_div_1_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r13);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("dragover", function ResizeablePanelComponent_div_8_div_2_div_1_div_1_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r13);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    });
    \u0275\u0275text(1, " Drop component ");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const colIndex_r10 = \u0275\u0275nextContext(2).index;
    const rowIndex_r6 = \u0275\u0275nextContext().index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate3("id", "", ctx_r2.data.id, "_column_", rowIndex_r6, "_", colIndex_r10, "");
  }
}
function ResizeablePanelComponent_div_8_div_2_div_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 24);
    \u0275\u0275listener("click", function ResizeablePanelComponent_div_8_div_2_div_1_div_2_Template_div_click_0_listener($event) {
      const rdmg_r15 = \u0275\u0275restoreView(_r14).$implicit;
      const ctx_r15 = \u0275\u0275nextContext(2);
      const c_r9 = ctx_r15.$implicit;
      const colIndex_r10 = ctx_r15.index;
      const ctx_r10 = \u0275\u0275nextContext();
      const r_r5 = ctx_r10.$implicit;
      const rowIndex_r6 = ctx_r10.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(c_r9.dmoguid.length > 1 ? ctx_r2.showContextMenu($event, { "type": "column", "dmoguid": rdmg_r15, r: r_r5, c: c_r9, rowIndex: rowIndex_r6, colIndex: colIndex_r10 }) : null);
    });
    \u0275\u0275elementStart(1, "app-dmo", 25);
    \u0275\u0275listener("dragover", function ResizeablePanelComponent_div_8_div_2_div_1_div_2_Template_app_dmo_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r14);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("dragstart", function ResizeablePanelComponent_div_8_div_2_div_1_div_2_Template_app_dmo_dragstart_1_listener($event) {
      const rdmg_r15 = \u0275\u0275restoreView(_r14).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.dragdmo($event, rdmg_r15));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const rdmg_r15 = ctx.$implicit;
    const colIndex_r10 = \u0275\u0275nextContext(2).index;
    const rowIndex_r6 = \u0275\u0275nextContext().index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate3("id", "", ctx_r2.data.id, "_column_", rowIndex_r6, "_", colIndex_r10, "");
    \u0275\u0275advance();
    \u0275\u0275property("dmo", ctx_r2.getCurrentDMO(rdmg_r15));
    \u0275\u0275attribute("data-dmoguid", rdmg_r15);
  }
}
function ResizeablePanelComponent_div_8_div_2_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 20);
    \u0275\u0275listener("dragover", function ResizeablePanelComponent_div_8_div_2_div_1_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r12);
      const ctx_r2 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("drop", function ResizeablePanelComponent_div_8_div_2_div_1_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r12);
      const ctx_r2 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    });
    \u0275\u0275template(1, ResizeablePanelComponent_div_8_div_2_div_1_div_1_Template, 2, 4, "div", 21)(2, ResizeablePanelComponent_div_8_div_2_div_1_div_2_Template, 2, 6, "div", 22);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r15 = \u0275\u0275nextContext();
    const c_r9 = ctx_r15.$implicit;
    const colIndex_r10 = ctx_r15.index;
    const rowIndex_r6 = \u0275\u0275nextContext().index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate3("id", "", ctx_r2.data.id, "_column_", rowIndex_r6, "_", colIndex_r10, "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", c_r9.dmoguid == null || c_r9.dmoguid.length == 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", c_r9.dmoguid);
  }
}
function ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 23);
    \u0275\u0275listener("drop", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_1_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("dragover", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_1_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r26);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    });
    \u0275\u0275text(1, " Drop component ");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const colRowcolumnIndex_r24 = \u0275\u0275nextContext().index;
    const colRowIndex_r20 = \u0275\u0275nextContext().index;
    const colIndex_r10 = \u0275\u0275nextContext().index;
    const rowIndex_r6 = \u0275\u0275nextContext().index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate5("id", "", ctx_r2.data.id, "_columnRow_", rowIndex_r6, "_", colIndex_r10, "_", colRowIndex_r20, "_", colRowcolumnIndex_r24, "");
  }
}
function ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 24);
    \u0275\u0275listener("click", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_2_Template_div_click_0_listener($event) {
      const rdmgs_r28 = \u0275\u0275restoreView(_r27).$implicit;
      const ctx_r28 = \u0275\u0275nextContext();
      const rcr_r23 = ctx_r28.$implicit;
      const colRowcolumnIndex_r24 = ctx_r28.index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r19 = ctx_r24.$implicit;
      const colRowIndex_r20 = ctx_r24.index;
      const ctx_r15 = \u0275\u0275nextContext();
      const c_r9 = ctx_r15.$implicit;
      const colIndex_r10 = ctx_r15.index;
      const ctx_r10 = \u0275\u0275nextContext();
      const r_r5 = ctx_r10.$implicit;
      const rowIndex_r6 = ctx_r10.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(rcr_r23.dmoguid.length > 1 ? ctx_r2.showContextMenu($event, { "type": "columnRow", "dmoguid": rdmgs_r28, cr: cr_r19, r: r_r5, c: c_r9, rowIndex: rowIndex_r6, colIndex: colIndex_r10, colRowIndex: colRowIndex_r20, colRowcolumnIndex: colRowcolumnIndex_r24 }) : null);
    });
    \u0275\u0275elementStart(1, "app-dmo", 25);
    \u0275\u0275listener("dragover", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_2_Template_app_dmo_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r27);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    })("dragstart", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_2_Template_app_dmo_dragstart_1_listener($event) {
      const rdmgs_r28 = \u0275\u0275restoreView(_r27).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.dragdmo($event, rdmgs_r28));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const rdmgs_r28 = ctx.$implicit;
    const colRowcolumnIndex_r24 = \u0275\u0275nextContext().index;
    const colRowIndex_r20 = \u0275\u0275nextContext().index;
    const colIndex_r10 = \u0275\u0275nextContext().index;
    const rowIndex_r6 = \u0275\u0275nextContext().index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate5("id", "", ctx_r2.data.id, "_columnRow_", rowIndex_r6, "_", colIndex_r10, "_", colRowIndex_r20, "_", colRowcolumnIndex_r24, "");
    \u0275\u0275advance();
    \u0275\u0275property("dmo", ctx_r2.getCurrentDMO(rdmgs_r28));
    \u0275\u0275attribute("data-dmoguid", rdmgs_r28);
  }
}
function ResizeablePanelComponent_div_8_div_2_div_2_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 28);
    \u0275\u0275listener("click", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_Template_div_click_0_listener($event) {
      const ctx_r21 = \u0275\u0275restoreView(_r21);
      const rcr_r23 = ctx_r21.$implicit;
      const colRowcolumnIndex_r24 = ctx_r21.index;
      const ctx_r24 = \u0275\u0275nextContext();
      const cr_r19 = ctx_r24.$implicit;
      const colRowIndex_r20 = ctx_r24.index;
      const ctx_r15 = \u0275\u0275nextContext();
      const c_r9 = ctx_r15.$implicit;
      const colIndex_r10 = ctx_r15.index;
      const ctx_r10 = \u0275\u0275nextContext();
      const r_r5 = ctx_r10.$implicit;
      const rowIndex_r6 = ctx_r10.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(rcr_r23.dmoguid == null || rcr_r23.dmoguid.length < 2 ? ctx_r2.showContextMenu($event, { "type": "columnRow", cr: cr_r19, r: r_r5, c: c_r9, rowIndex: rowIndex_r6, colIndex: colIndex_r10, colRowIndex: colRowIndex_r20, colRowcolumnIndex: colRowcolumnIndex_r24 }) : null);
    })("drop", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r21);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("dragover", function ResizeablePanelComponent_div_8_div_2_div_2_div_1_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r21);
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onDragOver($event));
    });
    \u0275\u0275template(1, ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_1_Template, 2, 6, "div", 21)(2, ResizeablePanelComponent_div_8_div_2_div_2_div_1_div_2_Template, 2, 8, "div", 22);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const rcr_r23 = ctx.$implicit;
    const colRowcolumnIndex_r24 = ctx.index;
    const ctx_r24 = \u0275\u0275nextContext();
    const cr_r19 = ctx_r24.$implicit;
    const colRowIndex_r20 = ctx_r24.index;
    const colIndex_r10 = \u0275\u0275nextContext().index;
    const rowIndex_r6 = \u0275\u0275nextContext().index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate5("id", "", ctx_r2.data.id, "_columnRow_", rowIndex_r6, "_", colIndex_r10, "_", colRowIndex_r20, "_", colRowcolumnIndex_r24, "");
    \u0275\u0275property("ngStyle", ctx_r2.styleObjectChild(cr_r19));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", rcr_r23.dmoguid == null || rcr_r23.dmoguid.length == 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", rcr_r23.dmoguid);
  }
}
function ResizeablePanelComponent_div_8_div_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 26);
    \u0275\u0275listener("click", function ResizeablePanelComponent_div_8_div_2_div_2_Template_div_click_0_listener($event) {
      const ctx_r17 = \u0275\u0275restoreView(_r17);
      const cr_r19 = ctx_r17.$implicit;
      const colRowIndex_r20 = ctx_r17.index;
      const ctx_r15 = \u0275\u0275nextContext();
      const c_r9 = ctx_r15.$implicit;
      const colIndex_r10 = ctx_r15.index;
      const ctx_r10 = \u0275\u0275nextContext();
      const r_r5 = ctx_r10.$implicit;
      const rowIndex_r6 = ctx_r10.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "NestedcolumnRow", cr: cr_r19, r: r_r5, c: c_r9, rowIndex: rowIndex_r6, colIndex: colIndex_r10, colRowIndex: colRowIndex_r20 }));
    });
    \u0275\u0275template(1, ResizeablePanelComponent_div_8_div_2_div_2_div_1_Template, 3, 9, "div", 27);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cr_r19 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", cr_r19.columns);
  }
}
function ResizeablePanelComponent_div_8_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 17);
    \u0275\u0275listener("click", function ResizeablePanelComponent_div_8_div_2_Template_div_click_0_listener($event) {
      const ctx_r7 = \u0275\u0275restoreView(_r7);
      const c_r9 = ctx_r7.$implicit;
      const colIndex_r10 = ctx_r7.index;
      const ctx_r10 = \u0275\u0275nextContext();
      const r_r5 = ctx_r10.$implicit;
      const rowIndex_r6 = ctx_r10.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(c_r9.dmoguid == null || c_r9.dmoguid.length < 2 ? ctx_r2.showContextMenu($event, { "type": "column", r: r_r5, c: c_r9, rowIndex: rowIndex_r6, colIndex: colIndex_r10 }) : null);
    });
    \u0275\u0275template(1, ResizeablePanelComponent_div_8_div_2_div_1_Template, 3, 6, "div", 18)(2, ResizeablePanelComponent_div_8_div_2_div_2_Template, 2, 1, "div", 19);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const c_r9 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngStyle", ctx_r2.styleObject(c_r9));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", c_r9.rows.length == 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", c_r9.rows);
  }
}
function ResizeablePanelComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275listener("drop", function ResizeablePanelComponent_div_8_Template_div_drop_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.dropdmo($event));
    })("click", function ResizeablePanelComponent_div_8_Template_div_click_0_listener($event) {
      const ctx_r3 = \u0275\u0275restoreView(_r2);
      const r_r5 = ctx_r3.$implicit;
      const rowIndex_r6 = ctx_r3.index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.showContextMenu($event, { "type": "parentRow", r: r_r5, rowIndex: rowIndex_r6 }));
    });
    \u0275\u0275elementStart(1, "div", 14);
    \u0275\u0275template(2, ResizeablePanelComponent_div_8_div_2_Template, 3, 3, "div", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "i", 16);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const r_r5 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", r_r5.columns);
  }
}
function ResizeablePanelComponent_ng_template_9_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r30 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 30)(2, "a", 31);
    \u0275\u0275listener("click", function ResizeablePanelComponent_ng_template_9_ng_container_0_Template_a_click_2_listener() {
      \u0275\u0275restoreView(_r30);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onTabRemove(ctx_r2));
    });
    \u0275\u0275element(3, "i", 32);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "a", 33);
    \u0275\u0275listener("click", function ResizeablePanelComponent_ng_template_9_ng_container_0_Template_a_click_4_listener() {
      \u0275\u0275restoreView(_r30);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onEditDMOGRemove(ctx_r2));
    });
    \u0275\u0275element(5, "i", 34);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "a", 35);
    \u0275\u0275listener("click", function ResizeablePanelComponent_ng_template_9_ng_container_0_Template_a_click_6_listener() {
      \u0275\u0275restoreView(_r30);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.ShowDmogSettings(ctx_r2));
    });
    \u0275\u0275element(7, "i", 36);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "a", 37);
    \u0275\u0275listener("click", function ResizeablePanelComponent_ng_template_9_ng_container_0_Template_a_click_8_listener() {
      \u0275\u0275restoreView(_r30);
      const item_r31 = \u0275\u0275nextContext().item;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddRow(item_r31));
    });
    \u0275\u0275element(9, "i", 38);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const item_r31 = \u0275\u0275nextContext().item;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275classProp("active", ctx_r2.hoveredRowIndex == item_r31);
  }
}
function ResizeablePanelComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, ResizeablePanelComponent_ng_template_9_ng_container_0_Template, 10, 2, "ng-container", 29);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("ngIf", !ctx_r2.readonly);
  }
}
function ResizeablePanelComponent_ng_template_11_ng_container_0_a_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r34 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 42);
    \u0275\u0275listener("click", function ResizeablePanelComponent_ng_template_11_ng_container_0_a_4_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r34);
      const item_r33 = \u0275\u0275nextContext(2).item;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.GetSelectMenu(item_r33.rowIndex, item_r33.colIndex));
    });
    \u0275\u0275element(1, "i", 43);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(3);
    \u0275\u0275property("matMenuTriggerFor", ctx_r2.menu);
  }
}
function ResizeablePanelComponent_ng_template_11_ng_container_0_a_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r35 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 44);
    \u0275\u0275listener("click", function ResizeablePanelComponent_ng_template_11_ng_container_0_a_5_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r35);
      const item_r33 = \u0275\u0275nextContext(2).item;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onRemoveColumn(item_r33.rowIndex, item_r33.colIndex));
    });
    \u0275\u0275element(1, "i", 45);
    \u0275\u0275elementEnd();
  }
}
function ResizeablePanelComponent_ng_template_11_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r32 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 39)(2, "a", 37);
    \u0275\u0275listener("click", function ResizeablePanelComponent_ng_template_11_ng_container_0_Template_a_click_2_listener() {
      \u0275\u0275restoreView(_r32);
      const item_r33 = \u0275\u0275nextContext().item;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAddRowInColumn(item_r33));
    });
    \u0275\u0275element(3, "i", 38);
    \u0275\u0275elementEnd();
    \u0275\u0275template(4, ResizeablePanelComponent_ng_template_11_ng_container_0_a_4_Template, 2, 1, "a", 40)(5, ResizeablePanelComponent_ng_template_11_ng_container_0_a_5_Template, 2, 0, "a", 41);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const item_r33 = \u0275\u0275nextContext().item;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275classProp("active", ctx_r2.hoveredRowIndex === item_r33.rowIndex && ctx_r2.hoveredColumnIndex === item_r33.colIndex);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", item_r33.current.rows.length == 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r33.current.rows.length == 0);
  }
}
function ResizeablePanelComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, ResizeablePanelComponent_ng_template_11_ng_container_0_Template, 6, 4, "ng-container", 29);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("ngIf", !ctx_r2.readonly);
  }
}
var ResizeablePanelComponent = class _ResizeablePanelComponent {
  constructor(dmApi, apiService, msg, toast, dataProvider, cdref, elementRef, matdialog, modalService) {
    this.dmApi = dmApi;
    this.apiService = apiService;
    this.msg = msg;
    this.toast = toast;
    this.dataProvider = dataProvider;
    this.cdref = cdref;
    this.elementRef = elementRef;
    this.matdialog = matdialog;
    this.modalService = modalService;
    this.baseUrl = `${environment.Setting.BaseAPIUrl}/modeler`;
    this.availableDmoToShare = [];
    this.active = false;
    this.hasInvalidForm = false;
    this.left = 0;
    this.top = 0;
    this.readonly = false;
    this.rows = [];
    this.dmo = { display: false };
    this.tabRemove = new EventEmitter();
    this.tabEdit = new EventEmitter();
    this.OnBMOSave = new EventEmitter();
    this.onDmoEdit = new EventEmitter();
    this.onDmoDelete = new EventEmitter();
    this.openConditionPopup = new EventEmitter();
    this.openclonePopup = new EventEmitter();
    this.reloadParent = new EventEmitter();
    this.dragDmoToAnotherdmog = new EventEmitter();
    this.dropDmoToAnotherdmog = new EventEmitter();
    this.contextMenuPosition = null;
    this.contextMenuFormPosition = null;
    this.contextMenuData = null;
    this.cdkDragDisabled = false;
    this.showFormContextMenu = false;
    this.showSharedmoContextMenu = false;
    this.IsJsonStaticGridDmo = false;
    this.formsControls = Object.values(DMOS2).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));
    this.style = {};
    this.dataProvider.getHideContextMenu().subscribe((result) => {
      this.resetDivColour();
    });
    this.dataProvider.getDmoStates().subscribe((result) => {
      this.updatePropBaseOfDMO(this.contextMenuData, result);
    });
    this.dataProvider.getDeleteDmo().subscribe((result) => {
      if (result.dmogId == this.data.GUID) {
        this.removeDmoToOthers(result.dmoguid);
        this.saveProps();
      }
    });
    this.dataProvider.getMoveDmo().subscribe((result) => {
      if (result.dmogId == this.data.DMOGID) {
        this.removeDmoToOthers(result.dmoguid);
        this.updatereOrdering(result.targetId, result.dmoguid);
        this.saveProps(null, result);
      }
      if (result.prevdmogId == this.data.DMOGID) {
        this.removeDmoToOthers(result.dmoguid);
        this.saveProps(null, result);
      }
    });
    this.dataProvider.setMoveDmo;
  }
  //public bm: classes.BM;
  set dmog(dmog) {
    this._dmog = dmog;
  }
  get dmog() {
    return this._dmog;
  }
  ngOnInit() {
    this.style = {
      width: `100%`,
      height: `auto`
    };
    if (this.data && this.data.DMOGProps) {
      this.panelMainContainer = JSON.parse(this.data.DMOGProps);
      if (this.panelMainContainer) {
        this.rows = this.panelMainContainer.rows;
      }
      this.updateWidth();
    }
  }
  disableDrag() {
    this.cdkDragDisabled = true;
  }
  updateWidth() {
    if (this.panelMainContainer) {
      let width = this.panelMainContainer.width;
      if (width == 0) {
        width = 100;
      }
      this.style = {
        width: `${100}%`,
        height: `auto`
      };
    }
  }
  enableDrag() {
    this.cdkDragDisabled = false;
  }
  ngAfterContentChecked() {
  }
  validate(event) {
    const MIN_DIMENSIONS_PX = 50;
    if (event.rectangle.width && event.rectangle.height && (event.rectangle.width < MIN_DIMENSIONS_PX || event.rectangle.height < MIN_DIMENSIONS_PX)) {
      return false;
    }
    return true;
  }
  onResizeEnd(event) {
    this.style = {
      // left: `${event.rectangle.left}px`,
      // top: `${event.rectangle.top}px`,
      width: `${event.rectangle.width}px`,
      height: `auto`
    };
  }
  onTabRemove(tab) {
    this.resetDivColour();
    this.tabRemove.emit(tab);
  }
  onEditDMOGRemove(tab) {
    this.resetDivColour();
    this.tabEdit.emit(tab);
  }
  ShowDmogSettings() {
    if (!this.panelMainContainer) {
      let column = [];
      column.push({ "colIndex": 0, "dmoguid": [], "width": 99.5, "rows": [] });
      let letNextRow = {
        rowIndex: 0,
        columns: column
      };
      this.rows.push(letNextRow);
      this.panelMainContainer = {
        width: 100,
        rows: this.rows
      };
    }
    let modal = this.matdialog.open(DmogSettingsComponent, {
      data: {
        width: this.panelMainContainer.width,
        dmogName: this.title
      }
      // height: '300px',
      //  width: '300px',
    });
    modal.afterClosed().subscribe((result) => {
      if (result && result.event == "save") {
        this.panelMainContainer.width = result.data.width;
        this.saveProps(true);
        this.updateWidth();
      }
    });
  }
  onAddRow() {
    let nextIndex = this.rows.length;
    let column = [];
    column.push({ "colIndex": 0, "dmoguid": [], "width": 99.5, "rows": [] });
    let letNextRow = { rowIndex: nextIndex, columns: column };
    this.rows.push(letNextRow);
    this.resetDivColour();
    this.saveProps();
  }
  onAddColumn(rowIndex) {
    if (this.rows[rowIndex].columns.length < 12) {
      let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
      let column = currentRoWithCol[0].columns.length;
      this.rows[rowIndex].columns.push({ "colIndex": column + 1, "dmoguid": [], "rows": [] });
      this.resetColumnWidth(currentRoWithCol[0].columns);
      this.saveProps();
    } else {
      alert("Maximum 12 columns allowed per row.");
    }
  }
  resetColumnWidth(currentRoWithCol, rowIndex) {
    if (rowIndex != null) {
      let currentRow = this.rows.filter((a) => a.rowIndex == rowIndex);
      if (currentRow.length == 0)
        return;
      currentRoWithCol = currentRow[0].columns;
    }
    let column = currentRoWithCol;
    let index = 0;
    let perClmwidth = 99.5 / currentRoWithCol.length;
    for (let c of column) {
      c.width = perClmwidth;
      c.colIndex = index;
      c.mw = false;
      index++;
    }
  }
  resetColumnWidthForRowInColumn(currentRoWithCol) {
    for (let r of currentRoWithCol) {
      let column = r.columns;
      let perClmwidth = 100 / r.columns.length;
      let index = 0;
      for (let c of column) {
        c.width = perClmwidth;
        c.index = index;
        c.mw = false;
        index++;
      }
    }
  }
  onAddRowInColumn(item) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let childColum = [];
        childColum.push({ "index": 0, "width": 100, "dmoguid": [] });
        column.rows.push({ "columns": childColum });
        this.resetColumnWidthForRowInColumn(column.rows);
      }
    }
    this.saveProps();
  }
  ///dmo
  onAddRowChildColumnDmo(item, dmoguid) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let existingColumn = column.rows[item.ColumnRowIndex];
        let ex = existingColumn.columns.length;
        for (let c of existingColumn.columns) {
          if (c.index == item.colRowcolumnIndex) {
            if (!c.dmoguid) {
              c.dmoguid = [];
            }
            c.dmoguid.push(dmoguid);
          }
        }
      }
    }
    this.saveProps();
  }
  //end
  onAddRowChildColumn(item) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let existingColumn = column.rows[item.ColumnRowIndex];
        let ex = existingColumn.columns.length;
        existingColumn.columns.push({ "index": ex + 1, "width": 100, "dmoguid": [] });
        this.resetColumnWidthForRowInColumn(column.rows);
      }
    }
    this.saveProps();
  }
  onRemoveRowChildColumn(item) {
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRoWithCol = this.rows.filter((a) => a.rowIndex == rowIndex);
    if (currentRoWithCol.length > 0) {
      let column = currentRoWithCol[0].columns[colIndex];
      if (column) {
        let existingColumn = column.rows[item.ColumnRowIndex];
        let ex = existingColumn.columns.length;
        existingColumn.columns.splice(item.colRowcolumnIndex, 1);
        this.resetColumnWidthForRowInColumn(column.rows);
      }
    }
    this.saveProps();
  }
  onRemoveColumn(rowIndex, colIndex) {
    this.rows[rowIndex].columns.splice(colIndex, 1);
    this.resetColumnWidth(null, rowIndex);
    this.saveProps();
  }
  onRemoveRow(rowIndex) {
    this.rows.splice(rowIndex, 1);
    this.saveProps();
  }
  shareDmoSelect(dmo) {
    this.updatePropBaseOfDMO(this.contextMenuData, dmo.guid);
  }
  FormControlSelect(type) {
    this.type = type;
    this.OnBMOSave.emit(this);
  }
  GetSelectMenu(rowIndex, colIndex) {
    this.currentRow = rowIndex;
    this.currentColumn = colIndex;
  }
  styleObject(column) {
    if (column) {
      return { width: column.width + "%" };
    }
    return {};
  }
  styleObjectChild(column) {
    if (column) {
      const totalColumns = column?.columns?.length || 1;
      const paddingAdjustment = 1;
      const modifiedWidth = column?.columns?.map((col) => {
        return col?.width ? col?.width - paddingAdjustment / totalColumns : col?.width;
      });
      return { width: modifiedWidth + "%" };
    }
    return {};
  }
  //prop 
  saveProps(isReload, fromOneToAnotherDmo) {
    if (!this.panelMainContainer) {
      this.panelMainContainer = {
        width: 100,
        rows: this.rows
      };
    } else {
      this.panelMainContainer.rows = this.rows;
    }
    var model = {};
    if (fromOneToAnotherDmo) {
      model = {
        "DMOGID": this.data.DMOGID,
        "prevdmogId": fromOneToAnotherDmo.prevdmogId,
        "newdmogId": fromOneToAnotherDmo.dmogId,
        "dmoguid": fromOneToAnotherDmo.dmoguid,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
    } else {
      model = {
        "DMOGID": this.data.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
    }
    const url = `wfapibm/DataModel/SaveDmogProps`;
    this.apiService.postgateway("", url, model).subscribe((r) => {
      this.data.DMOGProps = JSON.stringify(this.panelMainContainer);
      if (isReload) {
        this.reloadParent.emit(true);
      }
    }, (error) => {
      console.log(error);
    });
  }
  showContextMenu(event, clickedDiv) {
    if (this.readonly)
      return;
    event.stopPropagation();
    this.showFormContextMenu = false;
    this.showSharedmoContextMenu = false;
    this.resetDivColour();
    const div = event.target;
    this.contextMenuPosition = new ContextMenuPosition();
    this.contextMenuData = clickedDiv;
    this.contextMenuPosition.rightClickMenuPositionX = event.currentTarget.getBoundingClientRect().right - 120;
    this.contextMenuPosition.rightClickMenuPositionY = event.currentTarget.getBoundingClientRect().y;
    this.contextMenuFormPosition = new ContextMenuPosition();
    this.contextMenuFormPosition = this.contextMenuPosition;
  }
  resetDivColour() {
    return;
    const dom = this.elementRef.nativeElement;
    const elements = dom.querySelectorAll(".colouredDiv");
    if (elements) {
      elements.forEach((cdiv) => {
        const div = cdiv;
        div.style.backgroundColor = "#fff";
      });
    }
  }
  updatePropBaseOfDMO(data, dmoguid) {
    if (data == void 0 || data == null)
      return;
    switch (data.type) {
      case "parentRow":
        {
          let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
          let column = currentRoWithCol[0].columns.length;
          break;
        }
        ;
      case "column":
        {
          let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
          let column = currentRoWithCol[0].columns;
          for (let index = 0; index < column.length; index++) {
            if (index == data.colIndex) {
              column[index].dmoguid.push(dmoguid);
              break;
            }
          }
          this.saveProps();
          break;
        }
        ;
      case "columnRow":
        {
          let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
          let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
          if (currentRoWithCol.length > 0) {
            let column = currentRoWithCol[0].columns[data.colIndex];
            if (column) {
              let existingColumn = column.rows[data.colRowIndex];
              for (let index = 0; index < existingColumn.columns.length; index++) {
                if (index == data.colRowcolumnIndex) {
                  existingColumn.columns[index].dmoguid.push(dmoguid);
                  break;
                }
              }
            }
          }
          this.saveProps();
          break;
        }
        ;
    }
  }
  updatereOrdering(targetId, dmoguid) {
    if (targetId && targetId.length > 0 && dmoguid) {
      let ids = targetId.split("_");
      if (ids && ids.length > 0) {
        let _currentdmog = ids[0];
        let rowORCol = ids[1];
        if (rowORCol == "column") {
          let rowIndex = Number(ids[2]);
          let colIndex = Number(ids[3]);
          let data = { "rowIndex": rowIndex, "colIndex": colIndex, "type": "column" };
          this.removeDmoToOthers(dmoguid);
          this.updatePropBaseOfDMO(data, dmoguid);
        } else if (rowORCol == "columnRow") {
          let rowIndex = Number(ids[2]);
          let colIndex = Number(ids[3]);
          let colRowIndex = Number(ids[4]);
          let colRowcolumnIndex = Number(ids[5]);
          let data = { "type": "columnRow", "rowIndex": rowIndex, "colIndex": colIndex, "colRowIndex": colRowIndex, "colRowcolumnIndex": colRowcolumnIndex };
          this.removeDmoToOthers(dmoguid);
          this.updatePropBaseOfDMO(data, dmoguid);
        }
      }
    }
  }
  removeDmoToOthers(dmoguid) {
    if (this.rows.length) {
      for (let index = 0; index < this.rows.length; index++) {
        const r = this.rows[index];
        for (let c = 0; c < r.columns.length; c++) {
          const col = r.columns[c];
          if (col.dmoguid != null) {
            var existsIndex = col.dmoguid.indexOf(dmoguid);
            if (existsIndex > -1) {
              col.dmoguid.splice(existsIndex, 1);
            }
          }
          for (let cr = 0; cr < col.rows.length; cr++) {
            const crc = col.rows[cr];
            for (let icrc = 0; icrc < crc.columns.length; icrc++) {
              const cColumn = crc.columns[icrc];
              if (cColumn.dmoguid != null) {
                var existsIndex = cColumn.dmoguid.indexOf(dmoguid);
                if (existsIndex > -1) {
                  cColumn.dmoguid.splice(existsIndex, 1);
                }
              }
            }
          }
        }
      }
    }
  }
  getCurrentDMO(dmoguid) {
    if (this.data && this.data.formData && this.data.formData.components) {
      let dmo = this.data.formData.components.filter((a) => a.guid == dmoguid);
      if (dmo && dmo.length > 0) {
        return dmo[0];
      }
    }
    return null;
  }
  dragdmo(event, dmoguid) {
    this.dragdmoguid = dmoguid;
    this.dragDmoToAnotherdmog.emit({ "dmogId": this.data.DMOGID, "dmoguid": dmoguid });
    console.log("dragdmo", event, dmoguid);
  }
  onDragOver(event) {
    event.preventDefault();
  }
  dropdmo(event, dmoguid) {
    if (this.readonly)
      return;
    event.stopPropagation();
    let targetId = event.currentTarget.id;
    this.showFormContextMenu = false;
    this.showSharedmoContextMenu = false;
    this.updatereOrdering(targetId, this.dragdmoguid);
    if (!dmoguid) {
      if (targetId && targetId.length > 0) {
        let ids = targetId.split("_");
        if (ids && ids.length > 0) {
          this.dropDmoToAnotherdmog.emit({ "dmogId": this.data.DMOGID, "targetId": targetId });
        }
      }
    }
  }
  CurrentDropItem(event, id) {
    const div = event.relatedTarget;
  }
  //  GetAvailableDmoToShare(){
  // this.dmApi.GetAvailableDmoToShare(this.data.DMOGID, this.data.root.BMId).subscribe(x=>{
  //   this.availableDmoToShare= x;
  // });
  //  }
  OperateContextMenu($event) {
    var data = $event.showContextMenuFor;
    var option = $event.option;
    this.showFormContextMenu = false;
    if (option == "AddDMO") {
      this.contextMenuFormPosition = $event.position;
      this.showFormContextMenu = true;
      return;
    } else if (option == "shareDMO") {
      this.showSharedmoContextMenu = true;
      this.contextMenuFormPosition = $event.position;
      return;
    }
    if (option == "EditDMO" || option == "DeleteDMO" || option == "ConditionsDMO" || option == "CloneDMO") {
      switch (data.type) {
        case "column":
          {
            if (data.dmoguid) {
              let dmowithDmog = { "dmog": this.data, "dmo": this.getCurrentDMO(data.dmoguid), "dmoguid": data.dmoguid };
              if (option == "DeleteDMO") {
                this.onDmoDelete.emit(dmowithDmog);
              } else if (option == "EditDMO") {
                this.onDmoEdit.emit(dmowithDmog);
              } else if (option == "ConditionsDMO") {
                this.openConditionPopup.emit(dmowithDmog);
              } else if (option == "CloneDMO") {
                this.openclonePopup.emit(dmowithDmog);
              }
              return;
            }
            let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
            for (let index = 0; index < currentRoWithCol.length; index++) {
              for (let c = 0; c < currentRoWithCol[index].columns.length; c++) {
                if (c == data.colIndex) {
                  const dmoguid = currentRoWithCol[index].columns[c].dmoguid[0];
                  if (dmoguid) {
                    let dmowithDmog = { "dmog": this.data, "dmo": this.getCurrentDMO(dmoguid), "dmoguid": dmoguid };
                    if (option == "DeleteDMO") {
                      this.onDmoDelete.emit(dmowithDmog);
                    } else if (option == "EditDMO") {
                      this.onDmoEdit.emit(dmowithDmog);
                    } else if (option == "ConditionsDMO") {
                      this.openConditionPopup.emit(dmowithDmog);
                    } else if (option == "CloneDMO") {
                      this.openclonePopup.emit(dmowithDmog);
                    }
                    return;
                  }
                }
              }
            }
            break;
          }
          ;
        case "columnRow":
          {
            let dmoguid = "";
            if (data.dmoguid) {
              dmoguid = data.dmoguid;
            } else {
              let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
              let currentRoWithCol = this.rows.filter((a) => a.rowIndex == data.rowIndex);
              for (let index = 0; index < currentRoWithCol.length; index++) {
                loop2: for (let c = 0; c < currentRoWithCol[index].columns.length; c++) {
                  if (c == data.colIndex) {
                    let column = currentRoWithCol[0].columns[c];
                    if (column) {
                      let existingColumn = column.rows[item.ColumnRowIndex];
                      for (let crin = 0; crin < existingColumn.columns.length; crin++) {
                        if (crin == data.colRowcolumnIndex) {
                          const element = existingColumn.columns[crin];
                          dmoguid = element.dmoguid[0];
                          break loop2;
                          return;
                        }
                      }
                    }
                  }
                }
              }
            }
            let dmowithDmog = { "dmog": this.data, "dmo": this.getCurrentDMO(dmoguid), "dmoguid": dmoguid };
            if (option == "DeleteDMO") {
              this.onDmoDelete.emit(dmowithDmog);
            } else if (option == "EditDMO") {
              this.onDmoEdit.emit(dmowithDmog);
            } else if (option == "ConditionsDMO") {
              this.openConditionPopup.emit(dmowithDmog);
            } else if (option == "CloneDMO") {
              this.openclonePopup.emit(dmowithDmog);
            }
            break;
          }
          ;
      }
      return;
    }
    this.resetDivColour();
    switch (data.type) {
      case "parentRow":
        {
          if (option == "AddColumn") {
            this.onAddColumn(data.rowIndex);
          } else if (option == "RemoveRow") {
            this.onRemoveRow(data.rowIndex);
          }
          break;
        }
        ;
      case "column":
        {
          if (option == "AddColumn") {
            this.onAddColumn(data.rowIndex);
          } else if (option == "AddRow") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex };
            this.onAddRowInColumn(item);
          } else if (option == "RemoveColumn") {
            this.onRemoveColumn(data.rowIndex, data.colIndex);
          }
          break;
        }
        ;
      case "columnRow":
        {
          if (option == "AddColumn") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
            this.onAddRowChildColumn(item);
          } else if (option == "RemoveColumn") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
            this.onRemoveRowChildColumn(item);
          }
          break;
        }
        ;
      case "NestedcolumnRow":
        {
          if (option == "AddColumn") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
            this.onAddRowChildColumn(item);
          } else if (option == "RemoveColumn") {
            let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex, "colRowcolumnIndex": data.colRowcolumnIndex };
            this.onRemoveRowChildColumn(item);
          }
          break;
        }
        ;
    }
  }
  onWindowScroll() {
    this.resetDivColour();
  }
  static {
    this.\u0275fac = function ResizeablePanelComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ResizeablePanelComponent)(\u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(ApiService2), \u0275\u0275directiveInject(MessageService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(NgbModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ResizeablePanelComponent, selectors: [["app-resizeable-panel"]], hostBindings: function ResizeablePanelComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("scroll", function ResizeablePanelComponent_scroll_HostBindingHandler() {
          return ctx.onWindowScroll();
        }, false, \u0275\u0275resolveWindow);
      }
    }, inputs: { title: "title", active: "active", hasInvalidForm: "hasInvalidForm", bmodisplay: "bmodisplay", trnsctnId: "trnsctnId", ChildProcessName: "ChildProcessName", ParentDmoValue: "ParentDmoValue", ChildDmoGuid: "ChildDmoGuid", ProcessType: "ProcessType", data: "data", left: "left", top: "top", readonly: "readonly", BMO: "BMO", panel: "panel", dmog: "dmog" }, outputs: { tabRemove: "tabRemove", tabEdit: "tabEdit", OnBMOSave: "OnBMOSave", onDmoEdit: "onDmoEdit", onDmoDelete: "onDmoDelete", openConditionPopup: "openConditionPopup", openclonePopup: "openclonePopup", reloadParent: "reloadParent", dragDmoToAnotherdmog: "dragDmoToAnotherdmog", dropDmoToAnotherdmog: "dropDmoToAnotherdmog" }, standalone: true, features: [\u0275\u0275ProvidersFeature([
      {
        provide: MAT_MENU_DEFAULT_OPTIONS,
        useValue: { overlayPanelClass: "custom-mat-Class" }
      }
    ]), \u0275\u0275StandaloneFeature], decls: 17, vars: 20, consts: [["itemActions", ""], ["itemActionColumn", ""], ["cdkDragBoundary", ".form-view", 1, "rectangle", "resizePanel", 3, "mouseenter", "mouseleave", "id", "ngStyle"], [1, "row", 3, "mouseover", "mouseout"], [1, "col-md-6"], [1, "input-label"], [1, "col-md-2"], [1, "col-md-4"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "colouredDiv rightpadding row rowBorder sub-row dmo.display row-colour", 3, "drop", "click", 4, "ngFor", "ngForOf"], [3, "contextMenuSelected", "object", "showContextMenuFor", "contextMenuPosition"], [3, "formControlSelect", "showContextMenuFor", "contextMenuPosition", "showContextMenu"], [3, "shareDmoSelect", "showContextMenuFor", "contextMenuPosition", "showContextMenu", "shareDmoList", "rows"], [1, "colouredDiv", "rightpadding", "row", "rowBorder", "sub-row", "dmo.display", "row-colour", 3, "drop", "click"], [1, "row-container"], ["class", "columnBorder sub-column pr-1 colouredDiv column-colour", 3, "ngStyle", "click", 4, "ngFor", "ngForOf"], [1, ""], [1, "columnBorder", "sub-column", "pr-1", "colouredDiv", "column-colour", 3, "click", "ngStyle"], ["class", "colouredDiv column-colour column-row-column-Border pr-1 list-dmo", 3, "id", "dragover", "drop", 4, "ngIf"], ["class", "columnrowBorder rightpadding colouredDiv row-colour", 3, "click", 4, "ngFor", "ngForOf"], [1, "colouredDiv", "column-colour", "column-row-column-Border", "pr-1", "list-dmo", 3, "dragover", "drop", "id"], ["class", "width", 3, "id", "drop", "dragover", 4, "ngIf"], ["class", "width", 3, "id", "click", 4, "ngFor", "ngForOf"], [1, "width", 3, "drop", "dragover", "id"], [1, "width", 3, "click", "id"], ["draggable", "true", 1, "drag-list-item", 3, "dragover", "dragstart", "dmo"], [1, "columnrowBorder", "rightpadding", "colouredDiv", "row-colour", 3, "click"], ["class", "list-dmo column-row-column-Border colouredDiv column-colour", 3, "ngStyle", "id", "click", "drop", "dragover", 4, "ngFor", "ngForOf"], [1, "list-dmo", "column-row-column-Border", "colouredDiv", "column-colour", 3, "click", "drop", "dragover", "ngStyle", "id"], [4, "ngIf"], [1, "panel-item-actions", "dmo-actions"], ["ngbTooltip", "Delete DMOG", 1, "item-action", 2, "color", "rgb(187, 53, 53)", 3, "click"], [1, "far", "fa-trash-alt"], ["ngbTooltip", "Edit DMOG", 1, "item-action", 3, "click"], [1, "fas", "fa-pencil-alt"], ["ngbTooltip", "DMOG Settings", 1, "item-action", 3, "click"], [1, "fas", "fa-arrows-alt"], ["ngbTooltip", "Add Row", 1, "item-action", 3, "click"], [1, "fa", "fa-plus"], [1, "item-actions", "dmo-actions", "active"], ["class", "item-action mr-0", "style", "color: rgb(187, 53, 53); margin-right: 10px", "ngbTooltip", "Data Model Objects", 3, "matMenuTriggerFor", "click", 4, "ngIf"], ["class", "item-action", "style", "color: rgb(187, 53, 53)", "ngbTooltip", "Remove Column", 3, "click", 4, "ngIf"], ["ngbTooltip", "Data Model Objects", 1, "item-action", "mr-0", 2, "color", "rgb(187, 53, 53)", "margin-right", "10px", 3, "click", "matMenuTriggerFor"], [1, "fa", "fa-ellipsis-v"], ["ngbTooltip", "Remove Column", 1, "item-action", 2, "color", "rgb(187, 53, 53)", 3, "click"], [1, "fa", "fa-trash-alt"]], template: function ResizeablePanelComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 2);
        \u0275\u0275listener("mouseenter", function ResizeablePanelComponent_Template_div_mouseenter_0_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.dmo.display = true);
        })("mouseleave", function ResizeablePanelComponent_Template_div_mouseleave_0_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.dmo.display = false);
        });
        \u0275\u0275elementStart(1, "div", 3);
        \u0275\u0275listener("mouseover", function ResizeablePanelComponent_Template_div_mouseover_1_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.hoveredRowIndex = ctx.data);
        })("mouseout", function ResizeablePanelComponent_Template_div_mouseout_1_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.hoveredRowIndex = null);
        });
        \u0275\u0275elementStart(2, "div", 4)(3, "label", 5);
        \u0275\u0275text(4);
        \u0275\u0275elementEnd()();
        \u0275\u0275element(5, "div", 6);
        \u0275\u0275elementStart(6, "div", 7);
        \u0275\u0275template(7, ResizeablePanelComponent_ng_container_7_Template, 1, 0, "ng-container", 8);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(8, ResizeablePanelComponent_div_8_Template, 4, 1, "div", 9)(9, ResizeablePanelComponent_ng_template_9_Template, 1, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(11, ResizeablePanelComponent_ng_template_11_Template, 1, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(13, "div")(14, "app-contextMenu", 10);
        \u0275\u0275listener("contextMenuSelected", function ResizeablePanelComponent_Template_app_contextMenu_contextMenuSelected_14_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.OperateContextMenu($event));
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(15, "app-dmo-form-controls", 11);
        \u0275\u0275listener("formControlSelect", function ResizeablePanelComponent_Template_app_dmo_form_controls_formControlSelect_15_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.FormControlSelect($event));
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "app-sharedmo-controls", 12);
        \u0275\u0275listener("shareDmoSelect", function ResizeablePanelComponent_Template_app_sharedmo_controls_shareDmoSelect_16_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.shareDmoSelect($event));
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        const itemActions_r36 = \u0275\u0275reference(10);
        \u0275\u0275propertyInterpolate1("id", "main_", ctx.title, "");
        \u0275\u0275property("ngStyle", ctx.style);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.title);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngTemplateOutlet", itemActions_r36)("ngTemplateOutletContext", \u0275\u0275pureFunction1(18, _c011, ctx.data));
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.rows);
        \u0275\u0275advance(6);
        \u0275\u0275property("object", ctx.contextMenuData)("showContextMenuFor", ctx.contextMenuData)("contextMenuPosition", ctx.contextMenuPosition);
        \u0275\u0275advance();
        \u0275\u0275property("showContextMenuFor", ctx.contextMenuData)("contextMenuPosition", ctx.contextMenuPosition)("showContextMenu", ctx.showFormContextMenu);
        \u0275\u0275advance();
        \u0275\u0275property("showContextMenuFor", ctx.contextMenuData)("contextMenuPosition", ctx.contextMenuPosition)("showContextMenu", ctx.showSharedmoContextMenu)("shareDmoList", ctx.availableDmoToShare.components)("rows", ctx.rows);
      }
    }, dependencies: [
      NgStyle,
      NgTemplateOutlet,
      NgForOf,
      NgIf,
      DmoComponent,
      NgbTooltip,
      MatMenuTrigger,
      ContextMenuComponent,
      DmoFormControlsComponent,
      ShareDmoComponent
    ], styles: ["\n\n.rectangle[_ngcontent-%COMP%] {\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  width: 700px;\n  height: auto;\n  border: solid 1px #121621;\n  color: #121621;\n  min-width: 100px !important;\n  min-height: 100px !important;\n}\n.row-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: stretch;\n  width: 100%;\n}\n.rowBorder[_ngcontent-%COMP%] {\n  border: 2px solid #e8e8e8;\n  transform: translate3d(0, 0, 0);\n}\n.columnBorder[_ngcontent-%COMP%] {\n  height: auto;\n  min-height: 45px;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n.row[_ngcontent-%COMP%] {\n  margin-right: 3px !important;\n  margin-left: 3px !important;\n  margin-top: 10px !important;\n}\nmwlResizable[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n}\n.resize-handle-top[_ngcontent-%COMP%], \n.resize-handle-bottom[_ngcontent-%COMP%] {\n  position: absolute;\n  height: 5px;\n  cursor: row-resize;\n  background-color: #121621;\n  width: 20px;\n}\n.resize-handle-top[_ngcontent-%COMP%] {\n  top: 0;\n}\n.resize-handle-bottom[_ngcontent-%COMP%] {\n  bottom: 0;\n}\n.resize-handle-left[_ngcontent-%COMP%], \n.resize-handle-right[_ngcontent-%COMP%] {\n  cursor: col-resize;\n  width: 5px;\n  background-color: #121621;\n}\n.resize-handle-left[_ngcontent-%COMP%] {\n  left: 0;\n}\n.resize-handle-right[_ngcontent-%COMP%] {\n  right: 0;\n}\n.item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  display: none;\n}\n.item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.panel-item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  margin-top: -1%;\n  display: none;\n}\n.panel-item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.panel-item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.column-item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  z-index: 999;\n  right: -10px;\n  top: -22px;\n  display: none;\n}\n.column-item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.column-item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.resizers[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n}\n.resizers[_ngcontent-%COMP%]   .resizer[_ngcontent-%COMP%] {\n  width: 6px;\n  height: 6px;\n  border-radius: 1px;\n  background: white;\n  border: 1px solid #d50000;\n  position: absolute;\n}\n.resizers[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%] {\n  top: 0;\n  right: -3px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.resizers[_ngcontent-%COMP%]   .bottom[_ngcontent-%COMP%] {\n  bottom: -3px;\n  left: 0;\n  width: 100%;\n  cursor: ns-resize;\n}\n.resizers[_ngcontent-%COMP%]   .top[_ngcontent-%COMP%] {\n  top: -3px;\n  left: 0;\n  width: 100%;\n  cursor: ns-resize;\n}\n.resizers[_ngcontent-%COMP%]   .left[_ngcontent-%COMP%] {\n  top: 0;\n  left: -3px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.resizers[_ngcontent-%COMP%]   .bottom-right[_ngcontent-%COMP%] {\n  right: -3px;\n  bottom: -3px;\n  cursor: nwse-resize;\n}\n.resizers[_ngcontent-%COMP%]   .top-right[_ngcontent-%COMP%] {\n  right: -3px;\n  top: -3px;\n  cursor: nesw-resize;\n}\n.resizers[_ngcontent-%COMP%]   .top-left[_ngcontent-%COMP%] {\n  left: -3px;\n  top: -3px;\n  cursor: nwse-resize;\n}\n.resizers[_ngcontent-%COMP%]   .bottom-left[_ngcontent-%COMP%] {\n  left: -3px;\n  bottom: -3px;\n  cursor: nesw-resize;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px !important;\n  background-color: transparent !important;\n  padding: 7px !important;\n  cursor: pointer;\n}\n.data-model-objects-menu[_ngcontent-%COMP%], \n.mat-menu-panel[_ngcontent-%COMP%] {\n  height: 30% !important;\n}\n  .mat-menu-content {\n  padding-top: 0px !important;\n  padding-bottom: 0px !important;\n}\n.mat-menu-item[_ngcontent-%COMP%] {\n  line-height: 35px;\n  height: 35px;\n}\n.columnrowBorder[_ngcontent-%COMP%] {\n  border: 2px solid #e8e8e8;\n  width: 100%;\n  margin-bottom: 3px;\n  margin-top: 3px;\n  display: flex;\n  flex: 1;\n  align-items: stretch;\n}\n.column-row-column-Border[_ngcontent-%COMP%] {\n  border: 2px solid #e8e8e8;\n  min-height: 40px;\n  width: 100%;\n  display: flex;\n  flex: 1;\n  align-items: stretch;\n}\n.item-actions-child[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  z-index: 2000;\n  position: relative;\n}\n.item-actions-child.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions-child.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action-child[_ngcontent-%COMP%] {\n  z-index: 2000;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.active-current[_ngcontent-%COMP%] {\n  background: #d50000;\n}\n.resizePanel[_ngcontent-%COMP%] {\n  resize: horizontal;\n}\n.row-colour[_ngcontent-%COMP%] {\n  border: 2px solid rgb(178, 211, 236);\n}\n.row[_ngcontent-%COMP%] {\n  margin-top: 2px !important;\n}\n.rightpadding[_ngcontent-%COMP%]:hover {\n  padding-right: 7px;\n}\n.width[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.list-dmo[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n/*# sourceMappingURL=resizeable-panel.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ResizeablePanelComponent, { className: "ResizeablePanelComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\resizeable-panel\\resizeable-panel.component.ts", lineNumber: 53 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/contier-parent-row-settings/contier-parent-row-settings.component.ts
var ContierParentRowSettingsComponent = class _ContierParentRowSettingsComponent {
  constructor(apiService, dataProvider, toster) {
    this.apiService = apiService;
    this.dataProvider = dataProvider;
    this.toster = toster;
    this.column = 0;
    this.Existingcolumn = 0;
  }
  formatLabel(value) {
    return `${value} column`;
  }
  ngOnInit() {
    if (this.sideNavModel) {
      console.log(this.sideNavModel);
      if (this.sideNavModel.type == "ParentRow") {
        this.mainRow = this.sideNavModel.data;
        this.Existingcolumn = this.mainRow.columns.length;
        this.column = this.mainRow.columns.length;
        this.rowdmogId = this.sideNavModel.dmog.DMOGID;
        this.panelMainContainer = this.sideNavModel.props;
      }
    }
  }
  ngOnChanges() {
    if (this.sideNavModel) {
      if (this.sideNavModel.type == "ParentRow") {
        this.mainRow = this.sideNavModel.data;
        this.column = this.mainRow.columns.length;
        this.Existingcolumn = this.mainRow.columns.length;
        this.rowdmogId = this.sideNavModel.dmog.DMOGID;
      }
    }
  }
  onDragOver(event) {
    event.preventDefault();
  }
  changeWidth(event) {
    this.column = event.value;
  }
  SaveWidthWidth_old(event) {
    if (this.column > 12)
      this.column = 12;
    else if (this.column < 0) {
      this.column = this.Existingcolumn;
    }
    if (this.sideNavModel.dmog && this.sideNavModel.dmog.DMOGProps) {
      this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      if (this.panelMainContainer) {
        if (this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0] && this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0].columns.length > 0) {
          let currentRoWithCol = this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0];
          let column = currentRoWithCol.columns.length;
          for (let index2 = column + 1; index2 <= this.column; index2++) {
            this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0].columns.push({ "colIndex": index2, "dmoguid": [], "rows": [] });
          }
        } else {
          let currentRoWithCol = this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0];
          let column = currentRoWithCol.columns.length;
          for (let index2 = this.Existingcolumn; index2 < this.column; index2++) {
            this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0].columns.push({ "colIndex": index2, "dmoguid": [], "rows": [] });
          }
        }
        let index = 0;
        let perClmwidth = 99.5 / this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0].columns.length;
        for (let c of this.panelMainContainer.rows.filter((a) => a.rowIndex == this.mainRow.rowIndex)[0].columns) {
          c.width = perClmwidth;
          c.colIndex = index;
          c.mw = false;
          index++;
        }
      }
      var model = {};
      model = {
        "DMOGID": this.sideNavModel.dmog.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
      const url = `wfapibm/DataModel/SaveDmogProps`;
      this.apiService.postgateway("", url, model).subscribe((r) => {
        this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
        this.dataProvider.setUpdateDmogSettings(model);
      }, (error) => {
        console.log(error);
      });
    }
  }
  SaveWidthWidth(event) {
    if (this.column > 12)
      this.column = 12;
    else if (this.column < 0)
      this.column = this.Existingcolumn;
    if (this.sideNavModel.dmog && this.sideNavModel.dmog.DMOGProps) {
      this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      if (this.panelMainContainer) {
        let currentRow = this.panelMainContainer.rows.find((a) => a.rowIndex === this.mainRow.rowIndex);
        if (!currentRow)
          return;
        if (this.column < currentRow.columns.length) {
          if (!this.canReduceColumns(currentRow, this.column)) {
            console.warn("Cannot reduce - would remove columns with dmoguids");
            this.toster.warning("Cannot reduce columns: one or more columns contain DMO items.", "Warning");
            return;
          }
        }
        this.adjustColumns(currentRow, this.column);
        let model = {
          "DMOGID": this.sideNavModel.dmog.DMOGID,
          "DMOGProps": JSON.stringify(this.panelMainContainer)
        };
        const url = `wfapibm/DataModel/SaveDmogProps`;
        this.apiService.postgateway("", url, model).subscribe((response) => {
          this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
          this.dataProvider.setUpdateDmogSettings(model);
        }, (error) => {
          console.error(error);
        });
      }
    }
  }
  canReduceColumns(currentRow, newColumnCount) {
    if (!currentRow?.columns)
      return false;
    const columnsWithData = currentRow.columns.filter((col) => col.dmoguid && col.dmoguid.length > 0).length;
    return newColumnCount >= columnsWithData;
  }
  adjustColumns(currentRow, newColumnCount) {
    const existingColumns = [...currentRow.columns];
    if (newColumnCount > existingColumns.length) {
      for (let i = existingColumns.length; i < newColumnCount; i++) {
        existingColumns.push({
          colIndex: i,
          dmoguid: [],
          rows: []
        });
      }
    } else if (newColumnCount < existingColumns.length) {
      const emptyColumns = existingColumns.map((col, index) => ({ col, index })).filter((item) => !item.col.dmoguid || item.col.dmoguid.length === 0);
      const columnsToRemove = existingColumns.length - newColumnCount;
      const removableColumns = emptyColumns.slice(0, columnsToRemove);
      removableColumns.sort((a, b) => b.index - a.index).forEach((item) => {
        existingColumns.splice(item.index, 1);
      });
      existingColumns.forEach((col, index) => {
        col.colIndex = index;
      });
    }
    const perColumnWidth = 99.5 / existingColumns.length;
    existingColumns.forEach((col) => {
      col.width = perColumnWidth;
      col.mw = false;
    });
    currentRow.columns = existingColumns;
  }
  static {
    this.\u0275fac = function ContierParentRowSettingsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ContierParentRowSettingsComponent)(\u0275\u0275directiveInject(ApiService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ContierParentRowSettingsComponent, selectors: [["app-contier-parent-row-settings"]], inputs: { sideNavModel: "sideNavModel" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 20, vars: 6, consts: [[1, "container"], [1, "row-settings-header"], [1, "main-heading"], [1, "continer-header"], [1, "continer-heading"], [1, "continer-Name-bold"], [1, "continer-Name"], [1, "settings-range"], [1, "range-box"], ["type", "range", "max", "12", "step", "1", "displayWith", "formatLabel", 1, "range-line", 3, "input", "change", "ngModelChange", "min", "ngModel"], [1, "range-counter"], ["min", "Existingcolumn", "max", "12", 1, "input", 3, "change", "ngModelChange", "ngModel"], [1, "break-line"]], template: function ContierParentRowSettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275text(2, "Row Setting");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "label", 2);
        \u0275\u0275text(4, "Settings");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 3)(6, "div", 4);
        \u0275\u0275text(7, "Card Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 5);
        \u0275\u0275text(9);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(10, "div", 3)(11, "div", 4);
        \u0275\u0275text(12, "Columns");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(13, "div", 6)(14, "div", 7)(15, "div", 8)(16, "input", 9);
        \u0275\u0275listener("input", function ContierParentRowSettingsComponent_Template_input_input_16_listener($event) {
          return ctx.changeWidth($event);
        })("change", function ContierParentRowSettingsComponent_Template_input_change_16_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function ContierParentRowSettingsComponent_Template_input_ngModelChange_16_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.column, $event) || (ctx.column = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "div", 10)(18, "input", 11);
        \u0275\u0275listener("change", function ContierParentRowSettingsComponent_Template_input_change_18_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function ContierParentRowSettingsComponent_Template_input_ngModelChange_18_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.column, $event) || (ctx.column = $event);
          return $event;
        });
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275element(19, "hr", 12);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275styleProp("top", ctx.transformy);
        \u0275\u0275advance(9);
        \u0275\u0275textInterpolate(ctx.sideNavModel.dmog.DisplayName);
        \u0275\u0275advance(7);
        \u0275\u0275propertyInterpolate("min", ctx.Existingcolumn);
        \u0275\u0275twoWayProperty("ngModel", ctx.column);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.column);
      }
    }, dependencies: [ReactiveFormsModule, DefaultValueAccessor, RangeValueAccessor, NgControlStatus, FormsModule, NgModel], styles: ['\n\n.slider-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.75fr 0.1fr;\n}\n.input[_ngcontent-%COMP%] {\n  width: 30px;\n  border-radius: 0.25rem;\n  font-size: 13px;\n  margin-top: 10px;\n}\n.container[_ngcontent-%COMP%] {\n  padding: 0px 0px 0px 0px !important;\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  background: var(--White, #FFF);\n  box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 0.1);\n  min-width: 100px !important;\n  min-height: 100px !important;\n  height: calc(100vh - 100px);\n  overflow-y: none;\n  -webkit-user-select: none;\n  user-select: none;\n  color: #121621;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.row-settings-header[_ngcontent-%COMP%] {\n  width: 294px;\n  height: 38px;\n  text-align: center;\n  background: #005996;\n  line-height: 2;\n  padding: 2px;\n  font-size: 16px;\n  font-weight: 500;\n  color: var(--White, #FFF);\n  text-align: center;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 40px;\n}\n.main-heading[_ngcontent-%COMP%] {\n  color: var(--Dark-Black, #000);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  margin-top: 15px;\n  padding: 0 15px;\n}\n.break-line[_ngcontent-%COMP%] {\n  width: 287px;\n  height: 0px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n}\n.continer-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  gap: 0;\n  font-size: 14px;\n  margin-top: 5px;\n  font-family: "Roboto";\n  color: black;\n  padding: 10px;\n}\n.continer-heading[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.continer-Name-bold[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n}\n.continer-Name[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.range-box[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n}\n.settings-range[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 10px;\n}\n.range-line[_ngcontent-%COMP%] {\n  width: 78px;\n  height: 10px;\n}\n.range-counter[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  display: flex;\n  width: 37px;\n  height: 30px;\n  padding: 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n}\ninput[type=range][_ngcontent-%COMP%] {\n  accent-color: #4A5CB3;\n}\n/*# sourceMappingURL=contier-parent-row-settings.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ContierParentRowSettingsComponent, { className: "ContierParentRowSettingsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\contier-parent-row-settings\\contier-parent-row-settings.component.ts", lineNumber: 18 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/dmog-shared-dmo/dmog-shared-dmo.component.ts
function DmogSharedDmoComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 4)(1, "div", 5);
    \u0275\u0275listener("dragover", function DmogSharedDmoComponent_div_3_Template_div_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onDragOver($event));
    })("dragstart", function DmogSharedDmoComponent_div_3_Template_div_dragstart_1_listener($event) {
      const item_r3 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dragdmo($event, item_r3));
    });
    \u0275\u0275elementStart(2, "div", 6)(3, "div", 7);
    \u0275\u0275element(4, "i", 8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 9)(6, "div", 10);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "div", 11);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(10, "div", 12)(11, "div", 13);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(12, "svg", 14);
    \u0275\u0275element(13, "path", 15)(14, "path", 16)(15, "path", 17)(16, "path", 18)(17, "path", 19)(18, "path", 20);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(19, "button", 21);
    \u0275\u0275listener("click", function DmogSharedDmoComponent_div_3_Template_button_click_19_listener($event) {
      const item_r3 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onDmoDelete($event, item_r3));
    });
    \u0275\u0275element(20, "i", 22);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const item_r3 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275classMap(ctx_r1.getcssbyclass(item_r3.type));
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(item_r3.label);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("(", item_r3.dmoName, ")");
  }
}
var DmogSharedDmoComponent = class _DmogSharedDmoComponent {
  constructor(dmApi, msg) {
    this.dmApi = dmApi;
    this.msg = msg;
    this.formsControls = Object.values(DMOS2).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));
    this.shareDmoList = [];
    this.CopyshareDmoList = [];
  }
  ngOnInit() {
    if (!this.draggingStatus) {
      this.GetAvailableDmoToShare();
    }
  }
  reload() {
    if (this.Searchtrem != null && this.Searchtrem != void 0) {
      if (!this.draggingStatus) {
        this.searchDmo(this.Searchtrem);
      }
    } else if (!this.draggingStatus) {
      this.GetAvailableDmoToShare();
    }
  }
  removeExisting() {
    if (this.sideNavModel.dmog && this.sideNavModel.dmog.DMOGProps) {
      this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      if (this.panelMainContainer) {
        if (this.panelMainContainer.rows.length && this.shareDmoList && this.shareDmoList.length > 0) {
          for (let index = 0; index < this.panelMainContainer.rows.length; index++) {
            const r = this.panelMainContainer.rows[index];
            for (let c = 0; c < r.columns.length; c++) {
              const col = r.columns[c];
              if (col.dmoguid != null) {
                for (let inguid = 0; inguid < col.dmoguid.length; inguid++) {
                  const element = col.dmoguid[inguid];
                  if (element) {
                    this.shareDmoList = this.shareDmoList.filter((a) => a.guid != element.toLowerCase());
                  }
                }
              }
              for (let cr = 0; cr < col.rows.length; cr++) {
                const crc = col.rows[cr];
                for (let icrc = 0; icrc < crc.columns.length; icrc++) {
                  const cColumn = crc.columns[icrc];
                  if (cColumn.dmoguid != null) {
                    for (let inguid = 0; inguid < cColumn.dmoguid.length; inguid++) {
                      const element = cColumn.dmoguid[inguid];
                      if (element) {
                        this.shareDmoList = this.shareDmoList.filter((a) => a.guid != element.toLowerCase());
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ngOnChanges(changes) {
    if (changes.sideNavModel && changes.sideNavModel.currentValue != changes.sideNavModel.previousValue) {
      if (changes.sideNavModel.previousValue) {
        if (changes.sideNavModel.currentValue.dmog.DMOGID != changes.sideNavModel.previousValue.dmog.DMOGID) {
          if (!this.draggingStatus) {
            this.GetAvailableDmoToShare();
          }
        }
      }
    }
    if (this.Searchtrem != void 0 || this.Searchtrem != null) {
      this.searchDmo(this.Searchtrem);
    }
  }
  getBMOGID(dmog) {
    if (dmog?.parent && dmog.parent === "BMO") {
      const bmo = dmog;
      if (bmo.parent && bmo.parent === "BMOG") {
        return bmo.BMOGID;
      }
    }
    return null;
  }
  //data.DMOGID
  GetAvailableDmoToShare() {
    var data = this.sideNavModel.dmog;
    let bmogId = data?.parent?.parent?.BMOGID ?? data?.DMOGID;
    this.dmApi.GetAvailableDmoToShare(bmogId, data.root.BMId).subscribe((x) => {
      this.shareDmoList = x.components;
      this.removeExisting();
      this.CopyshareDmoList = this.shareDmoList;
    });
  }
  getcssbyclass(type) {
    let find = this.formsControls.filter((a) => a.type === type);
    if (find.length > 0 && find[0].class) {
      return find[0].class;
    }
    return "";
  }
  searchDmo(key) {
    if (this.shareDmoList.length > 0) {
      if (key && key != "" && key.length > 0) {
        this.shareDmoList = this.CopyshareDmoList.filter((a) => a.guid.toLowerCase().includes(key.toLowerCase()) || a.dmoName.toLowerCase().includes(key.toLowerCase()));
      } else {
        this.shareDmoList = this.CopyshareDmoList;
      }
    } else {
      this.shareDmoList = this.CopyshareDmoList;
    }
  }
  onDragOver(event) {
    event.preventDefault();
  }
  dragdmo(event, item) {
    var model = { "contol": item, "selectedItem": this.sideNavModel.data, "DMOGID": this.sideNavModel.dmog.DMOGID };
    event.dataTransfer.setData("SharedDmogDmo", JSON.stringify(model));
    setTimeout(() => {
      this.GetAvailableDmoToShare();
    }, 2e3);
  }
  onDmoDelete($event, item) {
    const data = this.sideNavModel.dmog;
    const dmoId = item.dmoId;
    const dispName = item.label;
    this.msg.showMessage("Warning", {
      header: "Delete DMO",
      body: `Are you sure you want to Delete ${dispName}?`,
      btnText: "Delete",
      checkboxText: "Yes, Delete this object",
      isDelete: true,
      isNewDesign: true,
      callback: () => {
        this.dmApi.deleteDmo(dmoId, data.root.BMId).subscribe((success) => {
          if (success) {
            this.GetAvailableDmoToShare();
          }
        });
      }
    });
  }
  static {
    this.\u0275fac = function DmogSharedDmoComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmogSharedDmoComponent)(\u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(MessageService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmogSharedDmoComponent, selectors: [["app-dmog-shared-dmo"]], inputs: { sideNavModel: "sideNavModel", Searchtrem: "Searchtrem", draggingStatus: "draggingStatus" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 4, vars: 1, consts: [[1, "formcomponents"], ["id", "form-controls", 1, "list-group", "drag-list"], [1, ""], ["class", "rows-main-contnier", 4, "ngFor", "ngForOf"], [1, "rows-main-contnier"], ["draggable", "true", 1, "rows-container", 3, "dragover", "dragstart"], [1, "rows-content"], [1, "icons-main"], [2, "margin-right", "5px"], [1, "dmo-text-box"], [1, "texts"], [1, "sub-texts"], [1, "menus-box", "d-flex"], [1, "menus-main"], ["width", "10", "height", "24", "viewBox", "0 0 12 20", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M2 3C2.55228 3 3 2.55228 3 2C3 1.44772 2.55228 1 2 1C1.44772 1 1 1.44772 1 2C1 2.55228 1.44772 3 2 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 3C10.5523 3 11 2.55228 11 2C11 1.44772 10.5523 1 10 1C9.44772 1 9 1.44772 9 2C9 2.55228 9.44772 3 10 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 11C2.55228 11 3 10.5523 3 10C3 9.44772 2.55228 9 2 9C1.44772 9 1 9.44772 1 10C1 10.5523 1.44772 11 2 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 11C10.5523 11 11 10.5523 11 10C11 9.44772 10.5523 9 10 9C9.44772 9 9 9.44772 9 10C9 10.5523 9.44772 11 10 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 19C2.55228 19 3 18.5523 3 18C3 17.4477 2.55228 17 2 17C1.44772 17 1 17.4477 1 18C1 18.5523 1.44772 19 2 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 19C10.5523 19 11 18.5523 11 18C11 17.4477 10.5523 17 10 17C9.44772 17 9 17.4477 9 18C9 18.5523 9.44772 19 10 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], [1, "btn", "delete-icon-btn", 3, "click"], [1, "far", "fa-trash-alt", "delete-icon", "item__action"]], template: function DmogSharedDmoComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2);
        \u0275\u0275template(3, DmogSharedDmoComponent_div_3_Template, 21, 4, "div", 3);
        \u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275property("ngForOf", ctx.shareDmoList);
      }
    }, dependencies: [NgForOf], styles: ['\n\nmat-slider[_ngcontent-%COMP%] {\n  width: 200px;\n}\n.slider-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.75fr 0.1fr;\n}\n.input[_ngcontent-%COMP%] {\n  width: 30px;\n  border-radius: 0.25rem;\n  font-size: 13px;\n  margin-top: 10px;\n}\n.container[_ngcontent-%COMP%] {\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  border: solid 1px #121621;\n  color: #121621;\n  border-radius: 5px;\n  min-width: 100px !important;\n  min-height: 100px !important;\n  height: 100%;\n  overflow-y: overlay;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.contextMenuContainer[_ngcontent-%COMP%] {\n  height: 250px;\n  overflow: auto;\n  display: flex;\n  position: fixed;\n  border-radius: 5px;\n  transform-origin: top left;\n  z-index: 10000;\n}\n.contextMenuContainer.visible[_ngcontent-%COMP%] {\n  transition: transform 200ms ease-in-out;\n}\n.menu-link[_ngcontent-%COMP%] {\n  cursor: pointer;\n  height: 23px;\n  background: #559000;\n  color: #fff;\n  font-size: 11px;\n  font-family: "Museo Sans", sans-serif;\n}\n.menu-link[_ngcontent-%COMP%]:hover {\n}\n.menuIcon[_ngcontent-%COMP%] {\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.form-view[_ngcontent-%COMP%] {\n  position: relative;\n}\n.leftcol[_ngcontent-%COMP%] {\n  min-height: 550px;\n  float: left;\n  padding: 0px;\n  position: sticky;\n  top: 0;\n}\n.leftlayout[_ngcontent-%COMP%] {\n  height: 30px;\n  border: 1px solid #ddd;\n  margin-left: 7px;\n  padding: 4px;\n  font-size: 13px;\n  margin-right: 7px;\n}\n.leftlayoutdmotyp[_ngcontent-%COMP%] {\n  height: 415px;\n  border: 1px solid #ddd;\n  margin-right: 5px;\n  padding: 6px;\n  font-size: 15px;\n}\n.leftlayout1[_ngcontent-%COMP%] {\n  height: 30px;\n  border-bottom: 1px solid #ddd;\n  font-size: 13px;\n}\n.formcomponents[_ngcontent-%COMP%] {\n  padding: 12px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  max-height: 225px;\n}\ndiv.scroll-list[_ngcontent-%COMP%] {\n  overflow: auto;\n  max-height: 70vh;\n}\n.close[_ngcontent-%COMP%] {\n  color: white;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n.close[_ngcontent-%COMP%]:hover, \n.close[_ngcontent-%COMP%]:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px !important;\n  padding: 7px !important;\n  cursor: pointer;\n  border: 1px solid lightgrey;\n  overflow: hidden;\n  overflow-wrap: anywhere;\n  margin-bottom: 10px;\n}\n.formarea[_ngcontent-%COMP%] {\n  visibility: visible;\n  position: relative;\n  min-height: 450px;\n  padding: 10px;\n  border: dotted 2px #e8e8e8;\n  float: right;\n}\n.col[_ngcontent-%COMP%] {\n  float: left;\n}\n.alert[_ngcontent-%COMP%] {\n  border-radius: 0;\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  text-align: center;\n  font-size: 12px;\n}\n.alert-info[_ngcontent-%COMP%] {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  margin: 10px 20px;\n}\n.dmo-columns[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 5px;\n  margin-bottom: 5px;\n}\n.dmo-columns[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  align-self: self-start;\n}\n.dmo-columns[_ngcontent-%COMP%]   .span-2[_ngcontent-%COMP%] {\n  grid-column: span 2;\n}\n.cdk-drop-list[_ngcontent-%COMP%]:not(#form-controls) {\n  border: 2px dotted #e8e8e8;\n  transform: translate3d(0, 0, 0);\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  transform: translate3d(0, 0, 0);\n}\n.drag-list-item[_ngcontent-%COMP%]:last-child {\n  border: none;\n}\n.drag-list-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  cursor: move;\n  background: white;\n  padding: 0 20px;\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drop-list-receiving[_ngcontent-%COMP%]:not(#form-controls) {\n  border: #4c9e00 dotted 2px;\n}\n.drag-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-list-item[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  min-width: 250px;\n  transform: translate3d(0, 0, 0);\n}\n.item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  position: absolute;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  display: none;\n}\n.item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.Search-shared-Dmo[_ngcontent-%COMP%] {\n  width: 260px;\n  height: 40px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: var(--Shades-White, #FFF);\n  padding-left: 40px;\n  text-indent: 5px;\n}\n.Search-shared-Dmo[_ngcontent-%COMP%]::placeholder {\n  color: #333;\n  font-family: "Museo Sans";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  left: 20px;\n}\n.searching-shared-main-box[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n}\n.search-shared-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 41%;\n  left: 10px;\n  transform: translateY(-50%);\n}\n.menus-main[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  padding: 7px;\n  background: #f5f5f5;\n  border-radius: 0px 5px 5px 0px;\n  justify-content: center;\n}\n.rows-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 240px;\n  height: 40px;\n  padding: 0px;\n  align-items: center;\n  gap: 0px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: #FFF;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\n}\n.rows-main-contnier[_ngcontent-%COMP%] {\n  display: flex;\n  width: 240px;\n  height: 40px;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: #FFF;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.rows-content[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  padding: 8px;\n  gap: 0px;\n}\n.icons-main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n.icons[_ngcontent-%COMP%] {\n  width: 33px;\n  height: 7px;\n  background-color: #d3d3d3;\n  border-radius: 2px;\n  margin-right: 8px;\n}\n.texts[_ngcontent-%COMP%] {\n  color: var(--Color-2, #333);\n  font-family: "Museo Sans";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.sub-texts[_ngcontent-%COMP%] {\n  color: var(--Color-2, #333);\n  font-family: "Museo Sans";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.menus[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n.menu-dots[_ngcontent-%COMP%] {\n  width: 6px;\n  height: 6px;\n  margin: 1px 0;\n}\n.menus-box[_ngcontent-%COMP%] {\n  width: 29px;\n  height: 38px;\n  right: 1px;\n  top: 1px;\n  border-radius: 0px 4px 4px 0px;\n  border-left: 1px solid var(--border-color, #CCC);\n  background: #E9ECEF;\n}\n.menus-box[_ngcontent-%COMP%] {\n  width: 29px;\n  height: 38px;\n  right: 1px;\n  top: 1px;\n  border-radius: 0px 4px 4px 0px;\n  border-left: 1px solid var(--border-color, #CCC);\n  background: #E9ECEF;\n}\n.dmo-shared-main-list[_ngcontent-%COMP%] {\n  overflow-y: auto;\n  max-height: 588px;\n  overflow-x: hidden;\n  width: 260px;\n  margin-bottom: 10px;\n}\n.dmo-shared-main-list[_ngcontent-%COMP%]::-webkit-scrollbar {\n  width: 6px;\n  align-self: stretch;\n}\n.dmo-shared-main-list[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n.dmo-shared-main-list[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.dmo-shared-main-list[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.dmo-text-box[_ngcontent-%COMP%] {\n  display: block;\n  padding: 1px;\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar {\n  width: 6px;\n  align-self: stretch;\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n/*# sourceMappingURL=dmog-shared-dmo.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmogSharedDmoComponent, { className: "DmogSharedDmoComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\dmog-shared-dmo\\dmog-shared-dmo.component.ts", lineNumber: 16 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/dmocontrols/dmocontrols.component.ts
var _c012 = (a0, a1, a2) => ({ "formcomponents-full-width": a0, "formcomponents-half-width": a1, "formcomponents-alt-height": a2 });
function DMOControlsComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 3)(1, "div", 4);
    \u0275\u0275listener("dragover", function DMOControlsComponent_div_2_Template_div_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onDragOver($event));
    })("dragstart", function DMOControlsComponent_div_2_Template_div_dragstart_1_listener($event) {
      const item_r3 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dragdmo($event, item_r3));
    });
    \u0275\u0275elementStart(2, "div", 5)(3, "div", 6);
    \u0275\u0275element(4, "i", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "span", 8);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "div", 9)(8, "div", 10);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(9, "svg", 11);
    \u0275\u0275element(10, "path", 12)(11, "path", 13)(12, "path", 14)(13, "path", 15)(14, "path", 16)(15, "path", 17);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const item_r3 = ctx.$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275classMap(item_r3.class);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r3.name);
  }
}
var DMOControlsComponent = class _DMOControlsComponent {
  constructor() {
    this.formsControls = Object.values(DMOS).sort((a, b) => a.name.localeCompare(b.name));
    this.formsControlsList = [];
    this.hideDropAbleRow = false;
  }
  ngOnInit() {
    this.formsControlsList = this.formsControls;
  }
  ngOnChanges() {
    if (this.Searchtrem != void 0 || this.Searchtrem != null) {
      this.searchControls(this.Searchtrem);
    }
  }
  onDragOver(event) {
    event.preventDefault();
  }
  dragdmo(event, item) {
    var model = { "contol": item, "selectedItem": this.sideNavModel.data, "DMOGID": this.sideNavModel.dmog.DMOGID };
    event.dataTransfer.setData("ControlDmogDmo", JSON.stringify(model));
  }
  searchControls(key) {
    if (this.formsControls.length > 0) {
      if (key && key.trim().length > 0) {
        this.formsControlsList = this.formsControls.filter((item) => item.name.toLowerCase().includes(key.toLowerCase()));
      } else {
        this.formsControlsList = [...this.formsControls];
      }
    }
  }
  static {
    this.\u0275fac = function DMOControlsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DMOControlsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DMOControlsComponent, selectors: [["app-dmocontrols"]], inputs: { sideNavModel: "sideNavModel", hideDmoAndSharedDmo: "hideDmoAndSharedDmo", Searchtrem: "Searchtrem", hideDropAbleRow: "hideDropAbleRow" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 3, vars: 6, consts: [[1, "formcomponents", 3, "ngClass"], [1, ""], ["class", "rows-main-contnier", 4, "ngFor", "ngForOf"], [1, "rows-main-contnier"], ["draggable", "true", 1, "rows-container", 3, "dragover", "dragstart"], [1, "rows-content"], [1, "icons-main"], [2, "margin-right", "5px"], [1, "texts"], [1, "menus-box"], [1, "menus-main"], ["width", "10", "height", "24", "viewBox", "0 0 12 20", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M2 3C2.55228 3 3 2.55228 3 2C3 1.44772 2.55228 1 2 1C1.44772 1 1 1.44772 1 2C1 2.55228 1.44772 3 2 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 3C10.5523 3 11 2.55228 11 2C11 1.44772 10.5523 1 10 1C9.44772 1 9 1.44772 9 2C9 2.55228 9.44772 3 10 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 11C2.55228 11 3 10.5523 3 10C3 9.44772 2.55228 9 2 9C1.44772 9 1 9.44772 1 10C1 10.5523 1.44772 11 2 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 11C10.5523 11 11 10.5523 11 10C11 9.44772 10.5523 9 10 9C9.44772 9 9 9.44772 9 10C9 10.5523 9.44772 11 10 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 19C2.55228 19 3 18.5523 3 18C3 17.4477 2.55228 17 2 17C1.44772 17 1 17.4477 1 18C1 18.5523 1.44772 19 2 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 19C10.5523 19 11 18.5523 11 18C11 17.4477 10.5523 17 10 17C9.44772 17 9 17.4477 9 18C9 18.5523 9.44772 19 10 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"]], template: function DMOControlsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275template(2, DMOControlsComponent_div_2_Template, 16, 3, "div", 2);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(2, _c012, ctx.hideDmoAndSharedDmo, !ctx.hideDmoAndSharedDmo, !ctx.hideDropAbleRow && !ctx.hideDmoAndSharedDmo));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.formsControlsList);
      }
    }, dependencies: [NgClass, NgForOf], styles: ['\n\nmat-slider[_ngcontent-%COMP%] {\n  width: 200px;\n}\n.slider-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.75fr 0.1fr;\n}\n.input[_ngcontent-%COMP%] {\n  width: 30px;\n  border-radius: 0.25rem;\n  font-size: 13px;\n  margin-top: 10px;\n}\n.container[_ngcontent-%COMP%] {\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  border: solid 1px #121621;\n  color: #121621;\n  border-radius: 5px;\n  min-width: 100px !important;\n  min-height: 100px !important;\n  height: 100%;\n  overflow-y: overlay;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.contextMenuContainer[_ngcontent-%COMP%] {\n  height: 250px;\n  overflow: auto;\n  display: flex;\n  position: fixed;\n  border-radius: 5px;\n  transform-origin: top left;\n  z-index: 10000;\n}\n.contextMenuContainer.visible[_ngcontent-%COMP%] {\n  transition: transform 200ms ease-in-out;\n}\n.menu-link[_ngcontent-%COMP%] {\n  cursor: pointer;\n  height: 23px;\n  background: #559000;\n  color: #fff;\n  font-size: 11px;\n  font-family: "Museo Sans", sans-serif;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.form-view[_ngcontent-%COMP%] {\n  position: relative;\n}\n.leftcol[_ngcontent-%COMP%] {\n  min-height: 550px;\n  float: left;\n  padding: 0px;\n  position: sticky;\n  top: 0;\n}\n.leftlayout[_ngcontent-%COMP%] {\n  height: 30px;\n  border: 1px solid #ddd;\n  margin-left: 7px;\n  padding: 4px;\n  font-size: 13px;\n  margin-right: 7px;\n}\n.leftlayoutdmotyp[_ngcontent-%COMP%] {\n  height: 415px;\n  border: 1px solid #ddd;\n  margin-right: 5px;\n  padding: 6px;\n  font-size: 15px;\n}\n.leftlayout1[_ngcontent-%COMP%] {\n  height: 30px;\n  border-bottom: 1px solid #ddd;\n  font-size: 13px;\n}\n.formcomponents[_ngcontent-%COMP%] {\n  padding: 12px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n.formcomponents-full-width[_ngcontent-%COMP%] {\n  max-height: calc(88vh - 300px);\n  margin-right: 10px;\n}\n.formcomponents-half-width[_ngcontent-%COMP%] {\n  max-height: calc(86vh - 300px);\n  margin-right: 10px;\n}\n.formcomponents-alt-height[_ngcontent-%COMP%] {\n  max-height: calc(100vh - 500px);\n  margin-right: 10px;\n}\ndiv.scroll-list[_ngcontent-%COMP%] {\n  overflow: auto;\n  max-height: 70vh;\n}\n.close[_ngcontent-%COMP%] {\n  color: white;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n.close[_ngcontent-%COMP%]:hover, \n.close[_ngcontent-%COMP%]:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 12px !important;\n  padding: 7px !important;\n  cursor: pointer;\n  border: 1px solid lightgrey;\n}\n.formarea[_ngcontent-%COMP%] {\n  visibility: visible;\n  position: relative;\n  min-height: 450px;\n  padding: 10px;\n  border: dotted 2px #e8e8e8;\n  float: right;\n}\n.col[_ngcontent-%COMP%] {\n  float: left;\n}\n.alert[_ngcontent-%COMP%] {\n  border-radius: 0;\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  text-align: center;\n  font-size: 12px;\n}\n.alert-info[_ngcontent-%COMP%] {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  margin: 10px 20px;\n}\n.dmo-columns[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 5px;\n  margin-bottom: 5px;\n}\n.dmo-columns[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  align-self: self-start;\n}\n.dmo-columns[_ngcontent-%COMP%]   .span-2[_ngcontent-%COMP%] {\n  grid-column: span 2;\n}\n.cdk-drop-list[_ngcontent-%COMP%]:not(#form-controls) {\n  border: 2px dotted #e8e8e8;\n  transform: translate3d(0, 0, 0);\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  transform: translate3d(0, 0, 0);\n}\n.drag-list-item[_ngcontent-%COMP%]:last-child {\n  border: none;\n}\n.drag-list-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  cursor: move;\n  background: white;\n  padding: 0 20px;\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drop-list-receiving[_ngcontent-%COMP%]:not(#form-controls) {\n  border: #4c9e00 dotted 2px;\n}\n.drag-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-list-item[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  min-width: 250px;\n  transform: translate3d(0, 0, 0);\n}\n.item-actions[_ngcontent-%COMP%] {\n  background-color: #FFF;\n  position: absolute;\n  z-index: 999;\n  right: 15px;\n  top: -22px;\n  display: none;\n}\n.item-actions.active[_ngcontent-%COMP%] {\n  display: block;\n}\n.item-actions.dmo-actions[_ngcontent-%COMP%] {\n  top: 0;\n}\n.item-action[_ngcontent-%COMP%] {\n  float: right;\n  z-index: 1001;\n  margin: 2px 2px 0 0;\n  border: 1px solid #ccc;\n  min-width: 30px;\n  font-size: 13px;\n  text-align: center;\n}\n.Search-Dmo[_ngcontent-%COMP%] {\n  width: 260px;\n  height: 40px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: var(--Shades-White, #FFF);\n  padding-left: 40px;\n  text-indent: 5px;\n}\n.Search-Dmo[_ngcontent-%COMP%]::placeholder {\n  color: #333;\n  font-family: "Museo Sans";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  left: 20px;\n}\n.searching-main-box[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n}\n.search-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 41%;\n  left: 10px;\n  transform: translateY(-50%);\n}\n.menus-main[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  padding: 7px;\n  background: #f5f5f5;\n  border-radius: 0px 5px 5px 0px;\n  justify-content: center;\n}\n.rows-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 240px;\n  height: 40px;\n  padding: 0px;\n  align-items: center;\n  gap: 0px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: #FFF;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\n}\n.rows-main-contnier[_ngcontent-%COMP%] {\n  display: flex;\n  width: 240px;\n  height: 40px;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: #FFF;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.rows-content[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  padding: 8px;\n  gap: 0px;\n}\n.icons-main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n.icons[_ngcontent-%COMP%] {\n  width: 33px;\n  height: 7px;\n  background-color: #d3d3d3;\n  border-radius: 2px;\n  margin-right: 8px;\n}\n.texts[_ngcontent-%COMP%] {\n  color: var(--Color-2, #333);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.menus[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n.menu-dots[_ngcontent-%COMP%] {\n  width: 6px;\n  height: 6px;\n  margin: 1px 0;\n}\n.menus-box[_ngcontent-%COMP%] {\n  width: 29px;\n  height: 38px;\n  right: 1px;\n  top: 1px;\n  border-radius: 0px 4px 4px 0px;\n  border-left: 1px solid var(--border-color, #CCC);\n  background: #E9ECEF;\n}\n.dmo-main-list[_ngcontent-%COMP%] {\n  overflow-y: auto;\n  max-height: 588px;\n  overflow-x: hidden;\n  width: 260px;\n  margin-bottom: 10px;\n}\n.dmo-main-list[_ngcontent-%COMP%]::-webkit-scrollbar {\n  width: 6px;\n  align-self: stretch;\n}\n.dmo-main-list[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n.dmo-main-list[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.dmo-main-list[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar {\n  width: 6px;\n  align-self: stretch;\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.formcomponents[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n/*# sourceMappingURL=dmocontrols.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DMOControlsComponent, { className: "DMOControlsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\dmocontrols\\dmocontrols.component.ts", lineNumber: 14 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/container-column-settings/container-column-settings.component.ts
function ContainerColumnSettingsComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275element(1, "hr", 18);
    \u0275\u0275elementStart(2, "label", 19);
    \u0275\u0275text(3, "Data Model Objects");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 20)(5, "span", 21);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(6, "svg", 22);
    \u0275\u0275element(7, "path", 23);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(8, "input", 24);
    \u0275\u0275listener("input", function ContainerColumnSettingsComponent_div_15_Template_input_input_8_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.searchControls($event.target.value));
    });
    \u0275\u0275elementEnd()()();
  }
}
function ContainerColumnSettingsComponent_mat_tab_group_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-tab-group", 25);
    \u0275\u0275listener("selectedTabChange", function ContainerColumnSettingsComponent_mat_tab_group_16_Template_mat_tab_group_selectedTabChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.selectedTab($event));
    });
    \u0275\u0275elementStart(1, "mat-tab", 26);
    \u0275\u0275element(2, "app-dmocontrols", 27);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "mat-tab", 28);
    \u0275\u0275element(4, "app-dmog-shared-dmo", 29);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("sideNavModel", ctx_r1.sideNavModel)("Searchtrem", ctx_r1.Searchtrem)("hideDropAbleRow", ctx_r1.hideDropAbleRow);
    \u0275\u0275advance(2);
    \u0275\u0275property("draggingStatus", ctx_r1.DraggingStatus)("sideNavModel", ctx_r1.sideNavModel)("Searchtrem", ctx_r1.Searchtrem);
  }
}
function ContainerColumnSettingsComponent_hr_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "hr", 17);
  }
}
function ContainerColumnSettingsComponent_div_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 30);
    \u0275\u0275text(1, "Drag Items");
    \u0275\u0275elementEnd();
  }
}
function ContainerColumnSettingsComponent_div_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 31);
    \u0275\u0275listener("dragstart", function ContainerColumnSettingsComponent_div_20_Template_div_dragstart_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dragRow($event));
    })("dragover", function ContainerColumnSettingsComponent_div_20_Template_div_dragover_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onDragOver($event));
    });
    \u0275\u0275elementStart(1, "div", 32)(2, "div", 33);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 22);
    \u0275\u0275element(4, "path", 34);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(5, "span", 35);
    \u0275\u0275text(6, "Inner Row");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "div", 36)(8, "div", 37);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(9, "svg", 38);
    \u0275\u0275element(10, "path", 39)(11, "path", 40)(12, "path", 41)(13, "path", 42)(14, "path", 43)(15, "path", 44);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate("id", ctx_r1.rowdmogId);
    \u0275\u0275attribute("data.rowsId-drag", ctx_r1.rowdmogId);
  }
}
var ContainerColumnSettingsComponent = class _ContainerColumnSettingsComponent {
  constructor(apiService, dataProvider, renderer, toster) {
    this.apiService = apiService;
    this.dataProvider = dataProvider;
    this.renderer = renderer;
    this.toster = toster;
    this.hideDmoAndSharedDmo = false;
    this.hideDropAbleRow = false;
    this.width = 0;
    this.colwidth = 0;
  }
  formatLabel(value) {
    return `${value} width`;
  }
  ngOnInit() {
    if (this.sideNavModel) {
      if (this.sideNavModel.type == "Column") {
        this.panelMainContainer = this.sideNavModel.data;
        this.width = this.panelMainContainer.width;
        this.rowdmogId = this.sideNavModel.dmog.DMOGID;
        this.colwidth = this.getSelectedColumnWith();
      }
    }
  }
  ngOnChanges() {
    if (this.sideNavModel) {
      if (this.sideNavModel.type == "Column") {
        this.panelMainContainer = this.sideNavModel.data;
        this.width = this.panelMainContainer.width;
        this.rowdmogId = this.sideNavModel.dmog.DMOGID;
        this.colwidth = this.getSelectedColumnWith();
        this.hideDmoAndSharedDmo = this.EnableControlsDmog(this.panelMainContainer);
        this.hideDropAbleRow = this.hideRow(this.panelMainContainer);
      }
    }
  }
  getSelectedColumnWith() {
    if (this.sideNavModel.type == "Column") {
      let selectedRow = this.sideNavModel.data.r;
      let colIndex = this.sideNavModel.data.colIndex;
      for (let index = 0; index < selectedRow.columns.length; index++) {
        const element = selectedRow.columns[index];
        if (index == colIndex) {
          return Math.floor(element.width);
          break;
        }
      }
    }
    return 0;
  }
  EnableControlsDmog(item) {
    try {
      let tpanelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      let rowIndex = item.rowIndex;
      let colIndex = item.colIndex;
      let currentRoWithCol = tpanelMainContainer.rows.filter((a) => a.rowIndex == rowIndex);
      if (currentRoWithCol.length > 0) {
        let excolumn = currentRoWithCol[0].columns[colIndex];
        if (excolumn) {
          let existingColumn = excolumn.rows;
          let exColLength = existingColumn.length;
          if (exColLength > 0) {
            return true;
          }
        }
      }
    } catch (error) {
      return false;
    }
    return false;
  }
  hideRow(item) {
    try {
      let tpanelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      let rowIndex = item.rowIndex;
      let colIndex = item.colIndex;
      let currentRoWithCol = tpanelMainContainer.rows.filter((a) => a.rowIndex == rowIndex);
      if (currentRoWithCol.length > 0) {
        let excolumn = currentRoWithCol[0].columns[colIndex];
        if (excolumn) {
          if (excolumn.dmoguid != null && excolumn.dmoguid.length > 0) {
            return true;
          }
        }
      }
    } catch (error) {
      return false;
    }
    return false;
  }
  onDragOver(event) {
    event.preventDefault();
  }
  dragRow(event) {
    var model = { "selectedItem": this.sideNavModel.data, "DMOGID": this.sideNavModel.dmog.DMOGID };
    event.dataTransfer.setData("ColumnDmogRows", JSON.stringify(model));
  }
  changeWidth(event) {
    this.width = event.value;
  }
  SaveWidthWidth(event) {
    if (this.sideNavModel && this.sideNavModel.type == "Column") {
      let currentwidth = this.sideNavModel.data.c.width;
      let cuurentRowIndex = this.sideNavModel.data.r.rowIndex;
      let currentColIndex = this.sideNavModel.data.c.colIndex;
      this.resizeColumn();
      var model = {};
      model = {
        "DMOGID": this.sideNavModel.dmog.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
      const url = `wfapibm/DataModel/SaveDmogProps`;
      this.apiService.postgateway("", url, model).subscribe((r) => {
        this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
        this.updateDataValue();
        this.dataProvider.setUpdatedColumnData(model);
        setTimeout(() => {
          this.dataProvider.setOpenSidebarNav(this.sideNavModel);
        }, 20);
      }, (error) => {
        console.log(error);
      });
    }
  }
  updateDataValue() {
    if (this.sideNavModel.type == "Column") {
      let selectedRow = this.sideNavModel.data.r;
      let colIndex = this.sideNavModel.data.colIndex;
      for (let index = 0; index < selectedRow.columns.length; index++) {
        const element = selectedRow.columns[index];
        if (index == colIndex) {
          element.width = this.colwidth;
        }
      }
    }
  }
  resizeColumn() {
    if (this.sideNavModel.type == "Column") {
      this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      let cuurentRowIndex = this.sideNavModel.data.r.rowIndex;
      let filteredColumn = this.panelMainContainer.rows.filter((a) => a.rowIndex == cuurentRowIndex)[0].columns;
      if (filteredColumn.length > 0) {
        let colIndex = this.sideNavModel.data.colIndex;
        let totalMWWidth = 0;
        let nonMWCount = 0;
        let previouseWidth = 0;
        for (let index = 0; index < filteredColumn.length; index++) {
          const element = filteredColumn[index];
          if (index == colIndex) {
            previouseWidth = filteredColumn[index].width || 0;
            filteredColumn[index].mw = true;
            filteredColumn[index].width = Math.floor(this.colwidth);
          }
          if (filteredColumn[index].mw) {
            totalMWWidth += filteredColumn[index].width || 0;
          } else {
            nonMWCount++;
          }
        }
        if (totalMWWidth > 100.5) {
          this.toster.warning("Width exceeds from 100%. Resizing is not allowed");
          filteredColumn[colIndex].width = previouseWidth;
          return;
        }
        let remainingWidth = 99.5 - totalMWWidth;
        let distrinutedWidth = nonMWCount > 0 ? remainingWidth / nonMWCount : 0;
        for (let index = 0; index < filteredColumn.length; index++) {
          let col = filteredColumn[index];
          if (!col.mw || col.width < 5) {
            col.width = Math.max(distrinutedWidth, 5);
          }
        }
      }
    }
  }
  selectedTab($event) {
    if (this.dmogSharedDmo && $event.index == 1)
      this.dmogSharedDmo.reload();
    this.onTabChange($event);
  }
  SetDefultTabsettings() {
    const tabIndex = 0;
    const inkBarElement = document.querySelector(".mat-ink-bar");
    if (inkBarElement && tabIndex == 0) {
      this.renderer.setStyle(inkBarElement, "left", `0px`);
    }
  }
  onTabChange(event) {
    const tabIndex = event.index;
    const inkBarElement = document.querySelector(".mat-ink-bar");
    if (inkBarElement) {
      const left = tabIndex === 0 ? "0px" : "152px";
      this.renderer.setStyle(inkBarElement, "left", left);
    }
  }
  searchControls(key) {
    this.Searchtrem = key;
  }
  static {
    this.\u0275fac = function ContainerColumnSettingsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ContainerColumnSettingsComponent)(\u0275\u0275directiveInject(ApiService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ContainerColumnSettingsComponent, selectors: [["app-container-column-settings"]], viewQuery: function ContainerColumnSettingsComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(DmogSharedDmoComponent, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.dmogSharedDmo = _t.first);
      }
    }, inputs: { sideNavModel: "sideNavModel", selectedItems: "selectedItems", DraggingStatus: "DraggingStatus" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 22, vars: 9, consts: [[1, "container"], [1, "column-settings-header"], ["for", "settingsInput", 1, "main-heading"], [1, "continer-header"], [1, "continer-heading"], [1, "continer-Name"], [1, "settings-range"], [1, "range-box"], ["type", "range", "min", "0", "max", "100", "step", "1", "displayWith", "formatLabel", 1, "range-line", 3, "input", "change", "ngModelChange", "ngModel"], [1, "range-counter"], ["min", "0", "max", "100", 1, "input", 3, "change", "ngModelChange", "ngModel"], [4, "ngIf"], ["class", "custom-tab-dmo-group", 3, "selectedTabChange", 4, "ngIf"], ["class", "break-line", 4, "ngIf"], [1, "over"], ["class", "main-heading", 4, "ngIf"], ["class", "rows-container", "draggable", "true", 3, "id", "dragstart", "dragover", 4, "ngIf"], [1, "break-line"], [1, "break-line-section"], ["for", "dataModelInput", 1, "main-heading"], [1, "searching-main-box"], [1, "search-icon"], ["xmlns", "http://www.w3.org/2000/svg", "width", "22", "height", "22", "viewBox", "0 0 22 22", "fill", "none"], ["d", "M14.2083 12.8333H13.4842L13.2275 12.5858C14.1258 11.5408 14.6667 10.1842 14.6667 8.70833C14.6667 5.4175 11.9992 2.75 8.70833 2.75C5.4175 2.75 2.75 5.4175 2.75 8.70833C2.75 11.9992 5.4175 14.6667 8.70833 14.6667C10.1842 14.6667 11.5408 14.1258 12.5858 13.2275L12.8333 13.4842V14.2083L17.4167 18.7825L18.7825 17.4167L14.2083 12.8333ZM8.70833 12.8333C6.42583 12.8333 4.58333 10.9908 4.58333 8.70833C4.58333 6.42583 6.42583 4.58333 8.70833 4.58333C10.9908 4.58333 12.8333 6.42583 12.8333 8.70833C12.8333 10.9908 10.9908 12.8333 8.70833 12.8333Z", "fill", "#333333"], ["type", "text", "placeholder", "Search", 1, "form-control", "mb-2", "Search-Dmo", 2, "font-size", "14px", 3, "input"], [1, "custom-tab-dmo-group", 3, "selectedTabChange"], ["label", "New DMOs"], [3, "sideNavModel", "Searchtrem", "hideDropAbleRow"], ["label", "Share DMOs"], [3, "draggingStatus", "sideNavModel", "Searchtrem"], [1, "main-heading"], ["draggable", "true", 1, "rows-container", 3, "dragstart", "dragover", "id"], [1, "rows-content"], [1, "icons-main"], ["d", "M19.5312 0.0625H2.34375C1.0498 0.0625 0 1.1123 0 2.40625V19.5938C0 20.8877 1.0498 21.9375 2.34375 21.9375H19.5312C20.8252 21.9375 21.875 20.8877 21.875 19.5938V2.40625C21.875 1.1123 20.8252 0.0625 19.5312 0.0625ZM4.49219 12.9531C4.16992 12.9531 3.90625 12.6895 3.90625 12.3672V9.63281C3.90625 9.31055 4.16992 9.04688 4.49219 9.04688H17.3828C17.7051 9.04688 17.9688 9.31055 17.9688 9.63281V12.3672C17.9688 12.6895 17.7051 12.9531 17.3828 12.9531H4.49219Z", "fill", "black"], [1, "texts"], [1, "menus-box"], [1, "menus-main"], ["width", "10", "height", "24", "viewBox", "0 0 12 20", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M2 3C2.55228 3 3 2.55228 3 2C3 1.44772 2.55228 1 2 1C1.44772 1 1 1.44772 1 2C1 2.55228 1.44772 3 2 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 3C10.5523 3 11 2.55228 11 2C11 1.44772 10.5523 1 10 1C9.44772 1 9 1.44772 9 2C9 2.55228 9.44772 3 10 3Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 11C2.55228 11 3 10.5523 3 10C3 9.44772 2.55228 9 2 9C1.44772 9 1 9.44772 1 10C1 10.5523 1.44772 11 2 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 11C10.5523 11 11 10.5523 11 10C11 9.44772 10.5523 9 10 9C9.44772 9 9 9.44772 9 10C9 10.5523 9.44772 11 10 11Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M2 19C2.55228 19 3 18.5523 3 18C3 17.4477 2.55228 17 2 17C1.44772 17 1 17.4477 1 18C1 18.5523 1.44772 19 2 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["d", "M10 19C10.5523 19 11 18.5523 11 18C11 17.4477 10.5523 17 10 17C9.44772 17 9 17.4477 9 18C9 18.5523 9.44772 19 10 19Z", "stroke", "black", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"]], template: function ContainerColumnSettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275text(2, "Column Settings");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "div")(4, "label", 2);
        \u0275\u0275text(5, "Settings");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "div", 3)(7, "div", 4);
        \u0275\u0275text(8, "Column Width (%)");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "div", 5)(10, "div", 6)(11, "div", 7)(12, "input", 8);
        \u0275\u0275listener("input", function ContainerColumnSettingsComponent_Template_input_input_12_listener($event) {
          return ctx.changeWidth($event);
        })("change", function ContainerColumnSettingsComponent_Template_input_change_12_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function ContainerColumnSettingsComponent_Template_input_ngModelChange_12_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.colwidth, $event) || (ctx.colwidth = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(13, "div", 9)(14, "input", 10);
        \u0275\u0275listener("change", function ContainerColumnSettingsComponent_Template_input_change_14_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function ContainerColumnSettingsComponent_Template_input_ngModelChange_14_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.colwidth, $event) || (ctx.colwidth = $event);
          return $event;
        });
        \u0275\u0275elementEnd()()()()()();
        \u0275\u0275template(15, ContainerColumnSettingsComponent_div_15_Template, 9, 0, "div", 11)(16, ContainerColumnSettingsComponent_mat_tab_group_16_Template, 5, 6, "mat-tab-group", 12)(17, ContainerColumnSettingsComponent_hr_17_Template, 1, 0, "hr", 13);
        \u0275\u0275elementStart(18, "div", 14);
        \u0275\u0275template(19, ContainerColumnSettingsComponent_div_19_Template, 2, 0, "div", 15)(20, ContainerColumnSettingsComponent_div_20_Template, 16, 2, "div", 16);
        \u0275\u0275element(21, "hr", 17);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275styleProp("top", ctx.transformy);
        \u0275\u0275advance(12);
        \u0275\u0275twoWayProperty("ngModel", ctx.colwidth);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.colwidth);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.hideDmoAndSharedDmo);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.hideDmoAndSharedDmo);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.hideDropAbleRow);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", !ctx.hideDropAbleRow);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.hideDropAbleRow);
      }
    }, dependencies: [ReactiveFormsModule, DefaultValueAccessor, RangeValueAccessor, NgControlStatus, FormsModule, NgModel, NgIf, MatTabGroup, MatTab, DMOControlsComponent, DmogSharedDmoComponent], styles: ['\n\n.slider-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.75fr 0.1fr;\n}\n.input[_ngcontent-%COMP%] {\n  width: 30px;\n  border-radius: 0.25rem;\n  font-size: 13px;\n  margin-top: 10px;\n}\n.container[_ngcontent-%COMP%] {\n  padding: 0px 0px 0px 0px !important;\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  background: var(--White, #FFF);\n  box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 0.1);\n  min-width: 100px !important;\n  min-height: 100px !important;\n  height: calc(100vh - 100px);\n  overflow-y: none;\n  width: 300px;\n  -webkit-user-select: none;\n  user-select: none;\n  color: #121621;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.column-settings-header[_ngcontent-%COMP%] {\n  height: 38px;\n  text-align: center;\n  background: #005996;\n  line-height: 2;\n  padding: 2px;\n  font-weight: 500;\n  color: var(--White, #FFF);\n  text-align: center;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  line-height: 40px;\n}\n.main-heading[_ngcontent-%COMP%] {\n  color: var(--Dark-Black, #000);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  margin-top: 15px;\n  padding: 0 15px;\n}\n.continer-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  gap: 0;\n  font-size: 14px;\n  margin-top: 0px;\n  font-family: "Roboto";\n  color: black;\n  padding: 10px;\n  align-items: center;\n}\n.break-line[_ngcontent-%COMP%] {\n  width: 287px;\n  height: 0px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n  margin-top: 0px;\n  margin-bottom: 0px;\n}\n.break-line-section[_ngcontent-%COMP%] {\n  width: 300px;\n  height: 0px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n  margin-top: 0px;\n  margin-bottom: 0px;\n}\n.continer-heading[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.continer-Name-bold[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n}\n.continer-Name[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.over[_ngcontent-%COMP%]::-webkit-scrollbar {\n  width: 6px;\n  align-self: stretch;\n}\n.over[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n.over[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.over[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: var(--denim-24-center-channel-text, rgba(63, 67, 80, 0.24));\n}\n.menus-main[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  padding: 7px;\n  border-left: 2px solid #e4d2d2;\n  background: #f5f5f5;\n  border-radius: 0px 5px 5px 0px;\n  justify-content: center;\n}\n.rows-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 260px;\n  height: 40px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin: 11px;\n  border-radius: 5px;\n  border: 1px solid var(--border-color, #CCC);\n  background: #FFF;\n}\n.rows-content[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  gap: 8px;\n}\n.icons-main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n.icons[_ngcontent-%COMP%] {\n  width: 33px;\n  height: 7px;\n  background-color: #d3d3d3;\n  border-radius: 2px;\n  margin-right: 8px;\n}\n.texts[_ngcontent-%COMP%] {\n  color: #333;\n  font-size: 14px;\n  font-weight: 400;\n}\n.menus[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n.menu-dots[_ngcontent-%COMP%] {\n  width: 6px;\n  height: 6px;\n  margin: 1px 0;\n}\n.menus-box[_ngcontent-%COMP%] {\n  width: 38px;\n  height: 38px;\n  right: 1px;\n  top: 1px;\n  border-radius: 0px 5px 5px 0px;\n  background: rgba(204, 204, 204, 0.2);\n}\n.range-box[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n}\n.settings-range[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 10px;\n}\n.range-line[_ngcontent-%COMP%] {\n  width: 78px;\n  height: 10px;\n}\n.range-counter[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  display: flex;\n  width: 37px;\n  height: 30px;\n  padding: 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n}\ninput[type=range][_ngcontent-%COMP%] {\n  accent-color: #4A5CB3;\n}\n.Search-Dmo[_ngcontent-%COMP%] {\n  width: 260px;\n  height: 40px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: var(--Shades-White, #FFF);\n  padding-left: 40px;\n  text-indent: 5px;\n}\n.Search-Dmo[_ngcontent-%COMP%]::placeholder {\n  color: #333;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  left: 20px;\n}\n.searching-main-box[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  margin: 13px !important;\n}\n.search-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 41%;\n  left: 10px;\n  transform: translateY(-50%);\n}\n[_nghost-%COMP%]     .custom-tab-dmo-group .mat-tab-label-content, \n[_nghost-%COMP%]     .custom-tab-dmo-group .mdc-tab__text-label, \n[_nghost-%COMP%]     .custom-tab-dmo-group .mdc-tab__content {\n  font-size: 16px;\n}\n/*# sourceMappingURL=container-column-settings.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ContainerColumnSettingsComponent, { className: "ContainerColumnSettingsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\container-column-settings\\container-column-settings.component.ts", lineNumber: 22 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/dmog-sub-row-settings/dmog-sub-row-settings.component.ts
var DmogSubRowSettingsComponent = class _DmogSubRowSettingsComponent {
  constructor(apiService, dataProvider, toster) {
    this.apiService = apiService;
    this.dataProvider = dataProvider;
    this.toster = toster;
    this.column = 0;
    this.Existingcolumn = 0;
  }
  formatLabel(value) {
    return `${value} column`;
  }
  ngOnInit() {
    if (this.sideNavModel) {
      console.log(this.sideNavModel);
      if (this.sideNavModel.type == "NestedcolumnRow") {
        var data = this.sideNavModel.data;
        let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
        this.getExistingColumn(item);
      }
    }
  }
  ngOnChanges() {
    if (this.sideNavModel) {
      if (this.sideNavModel.type == "NestedcolumnRow") {
        var data = this.sideNavModel.data;
        let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
        this.getExistingColumn(item);
        this.rowdmogId = this.sideNavModel.dmog.DMOGID;
      }
    }
  }
  getExistingColumn(item) {
    this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
    if (this.panelMainContainer) {
      let rowIndex = item.rowIndex;
      let colIndex = item.colIndex;
      let currentRoWithCol = this.panelMainContainer.rows.filter((a) => a.rowIndex == rowIndex);
      if (currentRoWithCol.length > 0) {
        let column = currentRoWithCol[0].columns[colIndex];
        if (column) {
          let rColumn = column.rows[item.ColumnRowIndex];
          if (rColumn) {
            this.column = rColumn.columns.length;
            this.Existingcolumn = rColumn.columns.length;
          }
        }
      }
    }
  }
  onAddRowChildColumn() {
    var data = this.sideNavModel.data;
    let item = { "rowIndex": data.rowIndex, "colIndex": data.colIndex, "ColumnRowIndex": data.colRowIndex };
    this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
    if (this.panelMainContainer) {
      let rowIndex = item.rowIndex;
      let colIndex = item.colIndex;
      let currentRoWithCol = this.panelMainContainer.rows.filter((a) => a.rowIndex == rowIndex);
      if (currentRoWithCol.length > 0) {
        let excolumn = currentRoWithCol[0].columns[colIndex];
        if (excolumn) {
          let existingColumn = excolumn.rows[item.ColumnRowIndex];
          let exColLength = existingColumn.columns.length;
          for (let index = exColLength + 1; index <= this.column; index++) {
            existingColumn.columns.push({ "index": index, "width": 100, "dmoguid": [] });
          }
          this.resetColumnWidthForRowInColumn(excolumn.rows);
        }
      }
    }
  }
  resetColumnWidthForRowInColumn(currentRoWithCol) {
    for (let r of currentRoWithCol) {
      let column = r.columns;
      let perClmwidth = 100 / r.columns.length;
      let index = 0;
      for (let c of column) {
        c.width = perClmwidth;
        c.index = index;
        index++;
      }
    }
  }
  onDragOver(event) {
    event.preventDefault();
  }
  changeWidth(event) {
    this.column = event.value;
  }
  SaveWidthWidth1(event) {
    if (this.column > 12)
      this.column = 12;
    else if (this.column < 0) {
      this.column = this.Existingcolumn;
    }
    this.onAddRowChildColumn();
    var model = {};
    model = {
      "DMOGID": this.sideNavModel.dmog.DMOGID,
      "DMOGProps": JSON.stringify(this.panelMainContainer)
    };
    const url = `wfapibm/DataModel/SaveDmogProps`;
    this.apiService.postgateway("", url, model, false).subscribe((r) => {
      this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
      this.dataProvider.setUpdateDmogSettings(model);
    }, (error) => {
      console.log(error);
    });
  }
  SaveWidthWidth(event) {
    if (this.column > 12) {
      this.column = 12;
    } else if (this.column < 0) {
      this.column = this.Existingcolumn;
    }
    this.onAddRowChildColumn1();
    let model = {
      "DMOGID": this.sideNavModel.dmog.DMOGID,
      "DMOGProps": JSON.stringify(this.panelMainContainer)
    };
    const url = `wfapibm/DataModel/SaveDmogProps`;
    this.apiService.postgateway("", url, model, false).subscribe((response) => {
      this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
      this.dataProvider.setUpdateDmogSettings(model);
    }, (error) => console.error("Error updating DMOG Props:", error));
  }
  onAddRowChildColumn11() {
    let data = this.sideNavModel.data;
    let item = {
      "rowIndex": data.rowIndex,
      "colIndex": data.colIndex,
      "ColumnRowIndex": data.colRowIndex
    };
    this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRow = this.panelMainContainer.rows.find((a) => a.rowIndex === rowIndex);
    if (!currentRow)
      return;
    let existingColumn = currentRow.columns[colIndex];
    if (!existingColumn)
      return;
    let columnRow = existingColumn.rows[item.ColumnRowIndex];
    if (!columnRow)
      return;
    let existingColumns = columnRow.columns.length;
    let hasData = columnRow.columns.some((col) => col.dmoguid.length > 0);
    if (hasData) {
      this.toster.warning("Cannot change inner column: Data exists in one or more columns.");
      this.Existingcolumn = this.Existingcolumn;
      return;
    }
    if (this.column < existingColumns) {
      for (let index = existingColumns - 1; index >= this.column; index--) {
        columnRow.columns.splice(index, 1);
      }
    } else {
      for (let index = existingColumns; index < this.column; index++) {
        columnRow.columns.push({ "index": index, "width": 100, "dmoguid": [] });
      }
    }
    this.resetColumnWidthForRowInColumn(existingColumn.rows);
  }
  onAddRowChildColumn1() {
    let data = this.sideNavModel.data;
    let item = {
      "rowIndex": data.rowIndex,
      "colIndex": data.colIndex,
      "ColumnRowIndex": data.colRowIndex
    };
    this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
    let rowIndex = item.rowIndex;
    let colIndex = item.colIndex;
    let currentRow = this.panelMainContainer.rows.find((a) => a.rowIndex === rowIndex);
    if (!currentRow)
      return;
    let existingColumn = currentRow.columns[colIndex];
    if (!existingColumn)
      return;
    let columnRow = existingColumn.rows[item.ColumnRowIndex];
    if (!columnRow)
      return;
    if (this.column < columnRow.columns.length) {
      if (!this.canReduceSubColumns(columnRow.columns, this.column)) {
        this.toster.warning("Cannot reduce columns - would remove columns containing data");
        return;
      }
    }
    this.adjustSubColumns(columnRow, this.column);
    this.resetColumnWidthForRowInColumn(existingColumn.rows);
  }
  canReduceSubColumns(columns, newCount) {
    if (!columns)
      return false;
    const columnsWithData = columns.filter((col) => col.dmoguid && col.dmoguid.length > 0).length;
    return newCount >= columnsWithData;
  }
  adjustSubColumns(columnRow, newCount) {
    const existingColumns = [...columnRow.columns];
    if (newCount > existingColumns.length) {
      for (let i = existingColumns.length; i < newCount; i++) {
        existingColumns.push({
          index: i,
          width: 100,
          dmoguid: []
        });
      }
    } else if (newCount < existingColumns.length) {
      const emptyColumns = existingColumns.map((col, index) => ({ col, index })).filter((item) => !item.col.dmoguid || item.col.dmoguid.length === 0);
      const columnsToRemove = existingColumns.length - newCount;
      const removableColumns = emptyColumns.slice(0, columnsToRemove);
      removableColumns.sort((a, b) => b.index - a.index).forEach((item) => existingColumns.splice(item.index, 1));
      existingColumns.forEach((col, index) => col.index = index);
    }
    columnRow.columns = existingColumns;
  }
  static {
    this.\u0275fac = function DmogSubRowSettingsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmogSubRowSettingsComponent)(\u0275\u0275directiveInject(ApiService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmogSubRowSettingsComponent, selectors: [["app-dmog-sub-row-settings"]], inputs: { sideNavModel: "sideNavModel" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 20, vars: 6, consts: [[1, "container"], [1, "sub-row-settings-header"], [1, "main-heading"], [1, "continer-header"], [1, "continer-heading"], [1, "continer-Name-bold"], [1, "continer-Name"], [1, "settings-range"], [1, "range-box"], ["type", "range", "max", "12", "step", "1", "displayWith", "formatLabel", 1, "range-line", 3, "input", "change", "ngModelChange", "min", "ngModel"], [1, "range-counter"], ["min", "Existingcolumn", "max", "12", 1, "input", 3, "change", "ngModelChange", "ngModel"], [1, "break-line"]], template: function DmogSubRowSettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275text(2, "Inner Row Setting");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "label", 2);
        \u0275\u0275text(4, "Settings");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 3)(6, "div", 4);
        \u0275\u0275text(7, "Container Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 5);
        \u0275\u0275text(9);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(10, "div", 3)(11, "div", 4);
        \u0275\u0275text(12, "Columns");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(13, "div", 6)(14, "div", 7)(15, "div", 8)(16, "input", 9);
        \u0275\u0275listener("input", function DmogSubRowSettingsComponent_Template_input_input_16_listener($event) {
          return ctx.changeWidth($event);
        })("change", function DmogSubRowSettingsComponent_Template_input_change_16_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function DmogSubRowSettingsComponent_Template_input_ngModelChange_16_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.column, $event) || (ctx.column = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "div", 10)(18, "input", 11);
        \u0275\u0275listener("change", function DmogSubRowSettingsComponent_Template_input_change_18_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function DmogSubRowSettingsComponent_Template_input_ngModelChange_18_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.column, $event) || (ctx.column = $event);
          return $event;
        });
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275element(19, "hr", 12);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275styleProp("top", ctx.transformy);
        \u0275\u0275advance(9);
        \u0275\u0275textInterpolate(ctx.sideNavModel.dmog.DisplayName);
        \u0275\u0275advance(7);
        \u0275\u0275propertyInterpolate("min", ctx.Existingcolumn);
        \u0275\u0275twoWayProperty("ngModel", ctx.column);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.column);
      }
    }, dependencies: [ReactiveFormsModule, DefaultValueAccessor, RangeValueAccessor, NgControlStatus, FormsModule, NgModel], styles: ['\n\n.slider-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.75fr 0.1fr;\n}\n.input[_ngcontent-%COMP%] {\n  width: 30px;\n  border-radius: 0.25rem;\n  font-size: 13px;\n  margin-top: 10px;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.sub-row-settings-header[_ngcontent-%COMP%] {\n  width: 294px;\n  height: 38px;\n  text-align: center;\n  background: #005996;\n  line-height: 2;\n  padding: 2px;\n  font-size: 16px;\n  font-weight: 500;\n  color: var(--White, #FFF);\n  text-align: center;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 40px;\n}\n.container[_ngcontent-%COMP%] {\n  padding: 0px 0px 0px 0px !important;\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  background: var(--White, #FFF);\n  box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 0.1);\n  min-width: 100px !important;\n  min-height: 100px !important;\n  height: calc(100vh - 100px);\n  overflow-y: none;\n  color: #121621;\n  -webkit-user-select: none;\n  user-select: none;\n}\n.main-heading[_ngcontent-%COMP%] {\n  color: var(--Dark-Black, #000);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  margin-top: 15px;\n  padding: 0 15px;\n}\n.continer-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  gap: 0;\n  font-size: 14px;\n  margin-top: 5px;\n  font-family: "Roboto";\n  color: black;\n  padding: 10px;\n}\n.continer-heading[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.continer-Name-bold[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n}\n.continer-Name[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.continer-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  gap: 0;\n  font-size: 14px;\n  margin-top: 5px;\n  font-family: "Roboto";\n  color: black;\n  padding: 10px;\n}\n.break-line[_ngcontent-%COMP%] {\n  width: 287px;\n  height: 0px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n}\n.continer-Name[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.range-box[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n}\n.settings-range[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 10px;\n}\n.range-line[_ngcontent-%COMP%] {\n  width: 78px;\n  height: 10px;\n}\n.range-counter[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  display: flex;\n  width: 37px;\n  height: 30px;\n  padding: 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n}\ninput[type=range][_ngcontent-%COMP%] {\n  accent-color: #4A5CB3;\n}\n/*# sourceMappingURL=dmog-sub-row-settings.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmogSubRowSettingsComponent, { className: "DmogSubRowSettingsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\dmog-sub-row-settings\\dmog-sub-row-settings.component.ts", lineNumber: 18 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/dmog-sub-column-settings/dmog-sub-column-settings.component.ts
var DmogSubColumnSettingsComponent = class _DmogSubColumnSettingsComponent {
  constructor(apiService, dataProvider, renderer, toster) {
    this.apiService = apiService;
    this.dataProvider = dataProvider;
    this.renderer = renderer;
    this.toster = toster;
    this.width = 0;
    this.hideDmoAndSharedDmo = true;
    this.colwidth = 0;
  }
  formatLabel(value) {
    return `${value} width`;
  }
  ngOnInit() {
    if (this.sideNavModel) {
      this.panelMainContainer = this.sideNavModel.data;
      this.width = this.panelMainContainer.width;
      this.rowdmogId = this.sideNavModel.dmog.DMOGID;
      this.colwidth = this.getSelectedColumnWith();
    }
  }
  ngOnChanges() {
    if (this.sideNavModel) {
      console.log(this.sideNavModel);
      if (this.sideNavModel.type == "columnRow") {
        this.panelMainContainer = this.sideNavModel.data;
        this.colwidth = this.getSelectedColumnWith();
      }
    }
  }
  ngAfterViewInit() {
    setTimeout(() => {
      this.SetDefultTabsettings();
    }, 300);
  }
  getSelectedColumnWith() {
    if (this.sideNavModel.type == "columnRow") {
      let selectedRow = this.sideNavModel.data.r;
      let rowColIndex = this.sideNavModel.data.colRowcolumnIndex;
      for (let index = 0; index < selectedRow.columns.length; index++) {
        const column = selectedRow.columns[index];
        if (column.rows.length) {
          for (let rc = 0; rc < column.rows.length; rc++) {
            let innerRow = column.rows[rc];
            if (innerRow.columns.length) {
              let InnerColumn = innerRow.columns[rowColIndex];
              if (InnerColumn && rowColIndex == InnerColumn.index) {
                return Math.floor(InnerColumn.width);
                break;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  onDragOver(event) {
    event.preventDefault();
  }
  dragRow(event) {
    var model = { "selectedItem": this.sideNavModel.data, "DMOGID": this.sideNavModel.dmog.DMOGID };
    event.dataTransfer.setData("SubColumnDmo", JSON.stringify(model));
  }
  changeWidth(event) {
    this.width = event.value;
  }
  SaveWidthWidth(event) {
    if (this.sideNavModel && this.sideNavModel.type == "columnRow") {
      this.resizeInnerColumn();
      var model = {};
      model = {
        "DMOGID": this.sideNavModel.dmog.DMOGID,
        "DMOGProps": JSON.stringify(this.panelMainContainer)
      };
      const url = `wfapibm/DataModel/SaveDmogProps`;
      this.apiService.postgateway("", url, model).subscribe((r) => {
        this.sideNavModel.dmog.DMOGProps = JSON.stringify(this.panelMainContainer);
        this.updateDataValue();
        this.dataProvider.setUpdatedColumnData(model);
        setTimeout(() => {
          this.dataProvider.setOpenSidebarNav(this.sideNavModel);
        }, 20);
      }, (error) => {
        console.log(error);
      });
    }
  }
  updateDataValue() {
    if (this.sideNavModel.type == "columnRow") {
      let selectedRow = this.sideNavModel.data.r;
      let rowColIndex = this.sideNavModel.data.colRowcolumnIndex;
      for (let index = 0; index < selectedRow.columns.length; index++) {
        const column = selectedRow.columns[index];
        if (column.rows.length) {
          for (let rc = 0; rc < column.rows.length; rc++) {
            let innerRow = column.rows[rc];
            if (innerRow.columns.length) {
              let InnerColumn = innerRow.columns[rowColIndex];
              if (rowColIndex == InnerColumn.index) {
                InnerColumn.width = this.colwidth;
              }
            }
          }
        }
      }
    }
  }
  resizeInnerColumn() {
    if (this.sideNavModel.type === "columnRow") {
      this.panelMainContainer = JSON.parse(this.sideNavModel.dmog.DMOGProps);
      let currentRowIndex = this.sideNavModel.data.r.rowIndex;
      let currentColIndex = this.sideNavModel.data.c.colIndex;
      let currentChildRowIndex = this.sideNavModel.data.colRowIndex;
      let currentChildColIndex = this.sideNavModel.data.colRowcolumnIndex;
      let filteredColumn = this.panelMainContainer.rows.filter((a) => a.rowIndex === currentRowIndex)[0]?.columns;
      let filteredChildColumn = filteredColumn.filter((a) => a.colIndex === currentColIndex)[0]?.rows;
      if (filteredChildColumn && filteredChildColumn.length > 0) {
        let selectedColumn = filteredChildColumn[currentChildRowIndex]?.columns[currentChildColIndex];
        if (selectedColumn) {
          let totalMWWidth = 0;
          let nonMWCount = 0;
          let previousWidth = 0;
          previousWidth = selectedColumn.width || 0;
          selectedColumn.mw = true;
          selectedColumn.width = Math.floor(this.colwidth);
          filteredChildColumn[currentChildRowIndex].columns.forEach((col) => {
            if (col.width) {
              totalMWWidth += col.width || 0;
            } else {
              nonMWCount++;
            }
          });
          if (totalMWWidth > 100) {
            this.toster.warning("Width exceeds 100%. Resizing is not allowed");
            selectedColumn.width = previousWidth;
            return;
          }
          let remainingWidth = 99.5 - totalMWWidth;
          if (remainingWidth > 0) {
            let distributedWidth = nonMWCount > 0 ? remainingWidth / nonMWCount : remainingWidth;
            filteredChildColumn[currentChildRowIndex].columns.forEach((col) => {
              if (!col.mw || col.width < 5) {
                col.width = Math.max(distributedWidth, 5);
              }
            });
          }
        }
      }
    }
  }
  selectedTab($event) {
    if (this.dmogSharedDmo && $event.index == 1)
      this.dmogSharedDmo.reload();
    this.onTabChange($event);
  }
  SetDefultTabsettings() {
    const tabIndex = 0;
    const inkBarElement = document.querySelector(".mat-ink-bar");
    if (inkBarElement && tabIndex == 0) {
      this.renderer.setStyle(inkBarElement, "left", `0px`);
    }
  }
  onTabChange(event) {
    const tabIndex = event.index;
    const inkBarElement = document.querySelector(".mat-ink-bar");
    if (inkBarElement && tabIndex == 0) {
      this.renderer.setStyle(inkBarElement, "left", `0px`);
    } else {
      this.renderer.setStyle(inkBarElement, "left", `152px`);
    }
  }
  searchControls(key) {
    this.Searchtrem = key;
  }
  static {
    this.\u0275fac = function DmogSubColumnSettingsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DmogSubColumnSettingsComponent)(\u0275\u0275directiveInject(ApiService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DmogSubColumnSettingsComponent, selectors: [["app-dmog-sub-column-settings"]], viewQuery: function DmogSubColumnSettingsComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(DmogSharedDmoComponent, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.dmogSharedDmo = _t.first);
      }
    }, inputs: { sideNavModel: "sideNavModel", draggingStatus: "draggingStatus" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 29, vars: 10, consts: [[1, "container"], [1, "tab-header"], [1, "main-heading"], [1, "continer-header"], [1, "continer-heading"], [1, "continer-Name"], [1, "settings-range"], [1, "range-box"], ["type", "range", "min", "0", "max", "100", "step", "1", "displayWith", "formatLabel", 1, "range-line", 3, "input", "change", "ngModelChange", "ngModel"], [1, "range-counter"], ["min", "0", "max", "100", 1, "input", 3, "change", "ngModelChange", "ngModel"], [1, "break-line-section"], [1, "searching-main-box"], [1, "search-icon"], ["xmlns", "http://www.w3.org/2000/svg", "width", "22", "height", "22", "viewBox", "0 0 22 22", "fill", "none"], ["d", "M14.2083 12.8333H13.4842L13.2275 12.5858C14.1258 11.5408 14.6667 10.1842 14.6667 8.70833C14.6667 5.4175 11.9992 2.75 8.70833 2.75C5.4175 2.75 2.75 5.4175 2.75 8.70833C2.75 11.9992 5.4175 14.6667 8.70833 14.6667C10.1842 14.6667 11.5408 14.1258 12.5858 13.2275L12.8333 13.4842V14.2083L17.4167 18.7825L18.7825 17.4167L14.2083 12.8333ZM8.70833 12.8333C6.42583 12.8333 4.58333 10.9908 4.58333 8.70833C4.58333 6.42583 6.42583 4.58333 8.70833 4.58333C10.9908 4.58333 12.8333 6.42583 12.8333 8.70833C12.8333 10.9908 10.9908 12.8333 8.70833 12.8333Z", "fill", "#333333"], ["type", "text", "placeholder", "Search", 1, "form-control", "mb-2", "Search-Dmo", 2, "font-size", "14px", 3, "input"], [1, ""], [1, "custom-tab-dmo-group", 3, "selectedTabChange"], ["label", "New DMOs"], [3, "sideNavModel", "hideDmoAndSharedDmo", "Searchtrem"], ["label", "Share DMOs"], [3, "draggingStatus", "sideNavModel", "Searchtrem"]], template: function DmogSubColumnSettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275text(2, "Inner Column Settings");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "div")(4, "label", 2);
        \u0275\u0275text(5, "Settings");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "div", 3)(7, "div", 4);
        \u0275\u0275text(8, "Inner Column Width (%)");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "div", 5)(10, "div", 6)(11, "div", 7)(12, "input", 8);
        \u0275\u0275listener("input", function DmogSubColumnSettingsComponent_Template_input_input_12_listener($event) {
          return ctx.changeWidth($event);
        })("change", function DmogSubColumnSettingsComponent_Template_input_change_12_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function DmogSubColumnSettingsComponent_Template_input_ngModelChange_12_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.colwidth, $event) || (ctx.colwidth = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(13, "div", 9)(14, "input", 10);
        \u0275\u0275listener("change", function DmogSubColumnSettingsComponent_Template_input_change_14_listener($event) {
          return ctx.SaveWidthWidth($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function DmogSubColumnSettingsComponent_Template_input_ngModelChange_14_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.colwidth, $event) || (ctx.colwidth = $event);
          return $event;
        });
        \u0275\u0275elementEnd()()()()()();
        \u0275\u0275element(15, "hr", 11);
        \u0275\u0275elementStart(16, "label", 2);
        \u0275\u0275text(17, "Data Model Objects");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "div", 12)(19, "span", 13);
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(20, "svg", 14);
        \u0275\u0275element(21, "path", 15);
        \u0275\u0275elementEnd()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(22, "input", 16);
        \u0275\u0275listener("input", function DmogSubColumnSettingsComponent_Template_input_input_22_listener($event) {
          return ctx.searchControls($event.target.value);
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(23, "div", 17)(24, "mat-tab-group", 18);
        \u0275\u0275listener("selectedTabChange", function DmogSubColumnSettingsComponent_Template_mat_tab_group_selectedTabChange_24_listener($event) {
          return ctx.selectedTab($event);
        });
        \u0275\u0275elementStart(25, "mat-tab", 19);
        \u0275\u0275element(26, "app-dmocontrols", 20);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(27, "mat-tab", 21);
        \u0275\u0275element(28, "app-dmog-shared-dmo", 22);
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275styleProp("top", ctx.transformy);
        \u0275\u0275advance(12);
        \u0275\u0275twoWayProperty("ngModel", ctx.colwidth);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.colwidth);
        \u0275\u0275advance(12);
        \u0275\u0275property("sideNavModel", ctx.sideNavModel)("hideDmoAndSharedDmo", ctx.hideDmoAndSharedDmo)("Searchtrem", ctx.Searchtrem);
        \u0275\u0275advance(2);
        \u0275\u0275property("draggingStatus", ctx.draggingStatus)("sideNavModel", ctx.sideNavModel)("Searchtrem", ctx.Searchtrem);
      }
    }, dependencies: [ReactiveFormsModule, DefaultValueAccessor, RangeValueAccessor, NgControlStatus, FormsModule, NgModel, MatTabGroup, MatTab, DMOControlsComponent, DmogSharedDmoComponent], styles: ['\n\nmat-slider[_ngcontent-%COMP%] {\n  width: 200px;\n}\n.slider-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.75fr 0.1fr;\n}\n.input[_ngcontent-%COMP%] {\n  width: 30px;\n  border-radius: 0.25rem;\n  font-size: 13px;\n  margin-top: 10px;\n}\n.container[_ngcontent-%COMP%] {\n  padding: 0px 0px 0px 0px !important;\n  position: relative;\n  display: flow-root;\n  align-items: center;\n  justify-content: center;\n  background: var(--White, #FFF);\n  box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 0.1);\n  min-width: 100px !important;\n  min-height: 100px !important;\n  height: calc(100vh - 100px);\n  overflow-y: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n.dragable-row[_ngcontent-%COMP%] {\n  background-color: #559000;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 13px;\n  width: 160px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.divier[_ngcontent-%COMP%] {\n  height: 5px;\n}\n.tab-header[_ngcontent-%COMP%] {\n  width: 294px;\n  height: 38px;\n  text-align: center;\n  background: #005996;\n  line-height: 2;\n  padding: 2px;\n  font-size: 16px;\n  font-weight: 500;\n  color: var(--White, #FFF);\n  text-align: center;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 40px;\n}\n.main-dmo-heading[_ngcontent-%COMP%] {\n  color: var(--Dark-Black, #000);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  margin-top: 12px;\n}\n  .mat-tab-labels {\n  display: flex !important;\n  justify-content: space-between;\n}\n.main-drag-side-menu[_ngcontent-%COMP%] {\n  overflow-y: auto;\n  overflow-x: hidden;\n  max-height: 470px;\n}\n.continer-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  gap: 0;\n  font-size: 14px;\n  margin-top: 5px;\n  font-family: "Roboto";\n  color: black;\n  padding: 10px;\n}\n.continer-heading[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 10px;\n}\n.continer-Name[_ngcontent-%COMP%] {\n  color: var(--crm-color-2, #212529);\n  font-family: "Roboto";\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n.main-heading[_ngcontent-%COMP%] {\n  color: var(--Dark-Black, #000);\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  margin-top: 15px;\n  padding: 0 15px;\n}\n.range-box[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n}\n.settings-range[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 10px;\n}\n.range-line[_ngcontent-%COMP%] {\n  width: 78px;\n  height: 10px;\n}\n.range-counter[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  display: flex;\n  width: 37px;\n  height: 30px;\n  padding: 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid var(--border-color, #CCC);\n  background: var(--White, #FFF);\n}\ninput[type=range][_ngcontent-%COMP%] {\n  accent-color: #4A5CB3;\n}\n.Search-Dmo[_ngcontent-%COMP%] {\n  width: 260px;\n  height: 40px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  border: 1px solid #BDBDBD;\n  background: var(--Shades-White, #FFF);\n  padding-left: 40px;\n  text-indent: 5px;\n}\n.Search-Dmo[_ngcontent-%COMP%]::placeholder {\n  color: #333;\n  font-family: "Roboto";\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  left: 20px;\n}\n.searching-main-box[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  margin: 13px !important;\n}\n.search-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 41%;\n  left: 10px;\n  transform: translateY(-50%);\n}\n.break-line-section[_ngcontent-%COMP%] {\n  width: 300px;\n  height: 0px;\n  flex-shrink: 0;\n  stroke-width: 1px;\n  stroke: var(--border-color, #CCC);\n  margin-top: 0px;\n  margin-bottom: 0px;\n}\n.menus-main[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  padding: 7px;\n  border-left: 2px solid #e4d2d2;\n  background: #f5f5f5;\n  border-radius: 0px 5px 5px 0px;\n  justify-content: center;\n}\n.rows-container[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 260px;\n  height: 40px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin: 11px;\n  border-radius: 5px;\n  border: 1px solid var(--border-color, #CCC);\n  background: #FFF;\n}\n.rows-content[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  gap: 8px;\n}\n.icons-main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n.icons[_ngcontent-%COMP%] {\n  width: 33px;\n  height: 7px;\n  background-color: #d3d3d3;\n  border-radius: 2px;\n  margin-right: 8px;\n}\n.texts[_ngcontent-%COMP%] {\n  color: #333;\n  font-size: 14px;\n  font-weight: 400;\n}\n.menus[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n.menu-dots[_ngcontent-%COMP%] {\n  width: 6px;\n  height: 6px;\n  margin: 1px 0;\n}\n.menus-box[_ngcontent-%COMP%] {\n  width: 38px;\n  height: 38px;\n  right: 1px;\n  top: 1px;\n  border-radius: 0px 5px 5px 0px;\n  background: rgba(204, 204, 204, 0.2);\n}\n/*# sourceMappingURL=dmog-sub-column-settings.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DmogSubColumnSettingsComponent, { className: "DmogSubColumnSettingsComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\dmog-sub-column-settings\\dmog-sub-column-settings.component.ts", lineNumber: 22 });
})();

// src/app/admin/data-modeler1/components1/dmog-new-design/left-side-panel/left-side-panel.component.ts
function LeftSidePanelComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "app-dmog-settings", 1);
    \u0275\u0275listener("reloadParent", function LeftSidePanelComponent_div_0_Template_app_dmog_settings_reloadParent_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.reloadParent());
    })("UpdatedDataEmitter", function LeftSidePanelComponent_div_0_Template_app_dmog_settings_UpdatedDataEmitter_1_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.updatedDataForParent($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("sideNavModel", ctx_r1.sideNavModel);
  }
}
function LeftSidePanelComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275element(1, "app-contier-parent-row-settings", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("sideNavModel", ctx_r1.sideNavModel);
  }
}
function LeftSidePanelComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275element(1, "app-container-column-settings", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("DraggingStatus", ctx_r1.DraggingStatus)("sideNavModel", ctx_r1.sideNavModel)("selectedItems", ctx_r1.selectedItems);
  }
}
function LeftSidePanelComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275element(1, "app-dmog-sub-row-settings", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("sideNavModel", ctx_r1.sideNavModel);
  }
}
function LeftSidePanelComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275element(1, "app-dmog-sub-column-settings", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("DraggingStatus", ctx_r1.DraggingStatus)("sideNavModel", ctx_r1.sideNavModel);
  }
}
var LeftSidePanelComponent = class _LeftSidePanelComponent {
  constructor() {
    this.drawerToggle = new EventEmitter();
    this.UpdatedDataForSidepanle = new EventEmitter();
    this.isDrawerOpen = false;
    this.expandedIndex = 0;
  }
  ngOnInit() {
  }
  ngOnChanges(changes) {
    if (this.selectedItemFromchild) {
      this.selectedItems = this.selectedItemFromchild;
    }
    if (changes.isDraggingStart && changes.isDraggingStart.previousValue != changes.isDraggingStart.currentValue) {
      this.DraggingStatus = this.isDraggingStart;
    }
  }
  onDrawerToggle() {
    this.isDrawerOpen = !this.isDrawerOpen;
    this.drawerToggle.emit();
  }
  updatedDataForParent(event) {
    if (event) {
      this.updatedData = event;
      this.UpdatedDataForSidepanle.emit(this.updatedData);
    }
  }
  static {
    this.\u0275fac = function LeftSidePanelComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _LeftSidePanelComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _LeftSidePanelComponent, selectors: [["app-left-side-panel"]], inputs: { selectedItemFromchild: "selectedItemFromchild", sideNavModel: "sideNavModel", isDraggingStart: "isDraggingStart" }, outputs: { drawerToggle: "drawerToggle", UpdatedDataForSidepanle: "UpdatedDataForSidepanle" }, standalone: true, features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature], decls: 5, vars: 5, consts: [[4, "ngIf"], [3, "reloadParent", "UpdatedDataEmitter", "sideNavModel"], [3, "sideNavModel"], [3, "DraggingStatus", "sideNavModel", "selectedItems"], [3, "DraggingStatus", "sideNavModel"]], template: function LeftSidePanelComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, LeftSidePanelComponent_div_0_Template, 2, 1, "div", 0)(1, LeftSidePanelComponent_div_1_Template, 2, 1, "div", 0)(2, LeftSidePanelComponent_div_2_Template, 2, 3, "div", 0)(3, LeftSidePanelComponent_div_3_Template, 2, 1, "div", 0)(4, LeftSidePanelComponent_div_4_Template, 2, 2, "div", 0);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.sideNavModel && ctx.sideNavModel.type == "dmog");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.sideNavModel && ctx.sideNavModel.type == "ParentRow");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.sideNavModel && ctx.sideNavModel.type == "Column" && !ctx.DraggingStatus);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.sideNavModel && ctx.sideNavModel.type == "NestedcolumnRow");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.sideNavModel && ctx.sideNavModel.type == "columnRow" && !ctx.DraggingStatus);
      }
    }, dependencies: [NgIf, DmogSettingsComponent, ContierParentRowSettingsComponent, ContainerColumnSettingsComponent, DmogSubRowSettingsComponent, DmogSubColumnSettingsComponent], styles: ["\n\n.sidenav-container[_ngcontent-%COMP%] {\n  height: 100vh;\n}\n.drawer[_ngcontent-%COMP%] {\n  width: 90%;\n  max-width: none;\n  transition: transform 0.6s ease-in-out, width 0.6s ease-in-out;\n}\n.mat-sidenav[_ngcontent-%COMP%] {\n  width: 90%;\n  max-width: none;\n  border: none;\n  transition: margin-left 0.6s;\n}\n.mat-sidenav-content[_ngcontent-%COMP%] {\n  transition: margin-left 0.6s ease-in-out;\n}\n.drawer-open[_ngcontent-%COMP%] {\n  margin-left: 200px !important;\n}\n.mat-toolbar[_ngcontent-%COMP%] {\n  transition: background-color 0.6s ease-in-out;\n}\n.example-accordion[_ngcontent-%COMP%] {\n  display: block;\n  max-width: 500px;\n}\n.example-accordion-item[_ngcontent-%COMP%] {\n  display: block;\n  border: solid 1px #ccc;\n}\n.example-accordion-item[_ngcontent-%COMP%]    + .example-accordion-item[_ngcontent-%COMP%] {\n  border-top: none;\n}\n.example-accordion-item-header[_ngcontent-%COMP%] {\n  display: flex;\n  align-content: center;\n  justify-content: space-between;\n}\n.example-accordion-item-description[_ngcontent-%COMP%] {\n  font-size: 0.85em;\n  color: #999;\n}\n.example-accordion-item-header[_ngcontent-%COMP%], \n.example-accordion-item-body[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-accordion-item-header[_ngcontent-%COMP%]:hover {\n  cursor: pointer;\n  background-color: #eee;\n}\n.example-accordion-item[_ngcontent-%COMP%]:first-child {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.example-accordion-item[_ngcontent-%COMP%]:last-child {\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n/*# sourceMappingURL=left-side-panel.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(LeftSidePanelComponent, { className: "LeftSidePanelComponent", filePath: "src\\app\\admin\\data-modeler1\\components1\\dmog-new-design\\left-side-panel\\left-side-panel.component.ts", lineNumber: 17 });
})();

// src/app/admin/data-modeler1/data-modeler1.component.ts
var _c013 = (a0) => ({ "width": a0 });
var _c18 = (a0) => ({ "open": a0 });
function DataModeler1Component_ng_container_0_div_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div");
  }
}
function DataModeler1Component_ng_container_0_div_11_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 21)(1, "div", 22)(2, "img", 23);
    \u0275\u0275listener("click", function DataModeler1Component_ng_container_0_div_11_div_3_Template_img_click_2_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.toggleDrawer());
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("ngClass", ctx_r1.isDrawerOpen ? "drawer-open" : "drawer-closed");
    \u0275\u0275advance();
    \u0275\u0275classMap(ctx_r1.isDrawerOpen ? "open-close-side-menu-arrow" : "open-close-side-menu-arrow-black");
    \u0275\u0275advance();
    \u0275\u0275property("src", ctx_r1.isDrawerOpen ? ctx_r1.leftDrawerIconUrl : ctx_r1.rightDrawerIconUrl, \u0275\u0275sanitizeUrl);
  }
}
function DataModeler1Component_ng_container_0_div_11_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "app-left-side-panel", 24);
    \u0275\u0275listener("UpdatedDataForSidepanle", function DataModeler1Component_ng_container_0_div_11_div_5_Template_app_left_side_panel_UpdatedDataForSidepanle_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.GetUpdatedDataForSidepanle($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275property("sideNavModel", ctx_r1.sideNavModel)("selectedItemFromchild", ctx_r1.selectedItemFromchild)("isDraggingStart", ctx_r1.isDraggingStart);
  }
}
function DataModeler1Component_ng_container_0_div_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 17)(1, "div", 18)(2, "div");
    \u0275\u0275template(3, DataModeler1Component_ng_container_0_div_11_div_3_Template, 3, 4, "div", 19);
    \u0275\u0275elementStart(4, "div", 20);
    \u0275\u0275template(5, DataModeler1Component_ng_container_0_div_11_div_5_Template, 2, 3, "div", 0);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(5, _c013, ctx_r1.isDrawerOpen ? "300px" : ctx_r1.sideNavModel ? "19px" : "1px"));
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", ctx_r1.isDrawerOpen && ctx_r1.sideNavModel ? "container-new-open" : "container-new-close");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r1.sideNavModel);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(7, _c18, ctx_r1.isDrawerOpen));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.isDrawerOpen);
  }
}
function DataModeler1Component_ng_container_0_ng_container_14_app_tab_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-tab", 26);
  }
  if (rf & 2) {
    const bmog_r5 = ctx.ngIf;
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("title", bmog_r5.Name)("data", bmog_r5)("active", bmog_r5.id === (ctx_r1.bm.selectedBMOG == null ? null : ctx_r1.bm.selectedBMOG.id))("shared", bmog_r5.shared)("showPlucIcon", false);
  }
}
function DataModeler1Component_ng_container_0_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DataModeler1Component_ng_container_0_ng_container_14_app_tab_1_Template, 1, 5, "app-tab", 25);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const bmogId_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.bm.childrenMap[bmogId_r6]);
  }
}
function DataModeler1Component_ng_container_0_app_tab_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-tab", 27);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("disabled", true)("data", ctx_r1.bm)("showPlucIcon", true);
  }
}
function DataModeler1Component_ng_container_0_ng_container_17_app_tab_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-tab", 29);
  }
  if (rf & 2) {
    const bmo_r7 = ctx.ngIf;
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("title", bmo_r7.DisplayName)("data", bmo_r7)("active", bmo_r7.id === (ctx_r1.bm.selectedBMO == null ? null : ctx_r1.bm.selectedBMO.id))("shared", bmo_r7.shared)("isBMO", true);
  }
}
function DataModeler1Component_ng_container_0_ng_container_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DataModeler1Component_ng_container_0_ng_container_17_app_tab_1_Template, 1, 5, "app-tab", 28);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const bmoId_r8 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.bm.selectedBMOG.childrenMap[bmoId_r8]);
  }
}
function DataModeler1Component_ng_container_0_app_tab_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-tab", 30);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("disabled", true)("data", ctx_r1.bm.selectedBMOG)("showPlucIcon", true);
  }
}
function DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dmog-form-view", 31);
    \u0275\u0275listener("sideNavModelEmitter", function DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template_app_dmog_form_view_sideNavModelEmitter_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.sideNavModelEmitter($event));
    })("isDrawerOpenEmitter", function DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template_app_dmog_form_view_isDrawerOpenEmitter_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.isDrawerOpenEmitter($event));
    })("sideNavModel", function DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template_app_dmog_form_view_sideNavModel_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.sideNavModelemit($event));
    })("updatedbmo", function DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template_app_dmog_form_view_updatedbmo_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.updatedbmo($event));
    })("DraggingStatus", function DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template_app_dmog_form_view_DraggingStatus_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.DraggingStatus($event));
    })("updatedbmEmitter", function DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template_app_dmog_form_view_updatedbmEmitter_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.updatedbmEmitter($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("SideNavModelData", ctx_r1.sideNavModel)("UpdatedDataFromSideNav", ctx_r1.UpdatedData)("dmog", ctx_r1.bm.selectedDMOG)("bmo", ctx_r1.bmo)("bm", ctx_r1.bm)("selectedBMO", ctx_r1.bm.selectedBMO)("readonly", ctx_r1.bm.published)("dmoMode", ctx_r1.dmoMode);
  }
}
function DataModeler1Component_ng_container_0_img_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 32);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("src", ctx_r1.contactsImageUrl, \u0275\u0275sanitizeUrl);
  }
}
function DataModeler1Component_ng_container_0_img_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 32);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("src", ctx_r1.attachmentsImageUrl, \u0275\u0275sanitizeUrl);
  }
}
function DataModeler1Component_ng_container_0_img_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 32);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("src", ctx_r1.documentsImageUrl, \u0275\u0275sanitizeUrl);
  }
}
function DataModeler1Component_ng_container_0_div_23_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 35);
    \u0275\u0275listener("click", function DataModeler1Component_ng_container_0_div_23_button_3_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.goToBMGrid());
    });
    \u0275\u0275text(1, " Go to Sub Process ");
    \u0275\u0275elementStart(2, "span", 36);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 37);
    \u0275\u0275element(4, "path", 38)(5, "path", 39);
    \u0275\u0275elementEnd()()();
  }
}
function DataModeler1Component_ng_container_0_div_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 33)(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, DataModeler1Component_ng_container_0_div_23_button_3_Template, 6, 0, "button", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.clickedTabData == null ? null : ctx_r1.clickedTabData.DisplayName);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.proccessName);
  }
}
function DataModeler1Component_ng_container_0_div_24_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 35);
    \u0275\u0275listener("click", function DataModeler1Component_ng_container_0_div_24_button_3_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r11);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.goToBMGrid());
    });
    \u0275\u0275text(1, " Go to Child Process ");
    \u0275\u0275elementStart(2, "span", 36);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 37);
    \u0275\u0275element(4, "path", 38)(5, "path", 39);
    \u0275\u0275elementEnd()()();
  }
}
function DataModeler1Component_ng_container_0_div_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 33)(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, DataModeler1Component_ng_container_0_div_24_button_3_Template, 6, 0, "button", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.clickedTabData == null ? null : ctx_r1.clickedTabData.DisplayName);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.proccessName);
  }
}
function DataModeler1Component_ng_container_0_img_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 32);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("src", ctx_r1.sharedChildProcessImageUrl, \u0275\u0275sanitizeUrl);
  }
}
function DataModeler1Component_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 1)(2, "a", 2);
    \u0275\u0275listener("click", function DataModeler1Component_ng_container_0_Template_a_click_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.routeBack());
    });
    \u0275\u0275element(3, "img", 3);
    \u0275\u0275elementStart(4, "span");
    \u0275\u0275text(5, "Back");
    \u0275\u0275elementEnd()()();
    \u0275\u0275element(6, "app-dm-header");
    \u0275\u0275elementStart(7, "app-dm-menu", 4);
    \u0275\u0275listener("modeChange", function DataModeler1Component_ng_container_0_Template_app_dm_menu_modeChange_7_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.changeMode($event));
    })("newVersion", function DataModeler1Component_ng_container_0_Template_app_dm_menu_newVersion_7_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onNewVersion());
    })("generateXml", function DataModeler1Component_ng_container_0_Template_app_dm_menu_generateXml_7_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onGenerateXML());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "section", 5)(9, "div", 6);
    \u0275\u0275template(10, DataModeler1Component_ng_container_0_div_10_Template, 1, 0, "div", 0)(11, DataModeler1Component_ng_container_0_div_11_Template, 6, 9, "div", 7);
    \u0275\u0275elementStart(12, "div", 8)(13, "app-tabs", 9);
    \u0275\u0275listener("tabSelected", function DataModeler1Component_ng_container_0_Template_app_tabs_tabSelected_13_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabSelect($event));
    })("tabClicked", function DataModeler1Component_ng_container_0_Template_app_tabs_tabClicked_13_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabClick($event));
    })("tabEdit", function DataModeler1Component_ng_container_0_Template_app_tabs_tabEdit_13_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabEdit($event));
    })("tabRemove", function DataModeler1Component_ng_container_0_Template_app_tabs_tabRemove_13_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabRemove($event));
    });
    \u0275\u0275template(14, DataModeler1Component_ng_container_0_ng_container_14_Template, 2, 1, "ng-container", 10)(15, DataModeler1Component_ng_container_0_app_tab_15_Template, 1, 3, "app-tab", 11);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "app-tabs", 12);
    \u0275\u0275listener("tabSelected", function DataModeler1Component_ng_container_0_Template_app_tabs_tabSelected_16_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabSelect($event));
    })("tabClicked", function DataModeler1Component_ng_container_0_Template_app_tabs_tabClicked_16_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabClick($event));
    })("tabEdit", function DataModeler1Component_ng_container_0_Template_app_tabs_tabEdit_16_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabEdit($event));
    })("tabRemove", function DataModeler1Component_ng_container_0_Template_app_tabs_tabRemove_16_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onTabRemove($event));
    })("dropped", function DataModeler1Component_ng_container_0_Template_app_tabs_dropped_16_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dropped($event, ctx_r1.bm == null ? null : ctx_r1.bm.selectedBMOG));
    });
    \u0275\u0275template(17, DataModeler1Component_ng_container_0_ng_container_17_Template, 2, 1, "ng-container", 10)(18, DataModeler1Component_ng_container_0_app_tab_18_Template, 1, 3, "app-tab", 13);
    \u0275\u0275elementEnd();
    \u0275\u0275template(19, DataModeler1Component_ng_container_0_app_dmog_form_view_19_Template, 1, 8, "app-dmog-form-view", 14)(20, DataModeler1Component_ng_container_0_img_20_Template, 1, 1, "img", 15)(21, DataModeler1Component_ng_container_0_img_21_Template, 1, 1, "img", 15)(22, DataModeler1Component_ng_container_0_img_22_Template, 1, 1, "img", 15)(23, DataModeler1Component_ng_container_0_div_23_Template, 4, 2, "div", 16)(24, DataModeler1Component_ng_container_0_div_24_Template, 4, 2, "div", 16)(25, DataModeler1Component_ng_container_0_img_25_Template, 1, 1, "img", 15);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275property("src", ctx_r1.backsImageUrl, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(4);
    \u0275\u0275property("mode", ctx_r1.bm.Mode)("businessModel", ctx_r1.bm);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitch", ctx_r1.bm.selectedBMO == null ? null : ctx_r1.bm.selectedBMO.BmoType);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !ctx_r1.isDraggingStart);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.bm.published);
    \u0275\u0275advance(2);
    \u0275\u0275property("actions", ctx_r1.tabActions)("isNewDesign", true)("isView", true);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.bm == null ? null : ctx_r1.bm.Children);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.bm.published);
    \u0275\u0275advance();
    \u0275\u0275property("actions", ctx_r1.tabActions)("isSection", true)("isNewDesign", true);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.bm == null ? null : ctx_r1.bm.selectedBMOG == null ? null : ctx_r1.bm.selectedBMOG.Children);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r1.bm == null ? null : ctx_r1.bm.Children.length) > 0 && !ctx_r1.bm.published);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Forms");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Contacts");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Attachments");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Documents");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Subprocess");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "ChildProcess");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "SharedChildProcess");
  }
}
var DataModeler1Component = class _DataModeler1Component {
  get tabActions() {
    return { edit: true, delete: !this.bm.published };
  }
  get allowNewDMOG() {
    return this.bm?.selectedBMOG?.Children?.length && this.bm?.selectedBMO?.BmoType === "Forms" && !this.bm.selectedBMO?.shared && !this.bm.published;
  }
  constructor(bmService, route, msg, toast, dmApi, formViewApi, dataProvider, renderer, cdref, dialog) {
    this.bmService = bmService;
    this.route = route;
    this.msg = msg;
    this.toast = toast;
    this.dmApi = dmApi;
    this.formViewApi = formViewApi;
    this.dataProvider = dataProvider;
    this.renderer = renderer;
    this.cdref = cdref;
    this.dialog = dialog;
    this.isDrawerOpen = false;
    this.sidebarclose = false;
    this.alertMsgTxt = [];
    this.selectedBMOGMap = {};
    this.encryptedBMId = this.route.snapshot.queryParams.BMID;
    this.AddDmog = new EventEmitter();
    this.clickedTabData = {};
    this.contactsImageUrl = UtilService.getUrlForImage("/assets/styles/images/contacts-bmo.jpg");
    this.attachmentsImageUrl = UtilService.getUrlForImage("/assets/styles/images/attachments-bmo.jpg");
    this.documentsImageUrl = UtilService.getUrlForImage("/assets/styles/images/documents-bmo.jpg");
    this.sharedChildProcessImageUrl = UtilService.getUrlForImage("/assets/styles/images/shared-child-process-bmo.jpg");
    this.leftDrawerIconUrl = UtilService.getUrlForImage("/assets/admin-assets/images/fi-rr-angle-small-left.png");
    this.rightDrawerIconUrl = UtilService.getUrlForImage("/assets/admin-assets/images/fi-rr-angle-small-right-black.png");
    this.backsImageUrl = UtilService.getUrlForImage("/assets/styles/images/back-icon-black.png");
    this.panelControls = Object.values(DMOSLayout);
    this.dataProvider.getOpenSidebarNav().subscribe((data) => {
      this.sideNavModel = data;
      this.isDrawerOpen = true;
      this.isDrawerOpen = true;
    });
    this.dataProvider.getSidebarclose().subscribe((data) => {
      if (data) {
        this.isDrawerOpen = false;
      }
    });
  }
  ngOnInit() {
    this.renderer.removeClass(document.body, "no-scroll");
    const style2 = this.renderer.createElement("style");
    style2.innerHTML = `
      body::-webkit-scrollbar {
        width: 0 !important;
        display: none;
      }
      body {
        -ms-overflow-style: none;
        overflow-y: scroll;
      }
    `;
    this.renderer.appendChild(document.head, style2);
    this.getBM();
  }
  getBM() {
    const { ProcessName, Name, Version } = this.route.snapshot.data?.bm;
    this.dmApi.getData(ProcessName, Name, Version).subscribe((bm) => {
      this.bm = bm;
      if (this.bm) {
        this.clickedTabData.DisplayName = this.bm.DisplayName;
        this.proccessName = ProcessName;
      }
      const tabId = this.route.snapshot.queryParams["tabId"] || localStorage.getItem(`lastTabId_${bm.BMId}`);
      if (tabId) {
        this.activateTabById(tabId);
      } else {
        this.activateFirstTab();
      }
    });
  }
  getBMsubscribe() {
    const { ProcessName, Name, Version } = this.route.snapshot.data?.bm;
    return this.dmApi.getData(ProcessName, Name, Version);
  }
  // Helper to activate tab by id
  activateTabById(tabId) {
    if (!this.bm)
      return;
    if (!this.bm.Children || !this.bm.childrenMap) {
      this.activateFirstTab();
      return;
    }
    if (this.tryActivateParentTab(tabId, this.bm.Children, this.bm.childrenMap)) {
      return;
    }
    this.activateFirstTab();
  }
  tryActivateParentTab(tabId, children, childrenMap) {
    for (const bmogId of children) {
      const bmog = childrenMap[bmogId];
      if (!bmog)
        continue;
      if (bmog.id === tabId) {
        this.selectParentTab(bmog);
        this.onTabClick({ data: bmog, disabled: false });
        return true;
      }
      if (bmog.Children && bmog.childrenMap) {
        if (this.tryActivateChildTab(tabId, bmog)) {
          return true;
        }
      }
    }
    return false;
  }
  tryActivateChildTab(tabId, parent) {
    for (const bmoId of parent.Children) {
      const bmo = parent.childrenMap[bmoId];
      if (bmo.id === tabId.toLocaleLowerCase()) {
        this.selectParentTab(parent);
        this.selectChildTab(bmo);
        this.onTabClick({ data: bmo, disabled: false });
        return true;
      }
    }
    return false;
  }
  // Activate first tab by default if nothing is found
  activateFirstTab() {
    if (this.bm?.Children && this.bm?.childrenMap) {
      const firstBmogId = this.bm.Children[0];
      const firstBmog = this.bm.childrenMap[firstBmogId];
      if (firstBmog) {
        this.selectParentTab(firstBmog);
        if (firstBmog.Children && firstBmog.childrenMap) {
          const firstBmoId = firstBmog.Children[0];
          const firstBmo = firstBmog.childrenMap[firstBmoId];
          if (firstBmo) {
            this.selectChildTab(firstBmo);
            this.onTabClick({ data: firstBmo, disabled: false });
          } else {
            this.onTabClick({ data: firstBmog, disabled: false });
          }
        } else {
          this.onTabClick({ data: firstBmog, disabled: false });
        }
      }
    }
  }
  selectParentTab(bmog) {
    if (this.bm.selectedBMOG) {
      this.selectedBMOGMap[this.bm.selectedBMOG.id] = this.bm.selectedBMO;
    }
    this.bm.selectedBMOG = bmog;
    this.bm.selectedBMO = this.selectedBMOGMap[bmog.id] || bmog.Children?.[0];
  }
  selectChildTab(bmo) {
    this.bm.selectedBMO = bmo;
  }
  onTabClick(tab) {
    if (this.bm?.BMId && tab?.data?.id) {
      localStorage.setItem(`lastTabId_${this.bm.BMId}`, tab.data.id);
    }
    if (tab?.disabled) {
      this.getObjectDetails(tab?.data);
      this.sidebarclose = true;
      this.dataProvider.setSidebarclose(this.sidebarclose);
    }
    if (tab?.data) {
      this.clickedTabData = tab.data;
      if (tab.data?.ChildProcessId) {
        this.getChildProcess(tab.data.ChildProcessId);
      } else if (tab.data?.SubProcessId) {
        this.getSubProcess(tab.data.SubProcessId);
      } else if (tab.data.BMOGID || tab.data.BMOID) {
        this.proccessName = tab.data.Name;
        this.processDisplayName = tab.data.DisplayName;
      } else {
        this.getBMOChildDetails(tab.data.parent?._selectedBMO);
      }
    }
  }
  getBMOChildDetails(selectedBMO) {
    let childId = null;
    let childName = null;
    if (!selectedBMO) {
      console.warn("No BMO selected!");
      return null;
    }
    if (selectedBMO.BmoType === "ChildProcess" && selectedBMO.ChildProcessId) {
      childId = selectedBMO.ChildProcessId;
      this.proccessName = selectedBMO.Name;
      this.clickedTabData.DisplayName = selectedBMO.DisplayName;
    } else if (selectedBMO.BmoType === "SubProcess" && selectedBMO.SubProcessId) {
      childId = selectedBMO.SubProcessId;
      this.proccessName = selectedBMO.Name;
      this.clickedTabData.DisplayName = selectedBMO.DisplayName;
    } else {
      console.warn("No valid ChildProcess or SubProcess found.");
    }
    return { childId, childName };
  }
  getChildProcess(ProcessId) {
    const bmId = this.bm?.BMId != null ? this.bm.BMId.toString() : this.route.snapshot.data?.bm?.BMId?.toString();
    this.dmApi.getChildProcessList(bmId).subscribe((response) => {
      this.ProcessList = response;
      if (this.ProcessList?.length) {
        const childProcess = this.ProcessList.find((a) => a.Value === ProcessId);
        this.proccessName = childProcess?.Label;
        this.processDisplayName = childProcess?.Label;
      }
    });
  }
  getSubProcess(ProcessId) {
    this.dmApi.getSubprocessList(this.bm.BMId.toString()).subscribe((response) => {
      this.ProcessList = response;
      if (this.ProcessList?.length) {
        const subProcess = this.ProcessList.find((a) => a.Value === ProcessId);
        this.proccessName = subProcess?.Label;
        this.processDisplayName = subProcess?.Label;
      }
    });
  }
  goToBMGrid() {
    if (!this.proccessName || !this.clickedTabData?.DisplayName) {
      console.error("Required data is missing");
      return;
    }
    try {
      const existingValues = __spreadValues({}, sessionStorage);
      sessionStorage.setItem("AppName", this.proccessName);
      sessionStorage.setItem("DisplayName", this.processDisplayName ? this.processDisplayName : this.clickedTabData.DisplayName);
      const storedAppName = sessionStorage.getItem("AppName");
      const storedDisplayName = sessionStorage.getItem("DisplayName");
      if (storedAppName === this.proccessName && (storedDisplayName === this.clickedTabData.DisplayName || storedDisplayName === this.processDisplayName)) {
        window.open("/admin/bm", "_blank");
      } else {
        console.error("Failed to update session storage values");
        Object.entries(existingValues).forEach(([key, value]) => {
          sessionStorage.setItem(key, value);
        });
      }
    } catch (error) {
      console.error("Error updating session storage:", error);
    }
  }
  onTabSelect(tab) {
    this.bm.updateSelectedObjects(tab.data);
    this.sidebarclose = true;
    this.dataProvider.setSidebarclose(this.sidebarclose);
  }
  onTabEdit(tab) {
    if (tab.data instanceof BMO) {
      this.getBMsubscribe().subscribe({
        next: (bm) => {
          this.bm = bm;
          setTimeout(() => {
            this.openObjectDetails(tab.data);
            this.sidebarclose = true;
            this.dataProvider.setSidebarclose(this.sidebarclose);
          }, 10);
        },
        error: (_) => {
        }
      });
    } else {
      this.openObjectDetails(tab.data);
      this.sidebarclose = true;
      this.dataProvider.setSidebarclose(this.sidebarclose);
    }
  }
  openObjectDetails(obj) {
    this.getObjectDetails(obj.parent, obj);
  }
  onTabRemove(tab) {
    const obj = tab.data;
    let className = "";
    if (obj instanceof BM) {
      className = "BM";
    } else if (obj instanceof BMOG) {
      className = "View";
    } else if (obj instanceof BMO) {
      className = "Section";
    } else if (obj instanceof DMOG) {
      className = "Card";
    }
    const name = obj?.DisplayName || obj.Name;
    const isSection = className === "Section";
    const btnText = isSection ? "Unshare" : "Delete";
    const checkboxText = `Yes, ${btnText.toLowerCase()} this object`;
    this.msg.showMessage("Warning", {
      header: `${btnText} ${className}`,
      body: `Are you sure you want to ${btnText.toLowerCase()} ${name}?`,
      btnText: `${btnText}`,
      checkboxText,
      isDelete: true,
      undoable: isSection,
      isNewDesign: true,
      callback: () => this.deleteObject(obj)
    });
  }
  deleteObject(obj) {
    const parent = obj.parent;
    const idx = parent.Children.findIndex((id) => id === obj.id);
    parent.removeChild(obj.id);
    const rollback = () => parent.addChildAt(obj, idx);
    this.dmApi.deleteObject(obj, this.bm).subscribe({
      next: (success) => !success ? rollback() : this.getBM(),
      error: (_) => rollback()
    });
  }
  onNewVersion() {
    this.msg.showMessage("Warning", {
      header: "New Version",
      body: "Are you sure you want to create new version?",
      callback: () => {
        this.dmApi.createBMVersion(this.encryptedBMId).subscribe((message) => {
          this.toast.success(message);
        });
      },
      btnText: "Create New Version",
      isConfirmation: true
    });
  }
  dropped(e, parent) {
    moveItemInArray(parent.Children, e.from, e.to);
    this.dmApi.reorderChildren(parent).subscribe({
      next: (_) => this.getBM(),
      error: (_) => moveItemInArray(parent.Children, e.to, e.from)
    });
  }
  onGenerateXML() {
    this.bmService.generateXML1(this.bm.ProcessName, this.bm.Version).pipe(tap((response) => {
      this.alertMsgTxt = [];
      if (!response) {
        throw new Error("No response from generateXML1");
      }
      if (response.IsBMWFLinked === 0)
        this.alertMsgTxt.push("BM-WF is not linked.");
      if (response.IsLive === 0)
        this.alertMsgTxt.push("BM-WF is not live.");
      if (response.IsCmpnyGrpExists === 0)
        this.alertMsgTxt.push("Company Group does not exist.");
      if (response.IsCmpnyBMObjectLinked === 0)
        this.alertMsgTxt.push("Company-BM Objects are not linked.");
      if (this.alertMsgTxt.length > 0) {
        throw new Error("Validation errors");
      }
    }), switchMap(() => this.bmService.generateXML(this.bm.ProcessName, this.bm.Version)), catchError((err) => {
      this.showErrorModal();
      return of(false);
    })).subscribe((success) => {
      if (success) {
        this.toast.success("JSON generated successfully");
      }
    });
  }
  showErrorModal() {
    const dialogRef = this.dialog.open(GenerateXmlComponent, {
      width: "656px",
      disableClose: true,
      panelClass: "custom-dialog-container",
      data: {
        type: "bm",
        processName: this.bm.ProcessName,
        verNo: this.bm.Version,
        alertMsgTxt: this.alertMsgTxt
      }
    });
    dialogRef.componentInstance.closeModal.subscribe(() => {
      dialogRef.close();
    });
  }
  changeMode(mode) {
    this.dmoMode = mode;
    if (mode === this.bm.Mode)
      return;
    this.dmApi.changeMode(this.bm.BMId, mode).subscribe((success) => {
      if (success) {
        this.bm.update({ Mode: mode });
      }
    });
  }
  getObjectDetails(_0) {
    return __async(this, arguments, function* (parent, data = {}) {
      const newObject = Object.keys(data).length === 0;
      const { component } = this.determineClassAndComponent(parent, data);
      const modal = this.msg.showComponent(component, { data, parent, newObject });
      const res = yield modal.result;
      if (!res)
        return;
      if (parent === void 0 && data instanceof BM) {
        this.saveBMDetails(res);
        return;
      }
      if (res.removedItems) {
        const processName = sessionStorage.getItem("AppName");
        if (parent instanceof BMOG && res.removedItems.domgNames !== "-1") {
          yield firstValueFrom(this.dmApi.deleteDmog(processName, res.removedItems.domgNames));
        } else if (parent instanceof BM && res.removedItems.bmoNames !== "-1") {
          yield firstValueFrom(this.dmApi.deleteBmo(processName, res.removedItems.bmoNames, this.bm.Version));
        }
      }
      const saveSharedDmogs = (id) => {
        if (parent instanceof BM) {
          if (res.shared.bmoIds === "-1" && !newObject) {
            return EMPTY;
          }
          res.shared.bmogId = id || res.shared.bmogId;
          return this.dmApi.saveSharedBmos(res.shared.bmogId, res.shared.bmoIds);
        } else if (parent instanceof BMOG) {
          if (res.shared.dmogIds === "-1" && !newObject) {
            return EMPTY;
          }
          res.shared.bmoId = id || res.shared.bmoId;
          return this.dmApi.saveSharedDmogs(res.shared.bmoId, res.shared.dmogIds);
        } else if (parent instanceof BMO) {
          if (res.shared.leftDMOGuids === "-1" && res.shared.rightDMOGuids === "-1" && !newObject) {
            return EMPTY;
          }
          return this.dmApi.saveSharedDmos(res.shared);
        }
      };
      this.saveObjectDetails(parent, data, res.payload, saveSharedDmogs);
    });
  }
  saveBMDetails(payload) {
    this.dmApi.saveBM(payload).subscribe((success) => {
      if (success) {
        this.bm.update(payload);
      }
    });
  }
  saveObjectDetails(parent, obj = {}, payload, finalize2) {
    const newObject = Object.keys(obj).length === 0;
    const original = __spreadValues({}, obj);
    let newChild;
    if (newObject) {
      const { childClass } = this.determineClassAndComponent(parent);
      newChild = new childClass(payload, parent);
      parent.addChild(newChild);
    } else {
      obj.update(payload);
    }
    const rollback = () => {
      if (newObject) {
        parent.removeChild(payload.id);
      } else {
        obj.update(original);
      }
    };
    this.dmApi.saveObject(payload, this.bm).pipe(switchMap((id) => {
      if (finalize2) {
        return finalize2(id).pipe(map(() => id));
      }
      return of(id);
    })).subscribe({
      next: (success) => {
        if (!success)
          rollback();
        else {
          this.bm.cacheObjectId(payload);
          if (newObject && newChild) {
            if (newChild instanceof BMOG) {
              this.selectParentTab(newChild);
              localStorage.setItem(`lastTabId_${this.bm.BMId}`, newChild.id);
            } else if (newChild instanceof BMO) {
              if (this.bm.selectedBMOG !== parent) {
                this.selectParentTab(parent);
              }
              this.selectChildTab(newChild);
              localStorage.setItem(`lastTabId_${this.bm.BMId}`, newChild.id);
            } else if (newChild instanceof DMOG && parent instanceof BMO) {
              if (this.bm.selectedBMO !== parent) {
                this.selectChildTab(parent);
              }
            }
          }
        }
      },
      error: (_) => rollback(),
      complete: () => this.getBM()
    });
  }
  determineClassAndComponent(parent, data = {}) {
    let component;
    let childClass;
    if (parent instanceof BM) {
      component = BmogDetailComponent;
      childClass = BMOG;
    } else if (parent instanceof BMOG) {
      component = BmoDetailComponent;
      childClass = BMO;
    } else if (parent instanceof BMO) {
      component = DmogDetailComponent;
      childClass = DMOG;
    } else if (parent === void 0 && data instanceof BM) {
      component = BmDetailComponent;
      childClass = void 0;
    }
    return { component, childClass };
  }
  onDropLayout(event) {
    return __async(this, null, function* () {
      this.dataProvider.setNewlyBmog(event);
    });
  }
  toggleDrawer() {
    this.isDrawerOpen = !this.isDrawerOpen;
  }
  GetUpdatedDataForSidepanle(event) {
    if (event) {
      this.UpdatedData = event;
    }
  }
  sideNavModelEmitter(event) {
    if (event) {
      this.sideNavModel = event;
    }
  }
  isDrawerOpenEmitter(event) {
    if (event) {
      this.isDrawerOpen = event;
    }
  }
  sideNavModelemit(event) {
    if (event) {
    }
  }
  updatedbmo(event) {
    this.bm = event;
    this.Save_reOrder(this.bm._selectedBMOG, this.bm._selectedBMO, this.bm._selectedBMO);
  }
  Save_reOrder(_0, _1) {
    return __async(this, arguments, function* (parent, payload, data = {}) {
      let dmogIds = [];
      for (const element of data.Children) {
        for (const bmog of Object.values(data.childrenMap)) {
          if (bmog.GUID === element) {
            dmogIds.push(bmog.DMOGID);
          }
        }
      }
      const shared = {
        bmoid: this.bm._selectedBMO.BMOID,
        dmogIds: dmogIds.join(",")
      };
      return this.dmApi.saveReorderDmogs(shared.bmoid.toString(), shared.dmogIds);
    });
  }
  DraggingStatus(event) {
    this.isDraggingStart = event;
    if (this.isDraggingStart && this.isDrawerOpen) {
      this.isDrawerOpen = false;
    }
    this.cdref.detectChanges();
  }
  updatedbmEmitter(event) {
    if (event) {
      this.bm = event;
    }
  }
  routeBack() {
    window.history.back();
  }
  static {
    this.\u0275fac = function DataModeler1Component_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DataModeler1Component)(\u0275\u0275directiveInject(BmService), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(MessageService), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(DataModelerApiService), \u0275\u0275directiveInject(FormViewApiService), \u0275\u0275directiveInject(ServiceProviderService), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(MatDialog));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DataModeler1Component, selectors: [["app-data-modeler1"]], inputs: { sideNavModel: "sideNavModel", selectedItemFromchild: "selectedItemFromchild" }, outputs: { AddDmog: "AddDmog" }, standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [1, "breadcrumbs", "p-1", "mb-1", 2, "background-color", "#fff"], [3, "click"], ["width", "20px", 2, "filter", "var(--plx-app-list-icon-filter)", 3, "src"], [3, "modeChange", "newVersion", "generateXml", "mode", "businessModel"], ["aria-label", "Modal heading text content", "role", "document", 1, "modal-body", "body-mt-20", 2, "padding", "0px !important", 3, "ngSwitch"], [1, "parentsection"], ["id", "sidebar", 3, "ngStyle", 4, "ngIf"], [1, "main-content-section"], [3, "tabSelected", "tabClicked", "tabEdit", "tabRemove", "actions", "isNewDesign", "isView"], [4, "ngFor", "ngForOf"], ["title", "Add BMOG", 3, "disabled", "data", "showPlucIcon", 4, "ngIf"], ["m", "", 3, "tabSelected", "tabClicked", "tabEdit", "tabRemove", "dropped", "actions", "isSection", "isNewDesign"], ["title", "Add BMO", 3, "disabled", "data", "showPlucIcon", 4, "ngIf"], [3, "SideNavModelData", "UpdatedDataFromSideNav", "dmog", "bmo", "bm", "selectedBMO", "readonly", "dmoMode", "sideNavModelEmitter", "isDrawerOpenEmitter", "sideNavModel", "updatedbmo", "DraggingStatus", "updatedbmEmitter", 4, "ngSwitchCase"], ["width", "100%", "alt", "Contacts", 3, "src", 4, "ngSwitchCase"], ["class", "custom-box", 4, "ngSwitchCase"], ["id", "sidebar", 3, "ngStyle"], [3, "ngClass"], ["class", "open-side-menu-button", 3, "ngClass", 4, "ngIf"], [1, "side-nav", "stick-side-bar-nav", 3, "ngClass"], [1, "open-side-menu-button", 3, "ngClass"], [1, "open-close-side-menu-button"], ["alt", "Toggle Drawer Icon", 3, "click", "src"], [3, "UpdatedDataForSidepanle", "sideNavModel", "selectedItemFromchild", "isDraggingStart"], [3, "title", "data", "active", "shared", "showPlucIcon", 4, "ngIf"], [3, "title", "data", "active", "shared", "showPlucIcon"], ["title", "Add BMOG", 3, "disabled", "data", "showPlucIcon"], [3, "title", "data", "active", "shared", "isBMO", 4, "ngIf"], [3, "title", "data", "active", "shared", "isBMO"], ["title", "Add BMO", 3, "disabled", "data", "showPlucIcon"], [3, "sideNavModelEmitter", "isDrawerOpenEmitter", "sideNavModel", "updatedbmo", "DraggingStatus", "updatedbmEmitter", "SideNavModelData", "UpdatedDataFromSideNav", "dmog", "bmo", "bm", "selectedBMO", "readonly", "dmoMode"], ["width", "100%", "alt", "Contacts", 3, "src"], [1, "custom-box"], ["class", "custom-button", 3, "click", 4, "ngIf"], [1, "custom-button", 3, "click"], [1, "icon"], ["xmlns", "http://www.w3.org/2000/svg", "width", "16", "height", "16", "fill", "currentColor", "viewBox", "0 0 16 16", 1, "bi", "bi-box-arrow-up-right"], ["fill-rule", "evenodd", "d", "M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"], ["fill-rule", "evenodd", "d", "M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"]], template: function DataModeler1Component_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, DataModeler1Component_ng_container_0_Template, 26, 23, "ng-container", 0);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", ctx.bm);
      }
    }, dependencies: [NgIf, DmHeaderComponent, DmMenuComponent, NgSwitch, NgStyle, NgClass, LeftSidePanelComponent, TabsComponent, NgForOf, TabComponent, NgSwitchCase, DmogFormViewComponent], styles: ["\n\n.modal-body[_ngcontent-%COMP%] {\n  padding: 0px 16px 16px 16px !important;\n}\n.stick-tabs-box[_ngcontent-%COMP%] {\n  position: fixed;\n  width: 100%;\n  margin-top: 63px;\n  background-color: white;\n}\n.body-mt-50[_ngcontent-%COMP%] {\n  margin-top: 40px;\n}\n.tab-container[_ngcontent-%COMP%] {\n  display: flex;\n  border-bottom: 2px solid #ddd;\n  padding-bottom: 5px;\n  overflow-x: auto;\n  margin-top: 58px;\n}\n.tab[_ngcontent-%COMP%] {\n  padding: 10px 15px;\n  border: 1px solid #ddd;\n  border-radius: 5px 5px 0 0;\n  background: #f8f8f8;\n  margin-right: 5px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n.tab.active[_ngcontent-%COMP%] {\n  background: #fdecea;\n  color: #e74c3c;\n  border-bottom: 2px solid #e74c3c;\n}\n.add-tab[_ngcontent-%COMP%] {\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background: #f8f8f8;\n  cursor: pointer;\n}\n.section-container[_ngcontent-%COMP%] {\n  display: flex;\n  margin-top: 15px;\n  border-bottom: 2px solid #ddd;\n  padding-bottom: 5px;\n  overflow-x: auto;\n}\n.section[_ngcontent-%COMP%] {\n  padding: 10px 15px;\n  cursor: pointer;\n  margin-right: 10px;\n  color: #555;\n}\n.section.active[_ngcontent-%COMP%] {\n  color: #007bff;\n  border-bottom: 4px solid #007bff;\n  font-weight: bold;\n}\n.parentsection[_ngcontent-%COMP%] {\n  display: flex;\n}\n.open-side-menu-button[_ngcontent-%COMP%] {\n  position: relative;\n  left: 298px;\n  top: 300px;\n  z-index: 99;\n  transition: left 0.5s ease;\n}\n.drawer-open[_ngcontent-%COMP%] {\n  left: 300px !important;\n}\n.drawer-closed[_ngcontent-%COMP%] {\n  left: 0px !important;\n}\n.stick-side-bar-nav[_ngcontent-%COMP%] {\n  position: fixed;\n  width: 300px !important;\n}\n.open-close-side-menu-button[_ngcontent-%COMP%] {\n  position: fixed;\n  margin-left: -2px;\n}\n.open-close-side-menu-arrow-black[_ngcontent-%COMP%] {\n  height: 50px;\n  width: 24px;\n  border-radius: 0px 4px 4px 0px;\n  border-top: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  border-bottom: 1px solid #ccc;\n  background: var(--C2M-Dark-Blue, #005996);\n  padding: 9px 0px 0px 0px;\n}\n.open-close-side-menu-arrow[_ngcontent-%COMP%] {\n  width: 24px;\n  height: 50px;\n  flex-shrink: 0;\n  filter: drop-shadow(3px 0px 5px rgba(0, 0, 0, 0.03));\n  padding: 9px 0px 0px 0px;\n  border-radius: 0px 4px 4px 0px;\n  border-top: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  border-bottom: 1px solid #ccc;\n  background: var(--C2M-Dark-Blue, #005996);\n}\n.side-nav[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 3.25fr 0.75fr;\n  position: sticky;\n  top: 0;\n  opacity: 0;\n  transform: translateX(-100%);\n  transition: opacity 0.5s ease-in, transform 0.5s ease-in;\n}\n.container-new-close[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 0fr 4fr;\n}\n.container-new-open[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 300px 3.25fr;\n}\n.side-nav[_ngcontent-%COMP%]   .open-side-menu[_ngcontent-%COMP%] {\n  position: relative;\n  text-align: center;\n  top: calc(40% - 10px);\n  transition: background-color 0.3s ease;\n}\n.side-nav[_ngcontent-%COMP%]   .close-side-menu[_ngcontent-%COMP%] {\n  position: relative;\n  text-align: center;\n  top: calc(500% - 10px);\n  transition: background-color 0.3s ease;\n}\n.side-nav.open[_ngcontent-%COMP%] {\n  opacity: 1;\n  transform: translateX(0);\n}\n.main-content-section[_ngcontent-%COMP%] {\n  width: 100%;\n  padding: 20px;\n}\n.custom-box[_ngcontent-%COMP%] {\n  border-radius: 5px;\n  padding: 10px;\n  width: 100%;\n  height: 200px;\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n  top: 15px;\n  border: 1px dashed #cccccc;\n}\n.custom-button[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  background-color: #e74c3c;\n  color: white;\n  border: none;\n  padding: 5px 12px;\n  font-size: 14px;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n.custom-button[_ngcontent-%COMP%]:hover {\n  background-color: #c0392b;\n}\n.icon[_ngcontent-%COMP%] {\n  font-size: 14px;\n}\n.breadcrumbs[_ngcontent-%COMP%] {\n  margin-top: -18px;\n}\n/*# sourceMappingURL=data-modeler1.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DataModeler1Component, { className: "DataModeler1Component", filePath: "src\\app\\admin\\data-modeler1\\data-modeler1.component.ts", lineNumber: 36 });
})();

// src/app/admin/data-modeler1/data-modeler1-routing.module.ts
var routes = [{ path: "", component: DataModeler1Component }];
var DataModeler1RoutingModule = class _DataModeler1RoutingModule {
  static {
    this.\u0275fac = function DataModeler1RoutingModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DataModeler1RoutingModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _DataModeler1RoutingModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [RouterModule.forChild(routes), RouterModule] });
  }
};

// src/app/admin/data-modeler1/data-modeler1.module.ts
var DataModeler1Module = class _DataModeler1Module {
  static {
    this.\u0275fac = function DataModeler1Module_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DataModeler1Module)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _DataModeler1Module });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
      CommonModule,
      DataModeler1RoutingModule,
      SharedModule,
      ObjectControlModule,
      DragDropModule,
      CdkAccordionModule,
      DataModeler1Component,
      BmDetailComponent,
      DmoComponent,
      DmoDetailComponent,
      BmogDetailComponent,
      BmoDetailComponent,
      DmogDetailComponent,
      DmoConditionComponent,
      DmogFormViewComponent,
      ResizeablePanelComponent,
      LeftSidePanelComponent,
      DmogContainerComponent,
      DmogSettingsComponent,
      ContierParentRowSettingsComponent,
      ContainerColumnSettingsComponent,
      DmogSubRowSettingsComponent,
      DmogSubColumnSettingsComponent
    ] });
  }
};
export {
  DataModeler1Module
};
//# sourceMappingURL=chunk-NQAMO545.js.map
