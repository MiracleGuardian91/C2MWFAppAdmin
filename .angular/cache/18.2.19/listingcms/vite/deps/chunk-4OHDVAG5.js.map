{
  "version": 3,
  "sources": ["../../../../../../node_modules/diagram-js/lib/util/Geometry.js", "../../../../../../node_modules/path-intersection/intersect.js", "../../../../../../node_modules/diagram-js/lib/layout/LayoutUtil.js"],
  "sourcesContent": ["import { every } from 'min-dash';\n\n/**\n * @typedef {import('../util/Types').Axis} Axis\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n */\n\n/**\n * Computes the distance between two points.\n *\n * @param {Point} a\n * @param {Point} b\n *\n * @return {number} The distance between the two points.\n */\nexport function pointDistance(a, b) {\n  if (!a || !b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\n/**\n * Returns true if the point r is on the line between p and q.\n *\n * @param {Point} p\n * @param {Point} q\n * @param {Point} r\n * @param {number} [accuracy=5] The accuracy with which to check (lower is better).\n *\n * @return {boolean}\n */\nexport function pointsOnLine(p, q, r, accuracy) {\n  if (typeof accuracy === 'undefined') {\n    accuracy = 5;\n  }\n  if (!p || !q || !r) {\n    return false;\n  }\n  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n    dist = pointDistance(p, q);\n\n  // @see http://stackoverflow.com/a/907491/412190\n  return Math.abs(val / dist) <= accuracy;\n}\nvar ALIGNED_THRESHOLD = 2;\n\n/**\n * Check whether two points are horizontally or vertically aligned.\n *\n * @param {Point[]|Point} a\n * @param {Point} [b]\n *\n * @return {string|boolean} If and how the two points are aligned ('h', 'v' or `false`).\n */\nexport function pointsAligned(a, b) {\n  var points = Array.from(arguments).flat();\n  const axisMap = {\n    'x': 'v',\n    'y': 'h'\n  };\n  for (const [axis, orientation] of Object.entries(axisMap)) {\n    if (pointsAlignedOnAxis(axis, points)) {\n      return orientation;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {Axis} axis\n * @param {Point[]} points\n *\n * @return {boolean}\n */\nexport function pointsAlignedOnAxis(axis, points) {\n  const referencePoint = points[0];\n  return every(points, function (point) {\n    return Math.abs(referencePoint[axis] - point[axis]) <= ALIGNED_THRESHOLD;\n  });\n}\n\n/**\n * Returns true if the point p is inside the rectangle rect\n *\n * @param {Point} p\n * @param {Rect} rect\n * @param {number} tolerance\n *\n * @return {boolean}\n */\nexport function pointInRect(p, rect, tolerance) {\n  tolerance = tolerance || 0;\n  return p.x > rect.x - tolerance && p.y > rect.y - tolerance && p.x < rect.x + rect.width + tolerance && p.y < rect.y + rect.height + tolerance;\n}\n\n/**\n * Returns a point in the middle of points p and q\n *\n * @param {Point} p\n * @param {Point} q\n *\n * @return {Point} The mid point between the two points.\n */\nexport function getMidPoint(p, q) {\n  return {\n    x: Math.round(p.x + (q.x - p.x) / 2.0),\n    y: Math.round(p.y + (q.y - p.y) / 2.0)\n  };\n}", "/**\n * This file contains source code adapted from Snap.svg (licensed Apache-2.0).\n *\n * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js\n */\n\n/* eslint no-fallthrough: \"off\" */\n\nvar p2s = /,?([a-z]),?/gi,\n  toFloat = parseFloat,\n  math = Math,\n  PI = math.PI,\n  mmin = math.min,\n  mmax = math.max,\n  pow = math.pow,\n  abs = math.abs,\n  pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n  pathValues = /(-?\\d*\\.?\\d*(?:e[-+]?\\d+)?)[\\s]*,?[\\s]*/ig;\nvar isArray = Array.isArray || function (o) {\n  return o instanceof Array;\n};\nfunction hasProperty(obj, property) {\n  return Object.prototype.hasOwnProperty.call(obj, property);\n}\nfunction clone(obj) {\n  if (typeof obj == 'function' || Object(obj) !== obj) {\n    return obj;\n  }\n  var res = new obj.constructor();\n  for (var key in obj) {\n    if (hasProperty(obj, key)) {\n      res[key] = clone(obj[key]);\n    }\n  }\n  return res;\n}\nfunction repush(array, item) {\n  for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n    return array.push(array.splice(i, 1)[0]);\n  }\n}\nfunction cacher(f) {\n  function newf() {\n    var arg = Array.prototype.slice.call(arguments, 0),\n      args = arg.join('\\u2400'),\n      cache = newf.cache = newf.cache || {},\n      count = newf.count = newf.count || [];\n    if (hasProperty(cache, args)) {\n      repush(count, args);\n      return cache[args];\n    }\n    count.length >= 1e3 && delete cache[count.shift()];\n    count.push(args);\n    cache[args] = f(...arguments);\n    return cache[args];\n  }\n  return newf;\n}\nfunction parsePathString(pathString) {\n  if (!pathString) {\n    return null;\n  }\n  var pth = paths(pathString);\n  if (pth.arr) {\n    return clone(pth.arr);\n  }\n  var paramCounts = {\n      a: 7,\n      c: 6,\n      h: 1,\n      l: 2,\n      m: 2,\n      q: 4,\n      s: 4,\n      t: 2,\n      v: 1,\n      z: 0\n    },\n    data = [];\n  if (isArray(pathString) && isArray(pathString[0])) {\n    // rough assumption\n    data = clone(pathString);\n  }\n  if (!data.length) {\n    String(pathString).replace(pathCommand, function (a, b, c) {\n      var params = [],\n        name = b.toLowerCase();\n      c.replace(pathValues, function (a, b) {\n        b && params.push(+b);\n      });\n      if (name == 'm' && params.length > 2) {\n        data.push([b, ...params.splice(0, 2)]);\n        name = 'l';\n        b = b == 'm' ? 'l' : 'L';\n      }\n      while (params.length >= paramCounts[name]) {\n        data.push([b, ...params.splice(0, paramCounts[name])]);\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    });\n  }\n  data.toString = paths.toString;\n  pth.arr = clone(data);\n  return data;\n}\nfunction paths(ps) {\n  var p = paths.ps = paths.ps || {};\n  if (p[ps]) {\n    p[ps].sleep = 100;\n  } else {\n    p[ps] = {\n      sleep: 100\n    };\n  }\n  setTimeout(function () {\n    for (var key in p) {\n      if (hasProperty(p, key) && key != ps) {\n        p[key].sleep--;\n        !p[key].sleep && delete p[key];\n      }\n    }\n  });\n  return p[ps];\n}\nfunction rectBBox(x, y, width, height) {\n  if (arguments.length === 1) {\n    y = x.y;\n    width = x.width;\n    height = x.height;\n    x = x.x;\n  }\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    x2: x + width,\n    y2: y + height\n  };\n}\nfunction pathToString() {\n  return this.join(',').replace(p2s, '$1');\n}\nfunction pathClone(pathArray) {\n  var res = clone(pathArray);\n  res.toString = pathToString;\n  return res;\n}\nfunction findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n  var t1 = 1 - t,\n    t13 = pow(t1, 3),\n    t12 = pow(t1, 2),\n    t2 = t * t,\n    t3 = t2 * t,\n    x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n    y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n  return {\n    x: fixError(x),\n    y: fixError(y)\n  };\n}\nfunction bezierBBox(points) {\n  var bbox = curveBBox(...points);\n  return rectBBox(bbox.x0, bbox.y0, bbox.x1 - bbox.x0, bbox.y1 - bbox.y0);\n}\nfunction isPointInsideBBox(bbox, x, y) {\n  return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n}\nfunction isBBoxIntersect(bbox1, bbox2) {\n  bbox1 = rectBBox(bbox1);\n  bbox2 = rectBBox(bbox2);\n  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n}\nfunction base3(t, p1, p2, p3, p4) {\n  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n    t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n}\nfunction bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n  if (z == null) {\n    z = 1;\n  }\n  z = z > 1 ? 1 : z < 0 ? 0 : z;\n  var z2 = z / 2,\n    n = 12,\n    Tvalues = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816],\n    Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472],\n    sum = 0;\n  for (var i = 0; i < n; i++) {\n    var ct = z2 * Tvalues[i] + z2,\n      xbase = base3(ct, x1, x2, x3, x4),\n      ybase = base3(ct, y1, y2, y3, y4),\n      comb = xbase * xbase + ybase * ybase;\n    sum += Cvalues[i] * math.sqrt(comb);\n  }\n  return z2 * sum;\n}\nfunction intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {\n  if (mmax(x1, x2) < mmin(x3, x4) || mmin(x1, x2) > mmax(x3, x4) || mmax(y1, y2) < mmin(y3, y4) || mmin(y1, y2) > mmax(y3, y4)) {\n    return;\n  }\n  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n    ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n    denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n  if (!denominator) {\n    return;\n  }\n  var px = fixError(nx / denominator),\n    py = fixError(ny / denominator),\n    px2 = +px.toFixed(2),\n    py2 = +py.toFixed(2);\n  if (px2 < +mmin(x1, x2).toFixed(2) || px2 > +mmax(x1, x2).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y2).toFixed(2) || py2 > +mmax(y1, y2).toFixed(2) || py2 < +mmin(y3, y4).toFixed(2) || py2 > +mmax(y3, y4).toFixed(2)) {\n    return;\n  }\n  return {\n    x: px,\n    y: py\n  };\n}\nfunction fixError(number) {\n  return Math.round(number * 100000000000) / 100000000000;\n}\nfunction findBezierIntersections(bez1, bez2, justCount) {\n  var bbox1 = bezierBBox(bez1),\n    bbox2 = bezierBBox(bez2);\n  if (!isBBoxIntersect(bbox1, bbox2)) {\n    return justCount ? 0 : [];\n  }\n\n  // As an optimization, lines will have only 1 segment\n\n  var l1 = bezlen(...bez1),\n    l2 = bezlen(...bez2),\n    n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,\n    n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,\n    dots1 = [],\n    dots2 = [],\n    xy = {},\n    res = justCount ? 0 : [];\n  for (var i = 0; i < n1 + 1; i++) {\n    var p = findDotsAtSegment(...bez1, i / n1);\n    dots1.push({\n      x: p.x,\n      y: p.y,\n      t: i / n1\n    });\n  }\n  for (i = 0; i < n2 + 1; i++) {\n    p = findDotsAtSegment(...bez2, i / n2);\n    dots2.push({\n      x: p.x,\n      y: p.y,\n      t: i / n2\n    });\n  }\n  for (i = 0; i < n1; i++) {\n    for (var j = 0; j < n2; j++) {\n      var di = dots1[i],\n        di1 = dots1[i + 1],\n        dj = dots2[j],\n        dj1 = dots2[j + 1],\n        ci = abs(di1.x - di.x) < .01 ? 'y' : 'x',\n        cj = abs(dj1.x - dj.x) < .01 ? 'y' : 'x',\n        is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),\n        key;\n      if (is) {\n        key = is.x.toFixed(9) + '#' + is.y.toFixed(9);\n        if (xy[key]) {\n          continue;\n        }\n        xy[key] = true;\n        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n          t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n          if (justCount) {\n            res++;\n          } else {\n            res.push({\n              x: is.x,\n              y: is.y,\n              t1: t1,\n              t2: t2\n            });\n          }\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Find or counts the intersections between two SVG paths.\n *\n * Returns a number in counting mode and a list of intersections otherwise.\n *\n * A single intersection entry contains the intersection coordinates (x, y)\n * as well as additional information regarding the intersecting segments\n * on each path (segment1, segment2) and the relative location of the\n * intersection on these segments (t1, t2).\n *\n * The path may be an SVG path string or a list of path components\n * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.\n *\n * @example\n *\n * var intersections = findPathIntersections(\n *   'M0,0L100,100',\n *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]\n * );\n *\n * // intersections = [\n * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }\n * // ]\n *\n * @param {String|Array<PathDef>} path1\n * @param {String|Array<PathDef>} path2\n * @param {Boolean} [justCount=false]\n *\n * @return {Array<Intersection>|Number}\n */\nexport default function findPathIntersections(path1, path2, justCount) {\n  path1 = pathToCurve(path1);\n  path2 = pathToCurve(path2);\n  var x1,\n    y1,\n    x2,\n    y2,\n    x1m,\n    y1m,\n    x2m,\n    y2m,\n    bez1,\n    bez2,\n    res = justCount ? 0 : [];\n  for (var i = 0, ii = path1.length; i < ii; i++) {\n    var pi = path1[i];\n    if (pi[0] == 'M') {\n      x1 = x1m = pi[1];\n      y1 = y1m = pi[2];\n    } else {\n      if (pi[0] == 'C') {\n        bez1 = [x1, y1, ...pi.slice(1)];\n        x1 = bez1[6];\n        y1 = bez1[7];\n      } else {\n        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n        x1 = x1m;\n        y1 = y1m;\n      }\n      for (var j = 0, jj = path2.length; j < jj; j++) {\n        var pj = path2[j];\n        if (pj[0] == 'M') {\n          x2 = x2m = pj[1];\n          y2 = y2m = pj[2];\n        } else {\n          if (pj[0] == 'C') {\n            bez2 = [x2, y2, ...pj.slice(1)];\n            x2 = bez2[6];\n            y2 = bez2[7];\n          } else {\n            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n            x2 = x2m;\n            y2 = y2m;\n          }\n          var intr = findBezierIntersections(bez1, bez2, justCount);\n          if (justCount) {\n            res += intr;\n          } else {\n            for (var k = 0, kk = intr.length; k < kk; k++) {\n              intr[k].segment1 = i;\n              intr[k].segment2 = j;\n              intr[k].bez1 = bez1;\n              intr[k].bez2 = bez2;\n            }\n            res = res.concat(intr);\n          }\n        }\n      }\n    }\n  }\n  return res;\n}\nfunction pathToAbsolute(pathArray) {\n  var pth = paths(pathArray);\n  if (pth.abs) {\n    return pathClone(pth.abs);\n  }\n  if (!isArray(pathArray) || !isArray(pathArray && pathArray[0])) {\n    // rough assumption\n    pathArray = parsePathString(pathArray);\n  }\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n  var res = [],\n    x = 0,\n    y = 0,\n    mx = 0,\n    my = 0,\n    start = 0,\n    pa0;\n  if (pathArray[0][0] == 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n    if (pa0 != pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n      switch (r[0]) {\n        case 'A':\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n        case 'V':\n          r[1] = +pa[1] + y;\n          break;\n        case 'H':\n          r[1] = +pa[1] + x;\n          break;\n        case 'M':\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n        default:\n          for (var j = 1, jj = pa.length; j < jj; j++) {\n            r[j] = +pa[j] + (j % 2 ? x : y);\n          }\n      }\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n    pa0 = pa0.toUpperCase();\n    switch (r[0]) {\n      case 'Z':\n        x = +mx;\n        y = +my;\n        break;\n      case 'H':\n        x = r[1];\n        break;\n      case 'V':\n        y = r[1];\n        break;\n      case 'M':\n        mx = r[r.length - 2];\n        my = r[r.length - 1];\n      default:\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n    }\n  }\n  res.toString = pathToString;\n  pth.abs = pathClone(res);\n  return res;\n}\nfunction isLine(bez) {\n  return bez[0] === bez[2] && bez[1] === bez[3] && bez[4] === bez[6] && bez[5] === bez[7];\n}\nfunction lineToCurve(x1, y1, x2, y2) {\n  return [x1, y1, x2, y2, x2, y2];\n}\nfunction qubicToCurve(x1, y1, ax, ay, x2, y2) {\n  var _13 = 1 / 3,\n    _23 = 2 / 3;\n  return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n}\nfunction arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var _120 = PI * 120 / 180,\n    rad = PI / 180 * (+angle || 0),\n    res = [],\n    xy,\n    rotate = cacher(function (x, y, rad) {\n      var X = x * math.cos(rad) - y * math.sin(rad),\n        Y = x * math.sin(rad) + y * math.cos(rad);\n      return {\n        x: X,\n        y: Y\n      };\n    });\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n    var x = (x1 - x2) / 2,\n      y = (y1 - y2) / 2;\n    var h = x * x / (rx * rx) + y * y / (ry * ry);\n    if (h > 1) {\n      h = math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n    var rx2 = rx * rx,\n      ry2 = ry * ry,\n      k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n      cx = k * rx * y / ry + (x1 + x2) / 2,\n      cy = k * -ry * x / rx + (y1 + y2) / 2,\n      f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n      f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n    f1 = x1 < cx ? PI - f1 : f1;\n    f2 = x2 < cx ? PI - f2 : f2;\n    f1 < 0 && (f1 = PI * 2 + f1);\n    f2 < 0 && (f2 = PI * 2 + f2);\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - PI * 2;\n    }\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n  var df = f2 - f1;\n  if (abs(df) > _120) {\n    var f2old = f2,\n      x2old = x2,\n      y2old = y2;\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * math.cos(f2);\n    y2 = cy + ry * math.sin(f2);\n    res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  var c1 = math.cos(f1),\n    s1 = math.sin(f1),\n    c2 = math.cos(f2),\n    s2 = math.sin(f2),\n    t = math.tan(df / 4),\n    hx = 4 / 3 * rx * t,\n    hy = 4 / 3 * ry * t,\n    m1 = [x1, y1],\n    m2 = [x1 + hx * s1, y1 - hy * c1],\n    m3 = [x2 + hx * s2, y2 - hy * c2],\n    m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  } else {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n    for (var i = 0, ii = res.length; i < ii; i++) {\n      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n    }\n    return newres;\n  }\n}\n\n// Returns bounding box of cubic bezier curve.\n// Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n// Original version: NISHIO Hirokazu\n// Modifications: https://github.com/timo22345\nfunction curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var tvalues = [],\n    bounds = [[], []],\n    a,\n    b,\n    c,\n    t,\n    t1,\n    t2,\n    b2ac,\n    sqrtb2ac;\n  for (var i = 0; i < 2; ++i) {\n    if (i == 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    b2ac = b * b - 4 * c * a;\n    sqrtb2ac = math.sqrt(b2ac);\n    if (b2ac < 0) {\n      continue;\n    }\n    t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n  var j = tvalues.length,\n    jlen = j,\n    mt;\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n    bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n  }\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n  bounds[0].length = bounds[1].length = jlen + 2;\n  return {\n    x0: mmin(...bounds[0]),\n    y0: mmin(...bounds[1]),\n    x1: mmax(...bounds[0]),\n    y1: mmax(...bounds[1])\n  };\n}\nfunction pathToCurve(path) {\n  var pth = paths(path);\n\n  // return cached curve, if existing\n  if (pth.curve) {\n    return pathClone(pth.curve);\n  }\n  var curvedPath = pathToAbsolute(path),\n    attrs = {\n      x: 0,\n      y: 0,\n      bx: 0,\n      by: 0,\n      X: 0,\n      Y: 0,\n      qx: null,\n      qy: null\n    },\n    processPath = function (path, d, pathCommand) {\n      var nx, ny;\n      if (!path) {\n        return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n      }\n      !(path[0] in {\n        T: 1,\n        Q: 1\n      }) && (d.qx = d.qy = null);\n      switch (path[0]) {\n        case 'M':\n          d.X = path[1];\n          d.Y = path[2];\n          break;\n        case 'A':\n          path = ['C', ...arcToCurve(d.x, d.y, ...path.slice(1))];\n          break;\n        case 'S':\n          if (pathCommand == 'C' || pathCommand == 'S') {\n            // In 'S' case we have to take into account, if the previous command is C/S.\n            nx = d.x * 2 - d.bx;\n\n            // And reflect the previous\n            ny = d.y * 2 - d.by;\n\n            // command's control point relative to the current point.\n          } else {\n            // or some else or nothing\n            nx = d.x;\n            ny = d.y;\n          }\n          path = ['C', nx, ny, ...path.slice(1)];\n          break;\n        case 'T':\n          if (pathCommand == 'Q' || pathCommand == 'T') {\n            // In 'T' case we have to take into account, if the previous command is Q/T.\n            d.qx = d.x * 2 - d.qx;\n\n            // And make a reflection similar\n            d.qy = d.y * 2 - d.qy;\n\n            // to case 'S'.\n          } else {\n            // or something else or nothing\n            d.qx = d.x;\n            d.qy = d.y;\n          }\n          path = ['C', ...qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2])];\n          break;\n        case 'Q':\n          d.qx = path[1];\n          d.qy = path[2];\n          path = ['C', ...qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4])];\n          break;\n        case 'L':\n          path = ['C', ...lineToCurve(d.x, d.y, path[1], path[2])];\n          break;\n        case 'H':\n          path = ['C', ...lineToCurve(d.x, d.y, path[1], d.y)];\n          break;\n        case 'V':\n          path = ['C', ...lineToCurve(d.x, d.y, d.x, path[1])];\n          break;\n        case 'Z':\n          path = ['C', ...lineToCurve(d.x, d.y, d.X, d.Y)];\n          break;\n      }\n      return path;\n    },\n    fixArc = function (pp, i) {\n      if (pp[i].length > 7) {\n        pp[i].shift();\n        var pi = pp[i];\n        while (pi.length) {\n          pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved\n          pp.splice(i++, 0, ['C', ...pi.splice(0, 6)]);\n        }\n        pp.splice(i, 1);\n        ii = curvedPath.length;\n      }\n    },\n    pathCommands = [],\n    // path commands of original path p\n    pfirst = '',\n    // temporary holder for original path command\n    pathCommand = ''; // holder for previous path command of original path\n\n  for (var i = 0, ii = curvedPath.length; i < ii; i++) {\n    curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command\n\n    if (pfirst != 'C')\n      // C is not saved yet, because it may be result of conversion\n      {\n        pathCommands[i] = pfirst; // Save current path command\n        i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand\n      }\n    curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath\n\n    if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands\n\n    var seg = curvedPath[i],\n      seglen = seg.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n  }\n\n  // cache curve\n  pth.curve = pathClone(curvedPath);\n  return curvedPath;\n}", "import { isObject, sortBy } from 'min-dash';\nimport { pointDistance, pointsOnLine } from '../util/Geometry';\nimport intersectPaths from 'path-intersection';\nimport { isConnection } from '../util/ModelUtil';\n\n/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n *\n * @typedef {import('../util/Types').DirectionTRBL} DirectionTRBL\n * @typedef {import('../util/Types').Intersection} Intersection\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n * @typedef {import('../util/Types').RectTRBL} RectTRBL\n */\n\n/**\n * @param {Rect} bounds\n *\n * @returns {Rect}\n */\nexport function roundBounds(bounds) {\n  return {\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  };\n}\n\n/**\n * @param {Point} point\n *\n * @returns {Point}\n */\nexport function roundPoint(point) {\n  return {\n    x: Math.round(point.x),\n    y: Math.round(point.y)\n  };\n}\n\n/**\n * Convert the given bounds to a { top, left, bottom, right } descriptor.\n *\n * @param {Point|Rect} bounds\n *\n * @return {RectTRBL}\n */\nexport function asTRBL(bounds) {\n  return {\n    top: bounds.y,\n    right: bounds.x + (bounds.width || 0),\n    bottom: bounds.y + (bounds.height || 0),\n    left: bounds.x\n  };\n}\n\n/**\n * Convert a { top, left, bottom, right } to an objects bounds.\n *\n * @param {RectTRBL} trbl\n *\n * @return {Rect}\n */\nexport function asBounds(trbl) {\n  return {\n    x: trbl.left,\n    y: trbl.top,\n    width: trbl.right - trbl.left,\n    height: trbl.bottom - trbl.top\n  };\n}\n\n/**\n * Get the mid of the given bounds or point.\n *\n * @param {Point|Rect} bounds\n *\n * @return {Point}\n */\nexport function getBoundsMid(bounds) {\n  return roundPoint({\n    x: bounds.x + (bounds.width || 0) / 2,\n    y: bounds.y + (bounds.height || 0) / 2\n  });\n}\n\n/**\n * Get the mid of the given Connection.\n *\n * @param {Connection} connection\n *\n * @return {Point}\n */\nexport function getConnectionMid(connection) {\n  var waypoints = connection.waypoints;\n\n  // calculate total length and length of each segment\n  var parts = waypoints.reduce(function (parts, point, index) {\n    var lastPoint = waypoints[index - 1];\n    if (lastPoint) {\n      var lastPart = parts[parts.length - 1];\n      var startLength = lastPart && lastPart.endLength || 0;\n      var length = distance(lastPoint, point);\n      parts.push({\n        start: lastPoint,\n        end: point,\n        startLength: startLength,\n        endLength: startLength + length,\n        length: length\n      });\n    }\n    return parts;\n  }, []);\n  var totalLength = parts.reduce(function (length, part) {\n    return length + part.length;\n  }, 0);\n\n  // find which segement contains middle point\n  var midLength = totalLength / 2;\n  var i = 0;\n  var midSegment = parts[i];\n  while (midSegment.endLength < midLength) {\n    midSegment = parts[++i];\n  }\n\n  // calculate relative position on mid segment\n  var segmentProgress = (midLength - midSegment.startLength) / midSegment.length;\n  var midPoint = {\n    x: midSegment.start.x + (midSegment.end.x - midSegment.start.x) * segmentProgress,\n    y: midSegment.start.y + (midSegment.end.y - midSegment.start.y) * segmentProgress\n  };\n  return midPoint;\n}\n\n/**\n * Get the mid of the given Element.\n *\n * @param {Element} element\n *\n * @return {Point}\n */\nexport function getMid(element) {\n  if (isConnection(element)) {\n    return getConnectionMid(element);\n  }\n  return getBoundsMid(element);\n}\n\n// orientation utils //////////////////////\n\n/**\n * Get orientation of the given rectangle with respect to\n * the reference rectangle.\n *\n * A padding (positive or negative) may be passed to influence\n * horizontal / vertical orientation and intersection.\n *\n * @param {Rect} rect\n * @param {Rect} reference\n * @param {Point|number} padding\n *\n * @return {DirectionTRBL|Intersection} the orientation; one of top, top-left, left, ..., bottom, right or intersect.\n */\nexport function getOrientation(rect, reference, padding) {\n  padding = padding || 0;\n\n  // make sure we can use an object, too\n  // for individual { x, y } padding\n  if (!isObject(padding)) {\n    padding = {\n      x: padding,\n      y: padding\n    };\n  }\n  var rectOrientation = asTRBL(rect),\n    referenceOrientation = asTRBL(reference);\n  var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,\n    right = rectOrientation.left - padding.x >= referenceOrientation.right,\n    bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,\n    left = rectOrientation.right + padding.x <= referenceOrientation.left;\n  var vertical = top ? 'top' : bottom ? 'bottom' : null,\n    horizontal = left ? 'left' : right ? 'right' : null;\n  if (horizontal && vertical) {\n    return vertical + '-' + horizontal;\n  } else {\n    return horizontal || vertical || 'intersect';\n  }\n}\n\n// intersection utils //////////////////////\n\n/**\n * Get intersection between an element and a line path.\n *\n * @param {string} elementPath\n * @param {string} linePath\n * @param {boolean} cropStart Whether to crop start or end.\n *\n * @return {Point}\n */\nexport function getElementLineIntersection(elementPath, linePath, cropStart) {\n  var intersections = getIntersections(elementPath, linePath);\n\n  // recognize intersections\n  // only one -> choose\n  // two close together -> choose first\n  // two or more distinct -> pull out appropriate one\n  // none -> ok (fallback to point itself)\n  if (intersections.length === 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length === 2 && pointDistance(intersections[0], intersections[1]) < 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length > 1) {\n    // sort by intersections based on connection segment +\n    // distance from start\n    intersections = sortBy(intersections, function (i) {\n      var distance = Math.floor(i.t2 * 100) || 1;\n      distance = 100 - distance;\n      distance = (distance < 10 ? '0' : '') + distance;\n\n      // create a sort string that makes sure we sort\n      // line segment ASC + line segment position DESC (for cropStart)\n      // line segment ASC + line segment position ASC (for cropEnd)\n      return i.segment2 + '#' + distance;\n    });\n    return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);\n  }\n  return null;\n}\nexport function getIntersections(a, b) {\n  return intersectPaths(a, b);\n}\nexport function filterRedundantWaypoints(waypoints) {\n  // alter copy of waypoints, not original\n  waypoints = waypoints.slice();\n  var idx = 0,\n    point,\n    previousPoint,\n    nextPoint;\n  while (waypoints[idx]) {\n    point = waypoints[idx];\n    previousPoint = waypoints[idx - 1];\n    nextPoint = waypoints[idx + 1];\n    if (pointDistance(point, nextPoint) === 0 || pointsOnLine(previousPoint, nextPoint, point)) {\n      // remove point, if overlapping with {nextPoint}\n      // or on line with {previousPoint} -> {point} -> {nextPoint}\n      waypoints.splice(idx, 1);\n    } else {\n      idx++;\n    }\n  }\n  return waypoints;\n}\n\n// helpers //////////////////////\n\nfunction distance(a, b) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}"],
  "mappings": "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",
  "names": ["a", "b", "x", "y", "rad", "path", "pathCommand", "i", "parts", "distance"]
}
